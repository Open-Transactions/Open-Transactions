/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGD
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>

/* Contract support. */
#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_DSetPendingException(SWIG_DException, msg); return nullreturn; } else


// Support for throwing D exceptions from C/C++.
typedef enum {
  SWIG_DException = 0,
  SWIG_DIllegalArgumentException,
  SWIG_DIllegalElementException,
  SWIG_DIOException,
  SWIG_DNoSuchElementException,
} SWIG_DExceptionCodes;

typedef void (* SWIG_DExceptionCallback_t)(const char *);

typedef struct {
  SWIG_DExceptionCodes code;
  SWIG_DExceptionCallback_t callback;
} SWIG_DException_t;

static SWIG_DException_t SWIG_d_exceptions[] = {
  { SWIG_DException, NULL },
  { SWIG_DIllegalArgumentException, NULL },
  { SWIG_DIllegalElementException, NULL },
  { SWIG_DIOException, NULL },
  { SWIG_DNoSuchElementException, NULL }
};

static void SWIGUNUSED SWIG_DSetPendingException(SWIG_DExceptionCodes code, const char *msg) {
  if ((size_t)code < sizeof(SWIG_d_exceptions)/sizeof(SWIG_DException_t)) {
    SWIG_d_exceptions[code].callback(msg);
  } else {
    SWIG_d_exceptions[SWIG_DException].callback(msg);
  }
}

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGRegisterExceptionCallbacks_otapi(
  SWIG_DExceptionCallback_t exceptionCallback,
  SWIG_DExceptionCallback_t illegalArgumentCallback,
  SWIG_DExceptionCallback_t illegalElementCallback,
  SWIG_DExceptionCallback_t ioCallback,
  SWIG_DExceptionCallback_t noSuchElementCallback) {
  SWIG_d_exceptions[SWIG_DException].callback = exceptionCallback;
  SWIG_d_exceptions[SWIG_DIllegalArgumentException].callback = illegalArgumentCallback;
  SWIG_d_exceptions[SWIG_DIllegalElementException].callback = illegalElementCallback;
  SWIG_d_exceptions[SWIG_DIOException].callback = ioCallback;
  SWIG_d_exceptions[SWIG_DNoSuchElementException].callback = noSuchElementCallback;
}


// Callback for returning strings to D without leaking memory.
typedef char * (* SWIG_DStringHelperCallback)(const char *);
static SWIG_DStringHelperCallback SWIG_d_string_callback = NULL;

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGRegisterStringCallback_otapi(SWIG_DStringHelperCallback callback) {
  SWIG_d_string_callback = callback;
}

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that D proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {

  // Director base class â€“ not used in D directors.
  class Director {
  };

  // Base class for director exceptions.
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  // Exception which is thrown when attempting to call a pure virtual method
  // from D code through the director layer.
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempted to invoke pure virtual method ") + msg) {
    }
  };
}


#include <inttypes.h>


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>



#ifndef IMPORT
#define IMPORT
#endif

#include <string>
#include <vector>
#include <map>

#include "../../include/otlib/OTPassword.hpp"
#include "../../include/otapi/OTAPI.hpp"
#include "../../include/otapi/OT_ME.hpp"
#include "../../include/otlib/OTStorage.hpp"
#include "../../include/otlib/OTAsymmetricKey.hpp"


SWIGINTERN std::vector< unsigned char > *new_std_vector_Sl_unsigned_SS_char_Sg___SWIG_2(std::vector< unsigned char >::size_type capacity){
        std::vector< unsigned char >* pv = 0;
        pv = new std::vector< unsigned char >();

        // Might throw std::length_error.
        pv->reserve(capacity);

        return pv;
      }
SWIGINTERN std::vector< unsigned char >::size_type std_vector_Sl_unsigned_SS_char_Sg__unused(std::vector< unsigned char > const *self){
        return self->capacity() - self->size();
      }
SWIGINTERN unsigned char const &std_vector_Sl_unsigned_SS_char_Sg__remove__SWIG_0(std::vector< unsigned char > *self){
        if (self->empty()) {
          throw std::out_of_range("Tried to remove last element from empty vector.");
        }

        std::vector< unsigned char >::const_reference value = self->back();
        self->pop_back();
        return value;
      }
SWIGINTERN unsigned char const &std_vector_Sl_unsigned_SS_char_Sg__remove__SWIG_1(std::vector< unsigned char > *self,std::vector< unsigned char >::size_type index){
        if (index >= self->size()) {
          throw std::out_of_range("Tried to remove element with invalid index.");
        }

        std::vector< unsigned char >::iterator it = self->begin() + index;
        std::vector< unsigned char >::const_reference value = *it;
        self->erase(it);
        return value;
      }
SWIGINTERN unsigned char const &std_vector_Sl_unsigned_SS_char_Sg__getElement(std::vector< unsigned char > *self,std::vector< unsigned char >::size_type index){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to get value of element with invalid index.");
        }
        return (*self)[index];
      }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__setElement(std::vector< unsigned char > *self,std::vector< unsigned char >::size_type index,unsigned char const &val){
        if ((index < 0) || (self->size() <= index)) {
          throw std::out_of_range("Tried to set value of element with invalid index.");
        }
        (*self)[index] = val;
      }
SWIGINTERN std::string const &std_map_Sl_std_string_Sc_std_string_Sg__get(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__set(std::map< std::string,std::string > *self,std::string const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__del(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                return i != self->end();
            }

	using namespace OTDB;
	


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "OTAPI-d.hpp"

SwigDirector_OTCallback::SwigDirector_OTCallback() : OTCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_OTCallback::~SwigDirector_OTCallback() {
  
}


void SwigDirector_OTCallback::runOne(char const *szDisplay, OTPassword &theOutput) {
  char * jszDisplay = 0 ;
  void * jtheOutput = 0 ;
  
  if (!swig_callback_runOne) {
    OTCallback::runOne(szDisplay,theOutput);
    return;
  } else {
    jszDisplay = SWIG_d_string_callback((const char *)szDisplay); 
    jtheOutput = (OTPassword *) &theOutput;
    swig_callback_runOne(d_object, jszDisplay, jtheOutput);
  }
}

void SwigDirector_OTCallback::runTwo(char const *szDisplay, OTPassword &theOutput) {
  char * jszDisplay = 0 ;
  void * jtheOutput = 0 ;
  
  if (!swig_callback_runTwo) {
    OTCallback::runTwo(szDisplay,theOutput);
    return;
  } else {
    jszDisplay = SWIG_d_string_callback((const char *)szDisplay); 
    jtheOutput = (OTPassword *) &theOutput;
    swig_callback_runTwo(d_object, jszDisplay, jtheOutput);
  }
}

void SwigDirector_OTCallback::swig_connect_director(void* dobj, SWIG_Callback0_t callback_runOne, SWIG_Callback1_t callback_runTwo) {
  d_object = dobj;swig_callback_runOne = callback_runOne;
  swig_callback_runTwo = callback_runTwo;
}

void SwigDirector_OTCallback::swig_init_callbacks() {
  swig_callback_runOne = 0;
  swig_callback_runTwo = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void D_imaxdiv_t_quot_set(void * jarg1, long long jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  
  arg1 = (imaxdiv_t *)jarg1;
  arg2 = (long long)jarg2;
  if (arg1) (arg1)->quot = arg2;
}


SWIGEXPORT long long D_imaxdiv_t_quot_get(void * jarg1) {
  long long jresult ;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long result;
  
  arg1 = (imaxdiv_t *)jarg1;
  result = (long long) ((arg1)->quot);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_imaxdiv_t_rem_set(void * jarg1, long long jarg2) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  
  arg1 = (imaxdiv_t *)jarg1;
  arg2 = (long long)jarg2;
  if (arg1) (arg1)->rem = arg2;
}


SWIGEXPORT long long D_imaxdiv_t_rem_get(void * jarg1) {
  long long jresult ;
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long result;
  
  arg1 = (imaxdiv_t *)jarg1;
  result = (long long) ((arg1)->rem);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_imaxdiv_t() {
  void * jresult ;
  imaxdiv_t *result = 0 ;
  
  result = (imaxdiv_t *)new imaxdiv_t();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_imaxdiv_t(void * jarg1) {
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  
  arg1 = (imaxdiv_t *)jarg1;
  delete arg1;
}


SWIGEXPORT long long D_imaxabs(long long jarg1) {
  long long jresult ;
  intmax_t arg1 ;
  intmax_t result;
  
  arg1 = (intmax_t)jarg1;
  result = (intmax_t)imaxabs(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_imaxdiv(long long jarg1, long long jarg2) {
  void * jresult ;
  intmax_t arg1 ;
  intmax_t arg2 ;
  imaxdiv_t result;
  
  arg1 = (intmax_t)jarg1;
  arg2 = (intmax_t)jarg2;
  result = imaxdiv(arg1,arg2);
  jresult = new imaxdiv_t((const imaxdiv_t &)result); 
  return jresult;
}


SWIGEXPORT void D_VectorUnsignedChar_clear(void * jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  (arg1)->clear();
}


SWIGEXPORT void D_VectorUnsignedChar_push_back(void * jarg1, unsigned char jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *arg2 = 0 ;
  unsigned char temp2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  temp2 = (unsigned char)jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((unsigned char const &)*arg2);
}


SWIGEXPORT size_t D_VectorUnsignedChar_size(void * jarg1) {
  size_t jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  result = ((std::vector< unsigned char > const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_VectorUnsignedChar_capacity(void * jarg1) {
  size_t jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  result = ((std::vector< unsigned char > const *)arg1)->capacity();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_VectorUnsignedChar_reserve(void * jarg1, size_t jarg2) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  arg2 = (std::vector< unsigned char >::size_type)jarg2;
  try {
    (arg1)->reserve(arg2);
  }
  catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void * D_new_VectorUnsignedChar__SWIG_0() {
  void * jresult ;
  std::vector< unsigned char > *result = 0 ;
  
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_VectorUnsignedChar__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< unsigned char > *arg1 = 0 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::vector< unsigned char > const & type is null");
    return 0;
  } 
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >((std::vector< unsigned char > const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_VectorUnsignedChar__SWIG_2(size_t jarg1) {
  void * jresult ;
  std::vector< unsigned char >::size_type arg1 ;
  std::vector< unsigned char > *result = 0 ;
  
  arg1 = (std::vector< unsigned char >::size_type)jarg1;
  try {
    result = (std::vector< unsigned char > *)new_std_vector_Sl_unsigned_SS_char_Sg___SWIG_2(arg1);
  }
  catch(std::length_error &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT size_t D_VectorUnsignedChar_unused(void * jarg1) {
  size_t jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  result = std_vector_Sl_unsigned_SS_char_Sg__unused((std::vector< unsigned char > const *)arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned char D_VectorUnsignedChar_remove__SWIG_0(void * jarg1) {
  unsigned char jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  unsigned char *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  try {
    result = (unsigned char *) &std_vector_Sl_unsigned_SS_char_Sg__remove__SWIG_0(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  
  jresult = *result;
  return jresult;
}


SWIGEXPORT unsigned char D_VectorUnsignedChar_remove__SWIG_1(void * jarg1, size_t jarg2) {
  unsigned char jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  unsigned char *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  arg2 = (std::vector< unsigned char >::size_type)jarg2;
  try {
    result = (unsigned char *) &std_vector_Sl_unsigned_SS_char_Sg__remove__SWIG_1(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  
  jresult = *result;
  return jresult;
}


SWIGEXPORT unsigned char D_VectorUnsignedChar_getElement(void * jarg1, size_t jarg2) {
  unsigned char jresult ;
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  unsigned char *result = 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  arg2 = (std::vector< unsigned char >::size_type)jarg2;
  try {
    result = (unsigned char *) &std_vector_Sl_unsigned_SS_char_Sg__getElement(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  
  jresult = *result;
  return jresult;
}


SWIGEXPORT void D_VectorUnsignedChar_setElement(void * jarg1, size_t jarg2, unsigned char jarg3) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  arg2 = (std::vector< unsigned char >::size_type)jarg2;
  temp3 = (unsigned char)jarg3;
  arg3 = &temp3; 
  try {
    std_vector_Sl_unsigned_SS_char_Sg__setElement(arg1,arg2,(unsigned char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void D_delete_VectorUnsignedChar(void * jarg1) {
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  arg1 = (std::vector< unsigned char > *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_MapStringString__SWIG_0() {
  void * jresult ;
  std::map< std::string,std::string > *result = 0 ;
  
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_MapStringString__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::map< std::string,std::string > const & type is null");
    return 0;
  } 
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_MapStringString_size(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  unsigned int result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1;
  result = (unsigned int)((std::map< std::string,std::string > const *)arg1)->size();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_MapStringString_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1;
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_MapStringString_clear(void * jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1;
  (arg1)->clear();
}


SWIGEXPORT char * D_MapStringString_get(void * jarg1, char * jarg2) {
  char * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    result = (std::string *) &std_map_Sl_std_string_Sc_std_string_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return 0;
  }
  
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MapStringString_set(void * jarg1, char * jarg2, char * jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  std_map_Sl_std_string_Sc_std_string_Sg__set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void D_MapStringString_del(void * jarg1, char * jarg2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  try {
    std_map_Sl_std_string_Sc_std_string_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_DSetPendingException(SWIG_DNoSuchElementException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int D_MapStringString_has_key(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key(arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_MapStringString(void * jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1;
  delete arg1;
}


SWIGEXPORT char * D_OT_PW_DISPLAY_get() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *) "Enter master passphrase for wallet.";
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int D_OTPASSWORD_BLOCKSIZE_get() {
  int jresult ;
  int result;
  
  result = (int) 128;
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTPASSWORD_MEMSIZE_get() {
  int jresult ;
  int result;
  
  result = (int) 129;
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OT_LARGE_BLOCKSIZE_get() {
  int jresult ;
  int result;
  
  result = (int) 32767;
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OT_LARGE_MEMSIZE_get() {
  int jresult ;
  int result;
  
  result = (int) 32768;
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OT_DEFAULT_BLOCKSIZE_get() {
  int jresult ;
  int result;
  
  result = (int) 128;
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OT_DEFAULT_MEMSIZE_get() {
  int jresult ;
  int result;
  
  result = (int) 129;
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTPassword_m_theBlockSize_get(void * jarg1) {
  int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  OTPassword::BlockSize result;
  
  arg1 = (OTPassword *)jarg1;
  result = (OTPassword::BlockSize)(OTPassword::BlockSize) ((arg1)->m_theBlockSize);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int D_OTPassword_isPassword(void * jarg1) {
  unsigned int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  bool result;
  
  arg1 = (OTPassword *)jarg1;
  result = (bool)((OTPassword const *)arg1)->isPassword();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_OTPassword_getPassword_uint8(void * jarg1) {
  void * jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (OTPassword *)jarg1;
  result = (uint8_t *)((OTPassword const *)arg1)->getPassword_uint8();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * D_OTPassword_getPassword(void * jarg1) {
  char * jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  char *result = 0 ;
  
  arg1 = (OTPassword *)jarg1;
  result = (char *)((OTPassword const *)arg1)->getPassword();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * D_OTPassword_getPasswordWritable(void * jarg1) {
  void * jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (OTPassword *)jarg1;
  result = (uint8_t *)(arg1)->getPasswordWritable();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * D_OTPassword_getPasswordWritable_char(void * jarg1) {
  char * jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  char *result = 0 ;
  
  arg1 = (OTPassword *)jarg1;
  result = (char *)(arg1)->getPasswordWritable_char();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT int D_OTPassword_setPassword(void * jarg1, char * jarg2, int jarg3) {
  int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  int32_t result;
  
  arg1 = (OTPassword *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (int32_t)jarg3;
  result = (int32_t)(arg1)->setPassword((char const *)arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTPassword_setPassword_uint8(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint32_t arg3 ;
  int32_t result;
  
  arg1 = (OTPassword *)jarg1;
  arg2 = (uint8_t *)jarg2;
  arg3 = (uint32_t)jarg3;
  result = (int32_t)(arg1)->setPassword_uint8((uint8_t const *)arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTPassword_addChar(void * jarg1, unsigned char jarg2) {
  unsigned int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint8_t arg2 ;
  bool result;
  
  arg1 = (OTPassword *)jarg1;
  arg2 = (uint8_t)jarg2;
  result = (bool)(arg1)->addChar(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTPassword_randomizePassword__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint32_t arg2 ;
  int32_t result;
  
  arg1 = (OTPassword *)jarg1;
  arg2 = (uint32_t)jarg2;
  result = (int32_t)(arg1)->randomizePassword(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTPassword_randomizePassword__SWIG_1(void * jarg1) {
  int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  int32_t result;
  
  arg1 = (OTPassword *)jarg1;
  result = (int32_t)(arg1)->randomizePassword();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTPassword_randomizePassword_uint8(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  arg1 = (uint8_t *)jarg1;
  arg2 = (uint32_t)jarg2;
  result = (bool)OTPassword::randomizePassword_uint8(arg1,arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTPassword_randomizePassword__SWIG_2(char * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  arg2 = (uint32_t)jarg2;
  result = (bool)OTPassword::randomizePassword(arg1,arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTPassword_isMemory(void * jarg1) {
  unsigned int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  bool result;
  
  arg1 = (OTPassword *)jarg1;
  result = (bool)((OTPassword const *)arg1)->isMemory();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_OTPassword_getMemory(void * jarg1) {
  void * jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  void *result = 0 ;
  
  arg1 = (OTPassword *)jarg1;
  result = (void *)((OTPassword const *)arg1)->getMemory();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_OTPassword_getMemory_uint8(void * jarg1) {
  void * jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint8_t *result = 0 ;
  
  arg1 = (OTPassword *)jarg1;
  result = (uint8_t *)((OTPassword const *)arg1)->getMemory_uint8();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_OTPassword_getMemoryWritable(void * jarg1) {
  void * jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  void *result = 0 ;
  
  arg1 = (OTPassword *)jarg1;
  result = (void *)(arg1)->getMemoryWritable();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_OTPassword_setMemory(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  int32_t result;
  
  arg1 = (OTPassword *)jarg1;
  arg2 = (void *)jarg2;
  arg3 = (uint32_t)jarg3;
  result = (int32_t)(arg1)->setMemory((void const *)arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTPassword_addMemory(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  int32_t result;
  
  arg1 = (OTPassword *)jarg1;
  arg2 = (void *)jarg2;
  arg3 = (uint32_t)jarg3;
  result = (int32_t)(arg1)->addMemory((void const *)arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTPassword_randomizeMemory__SWIG_0(void * jarg1, unsigned int jarg2) {
  int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint32_t arg2 ;
  int32_t result;
  
  arg1 = (OTPassword *)jarg1;
  arg2 = (uint32_t)jarg2;
  result = (int32_t)(arg1)->randomizeMemory(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTPassword_randomizeMemory__SWIG_1(void * jarg1) {
  int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  int32_t result;
  
  arg1 = (OTPassword *)jarg1;
  result = (int32_t)(arg1)->randomizeMemory();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTPassword_randomizeMemory_uint8(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  arg1 = (uint8_t *)jarg1;
  arg2 = (uint32_t)jarg2;
  result = (bool)OTPassword::randomizeMemory_uint8(arg1,arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTPassword_randomizeMemory__SWIG_2(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  arg1 = (void *)jarg1;
  arg2 = (uint32_t)jarg2;
  result = (bool)OTPassword::randomizeMemory(arg1,arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTPassword_getBlockSize(void * jarg1) {
  unsigned int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint32_t result;
  
  arg1 = (OTPassword *)jarg1;
  result = (uint32_t)((OTPassword const *)arg1)->getBlockSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTPassword_Compare(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  OTPassword *arg2 = 0 ;
  bool result;
  
  arg1 = (OTPassword *)jarg1;
  arg2 = (OTPassword *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTPassword & type is null");
    return 0;
  } 
  result = (bool)((OTPassword const *)arg1)->Compare(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTPassword_getPasswordSize(void * jarg1) {
  unsigned int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint32_t result;
  
  arg1 = (OTPassword *)jarg1;
  result = (uint32_t)((OTPassword const *)arg1)->getPasswordSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTPassword_getMemorySize(void * jarg1) {
  unsigned int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint32_t result;
  
  arg1 = (OTPassword *)jarg1;
  result = (uint32_t)((OTPassword const *)arg1)->getMemorySize();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_OTPassword_zeroMemory__SWIG_0(void * jarg1) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  
  arg1 = (OTPassword *)jarg1;
  (arg1)->zeroMemory();
}


SWIGEXPORT void D_OTPassword_zeroMemory__SWIG_1(void * jarg1, unsigned int jarg2) {
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (uint8_t *)jarg1;
  arg2 = (uint32_t)jarg2;
  OTPassword::zeroMemory(arg1,arg2);
}


SWIGEXPORT void D_OTPassword_zeroMemory__SWIG_2(void * jarg1, unsigned int jarg2) {
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  
  arg1 = (void *)jarg1;
  arg2 = (uint32_t)jarg2;
  OTPassword::zeroMemory(arg1,arg2);
}


SWIGEXPORT void * D_OTPassword_safe_memcpy__SWIG_0(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4, unsigned int jarg5) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  void *arg3 = (void *) 0 ;
  uint32_t arg4 ;
  bool arg5 ;
  void *result = 0 ;
  
  arg1 = (void *)jarg1;
  arg2 = (uint32_t)jarg2;
  arg3 = (void *)jarg3;
  arg4 = (uint32_t)jarg4;
  arg5 = jarg5 ? true : false;
  result = (void *)OTPassword::safe_memcpy(arg1,arg2,(void const *)arg3,arg4,arg5);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_OTPassword_safe_memcpy__SWIG_1(void * jarg1, unsigned int jarg2, void * jarg3, unsigned int jarg4) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  void *arg3 = (void *) 0 ;
  uint32_t arg4 ;
  void *result = 0 ;
  
  arg1 = (void *)jarg1;
  arg2 = (uint32_t)jarg2;
  arg3 = (void *)jarg3;
  arg4 = (uint32_t)jarg4;
  result = (void *)OTPassword::safe_memcpy(arg1,arg2,(void const *)arg3,arg4);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_OTPassword_CreateTextBuffer() {
  void * jresult ;
  OTPassword *result = 0 ;
  
  result = (OTPassword *)OTPassword::CreateTextBuffer();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTPassword_SetSize(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  arg1 = (OTPassword *)jarg1;
  arg2 = (uint32_t)jarg2;
  result = (bool)(arg1)->SetSize(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_new_OTPassword__SWIG_0(int jarg1) {
  void * jresult ;
  OTPassword::BlockSize arg1 ;
  OTPassword *result = 0 ;
  
  arg1 = (OTPassword::BlockSize)jarg1; 
  result = (OTPassword *)new OTPassword(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_OTPassword__SWIG_1() {
  void * jresult ;
  OTPassword *result = 0 ;
  
  result = (OTPassword *)new OTPassword();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_OTPassword__SWIG_2(void * jarg1) {
  void * jresult ;
  OTPassword *arg1 = 0 ;
  OTPassword *result = 0 ;
  
  arg1 = (OTPassword *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTPassword const & type is null");
    return 0;
  } 
  result = (OTPassword *)new OTPassword((OTPassword const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_OTPassword__SWIG_3(char * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  OTPassword::BlockSize arg3 ;
  OTPassword *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (uint32_t)jarg2;
  arg3 = (OTPassword::BlockSize)jarg3; 
  result = (OTPassword *)new OTPassword((char const *)arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_OTPassword__SWIG_4(char * jarg1, unsigned int jarg2) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  OTPassword *result = 0 ;
  
  arg1 = (char *)jarg1; 
  arg2 = (uint32_t)jarg2;
  result = (OTPassword *)new OTPassword((char const *)arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_OTPassword__SWIG_5(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  OTPassword::BlockSize arg3 ;
  OTPassword *result = 0 ;
  
  arg1 = (uint8_t *)jarg1;
  arg2 = (uint32_t)jarg2;
  arg3 = (OTPassword::BlockSize)jarg3; 
  result = (OTPassword *)new OTPassword((uint8_t const *)arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_OTPassword__SWIG_6(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  OTPassword *result = 0 ;
  
  arg1 = (uint8_t *)jarg1;
  arg2 = (uint32_t)jarg2;
  result = (OTPassword *)new OTPassword((uint8_t const *)arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_OTPassword__SWIG_7(void * jarg1, unsigned int jarg2, int jarg3) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  OTPassword::BlockSize arg3 ;
  OTPassword *result = 0 ;
  
  arg1 = (void *)jarg1;
  arg2 = (uint32_t)jarg2;
  arg3 = (OTPassword::BlockSize)jarg3; 
  result = (OTPassword *)new OTPassword((void const *)arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_new_OTPassword__SWIG_8(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  OTPassword *result = 0 ;
  
  arg1 = (void *)jarg1;
  arg2 = (uint32_t)jarg2;
  result = (OTPassword *)new OTPassword((void const *)arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_OTPassword(void * jarg1) {
  OTPassword *arg1 = (OTPassword *) 0 ;
  
  arg1 = (OTPassword *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_new_OTCallback() {
  void * jresult ;
  OTCallback *result = 0 ;
  
  result = (OTCallback *)new SwigDirector_OTCallback();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_OTCallback(void * jarg1) {
  OTCallback *arg1 = (OTCallback *) 0 ;
  
  arg1 = (OTCallback *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_OTCallback_runOne(void * jarg1, char * jarg2, void * jarg3) {
  OTCallback *arg1 = (OTCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  OTPassword *arg3 = 0 ;
  
  arg1 = (OTCallback *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (OTPassword *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTPassword & type is null");
    return ;
  } 
  (arg1)->runOne((char const *)arg2,*arg3);
}


SWIGEXPORT void D_OTCallback_runOneSwigExplicitOTCallback(void * jarg1, char * jarg2, void * jarg3) {
  OTCallback *arg1 = (OTCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  OTPassword *arg3 = 0 ;
  
  arg1 = (OTCallback *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (OTPassword *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTPassword & type is null");
    return ;
  } 
  (arg1)->OTCallback::runOne((char const *)arg2,*arg3);
}


SWIGEXPORT void D_OTCallback_runTwo(void * jarg1, char * jarg2, void * jarg3) {
  OTCallback *arg1 = (OTCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  OTPassword *arg3 = 0 ;
  
  arg1 = (OTCallback *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (OTPassword *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTPassword & type is null");
    return ;
  } 
  (arg1)->runTwo((char const *)arg2,*arg3);
}


SWIGEXPORT void D_OTCallback_runTwoSwigExplicitOTCallback(void * jarg1, char * jarg2, void * jarg3) {
  OTCallback *arg1 = (OTCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  OTPassword *arg3 = 0 ;
  
  arg1 = (OTCallback *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (OTPassword *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTPassword & type is null");
    return ;
  } 
  (arg1)->OTCallback::runTwo((char const *)arg2,*arg3);
}


SWIGEXPORT void D_OTCallback_director_connect(void *objarg, void *dobj, SwigDirector_OTCallback::SWIG_Callback0_t callback0, SwigDirector_OTCallback::SWIG_Callback1_t callback1) {
  OTCallback *obj = (OTCallback *)objarg;
  SwigDirector_OTCallback *director = dynamic_cast<SwigDirector_OTCallback *>(obj);
  if (director) {
    director->swig_connect_director(dobj, callback0, callback1);
  }
}


SWIGEXPORT void * D_new_OTCaller() {
  void * jresult ;
  OTCaller *result = 0 ;
  
  result = (OTCaller *)new OTCaller();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_OTCaller(void * jarg1) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  
  arg1 = (OTCaller *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_OTCaller_GetPassword(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTCaller *arg1 = (OTCaller *) 0 ;
  OTPassword *arg2 = 0 ;
  bool result;
  
  arg1 = (OTCaller *)jarg1;
  arg2 = (OTPassword *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTPassword & type is null");
    return 0;
  } 
  result = (bool)((OTCaller const *)arg1)->GetPassword(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_OTCaller_ZeroOutPassword(void * jarg1) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  
  arg1 = (OTCaller *)jarg1;
  (arg1)->ZeroOutPassword();
}


SWIGEXPORT char * D_OTCaller_GetDisplay(void * jarg1) {
  char * jresult ;
  OTCaller *arg1 = (OTCaller *) 0 ;
  char *result = 0 ;
  
  arg1 = (OTCaller *)jarg1;
  result = (char *)((OTCaller const *)arg1)->GetDisplay();
  jresult = SWIG_d_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void D_OTCaller_SetDisplay(void * jarg1, char * jarg2, int jarg3) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  
  arg1 = (OTCaller *)jarg1;
  arg2 = (char *)jarg2; 
  arg3 = (int32_t)jarg3;
  (arg1)->SetDisplay((char const *)arg2,arg3);
}


SWIGEXPORT void D_OTCaller_delCallback(void * jarg1) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  
  arg1 = (OTCaller *)jarg1;
  (arg1)->delCallback();
}


SWIGEXPORT void D_OTCaller_setCallback(void * jarg1, void * jarg2) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  OTCallback *arg2 = (OTCallback *) 0 ;
  
  arg1 = (OTCaller *)jarg1;
  arg2 = (OTCallback *)jarg2;
  (arg1)->setCallback(arg2);
}


SWIGEXPORT unsigned int D_OTCaller_isCallbackSet(void * jarg1) {
  unsigned int jresult ;
  OTCaller *arg1 = (OTCaller *) 0 ;
  bool result;
  
  arg1 = (OTCaller *)jarg1;
  result = (bool)((OTCaller const *)arg1)->isCallbackSet();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_OTCaller_callOne(void * jarg1) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  
  arg1 = (OTCaller *)jarg1;
  (arg1)->callOne();
}


SWIGEXPORT void D_OTCaller_callTwo(void * jarg1) {
  OTCaller *arg1 = (OTCaller *) 0 ;
  
  arg1 = (OTCaller *)jarg1;
  (arg1)->callTwo();
}


SWIGEXPORT void * D_new_WrapTimeT() {
  void * jresult ;
  WrapTimeT *result = 0 ;
  
  result = (WrapTimeT *)new WrapTimeT();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT long long D_WrapTimeT_getTime(void * jarg1) {
  long long jresult ;
  WrapTimeT *arg1 = (WrapTimeT *) 0 ;
  int64_t result;
  
  arg1 = (WrapTimeT *)jarg1;
  result = (int64_t)((WrapTimeT const *)arg1)->getTime();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_WrapTimeT_setTime(void * jarg1, long long jarg2) {
  WrapTimeT *arg1 = (WrapTimeT *) 0 ;
  int64_t *arg2 = 0 ;
  int64_t temp2 ;
  
  arg1 = (WrapTimeT *)jarg1;
  temp2 = (int64_t)jarg2;
  arg2 = &temp2; 
  (arg1)->setTime((int64_t const &)*arg2);
}


SWIGEXPORT void D_delete_WrapTimeT(void * jarg1) {
  WrapTimeT *arg1 = (WrapTimeT *) 0 ;
  
  arg1 = (WrapTimeT *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_OTAPI_Wrap_SetExecutor(void * jarg1) {
  void * jresult ;
  OTAPI_Exec *arg1 = (OTAPI_Exec *) 0 ;
  OTAPI_Exec *result = 0 ;
  
  arg1 = (OTAPI_Exec *)jarg1;
  result = (OTAPI_Exec *)OTAPI_Wrap::SetExecutor(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_OTAPI_Wrap_Exec() {
  void * jresult ;
  OTAPI_Exec *result = 0 ;
  
  result = (OTAPI_Exec *)OTAPI_Wrap::Exec();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_OTAPI_Wrap_It() {
  void * jresult ;
  OTAPI_Exec *result = 0 ;
  
  result = (OTAPI_Exec *)OTAPI_Wrap::It();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_OTAPI_Wrap_OTAPI() {
  void * jresult ;
  OT_API *result = 0 ;
  
  result = (OT_API *)OTAPI_Wrap::OTAPI();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT long long D_OTAPI_Wrap_StringToLong(char * jarg1) {
  long long jresult ;
  std::string *arg1 = 0 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int64_t)OTAPI_Wrap::StringToLong((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LongToString(long long jarg1) {
  char * jresult ;
  int64_t *arg1 = 0 ;
  int64_t temp1 ;
  std::string result;
  
  temp1 = (int64_t)jarg1;
  arg1 = &temp1; 
  result = OTAPI_Wrap::LongToString((long long const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned long long D_OTAPI_Wrap_StringToUlong(char * jarg1) {
  unsigned long long jresult ;
  std::string *arg1 = 0 ;
  uint64_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (uint64_t)OTAPI_Wrap::StringToUlong((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_UlongToString(unsigned long long jarg1) {
  char * jresult ;
  uint64_t *arg1 = 0 ;
  uint64_t temp1 ;
  std::string result;
  
  temp1 = (uint64_t)jarg1;
  arg1 = &temp1; 
  result = OTAPI_Wrap::UlongToString((unsigned long long const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_AppInit() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)OTAPI_Wrap::AppInit();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_AppCleanup() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)OTAPI_Wrap::AppCleanup();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_OTAPI_Wrap_SetAppBinaryFolder(char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  OTAPI_Wrap::SetAppBinaryFolder((std::string const &)*arg1);
}


SWIGEXPORT void D_OTAPI_Wrap_SetHomeFolder(char * jarg1) {
  std::string *arg1 = 0 ;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  OTAPI_Wrap::SetHomeFolder((std::string const &)*arg1);
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_SetWallet(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)OTAPI_Wrap::SetWallet((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_WalletExists() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)OTAPI_Wrap::WalletExists();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_LoadWallet() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)OTAPI_Wrap::LoadWallet();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_SwitchWallet() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)OTAPI_Wrap::SwitchWallet();
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_OTAPI_Wrap_Output(int jarg1, char * jarg2) {
  int32_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t temp1 ;
  
  temp1 = (int32_t)jarg1;
  arg1 = &temp1; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  OTAPI_Wrap::Output((int const &)*arg1,(std::string const &)*arg2);
}


SWIGEXPORT void * D_OTAPI_Wrap_GetTime() {
  void * jresult ;
  WrapTimeT result;
  
  result = OTAPI_Wrap::GetTime();
  jresult = new WrapTimeT((const WrapTimeT &)result); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_NumList_Add(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::NumList_Add((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_NumList_Remove(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::NumList_Remove((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_NumList_VerifyQuery(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)OTAPI_Wrap::NumList_VerifyQuery((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_NumList_VerifyAll(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)OTAPI_Wrap::NumList_VerifyAll((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_NumList_Count(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int32_t)OTAPI_Wrap::NumList_Count((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Encode(char * jarg1, unsigned int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = jarg2 ? true : false;
  arg2 = &temp2; 
  result = OTAPI_Wrap::Encode((std::string const &)*arg1,(bool const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Decode(char * jarg1, unsigned int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  bool *arg2 = 0 ;
  bool temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = jarg2 ? true : false;
  arg2 = &temp2; 
  result = OTAPI_Wrap::Decode((std::string const &)*arg1,(bool const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Encrypt(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::Encrypt((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Decrypt(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::Decrypt((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_CreateSymmetricKey() {
  char * jresult ;
  std::string result;
  
  result = OTAPI_Wrap::CreateSymmetricKey();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_SymmetricEncrypt(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::SymmetricEncrypt((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_SymmetricDecrypt(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::SymmetricDecrypt((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_SignContract(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::SignContract((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_FlatSign(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::FlatSign((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_AddSignature(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::AddSignature((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_VerifySignature(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)OTAPI_Wrap::VerifySignature((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_VerifyAndRetrieveXMLContents(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::VerifyAndRetrieveXMLContents((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_GetMemlogSize() {
  int jresult ;
  int32_t result;
  
  result = (int32_t)OTAPI_Wrap::GetMemlogSize();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetMemlogAtIndex(int jarg1) {
  char * jresult ;
  int32_t *arg1 = 0 ;
  int32_t temp1 ;
  std::string result;
  
  temp1 = (int32_t)jarg1;
  arg1 = &temp1; 
  result = OTAPI_Wrap::GetMemlogAtIndex((int const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_PeekMemlogFront() {
  char * jresult ;
  std::string result;
  
  result = OTAPI_Wrap::PeekMemlogFront();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_PeekMemlogBack() {
  char * jresult ;
  std::string result;
  
  result = OTAPI_Wrap::PeekMemlogBack();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_PopMemlogFront() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)OTAPI_Wrap::PopMemlogFront();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_PopMemlogBack() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)OTAPI_Wrap::PopMemlogBack();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_CreateNym(int jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  int32_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t temp1 ;
  std::string result;
  
  temp1 = (int32_t)jarg1;
  arg1 = &temp1; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::CreateNym((int const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_ActiveCronItemIDs(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::GetNym_ActiveCronItemIDs((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetActiveCronItem(char * jarg1, long long jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int64_t arg2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (int64_t)jarg2;
  result = OTAPI_Wrap::GetActiveCronItem((std::string const &)*arg1,arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_SourceForID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetNym_SourceForID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_AltSourceLocation(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetNym_AltSourceLocation((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_GetNym_CredentialCount(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int32_t)OTAPI_Wrap::GetNym_CredentialCount((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_CredentialID(char * jarg1, int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::GetNym_CredentialID((std::string const &)*arg1,(int const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_CredentialContents(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::GetNym_CredentialContents((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_GetNym_RevokedCredCount(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int32_t)OTAPI_Wrap::GetNym_RevokedCredCount((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_RevokedCredID(char * jarg1, int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::GetNym_RevokedCredID((std::string const &)*arg1,(int const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_RevokedCredContents(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::GetNym_RevokedCredContents((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_GetNym_SubcredentialCount(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::GetNym_SubcredentialCount((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_SubCredentialID(char * jarg1, char * jarg2, int jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  int32_t temp3 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (int32_t)jarg3;
  arg3 = &temp3; 
  result = OTAPI_Wrap::GetNym_SubCredentialID((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_SubCredentialContents(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::GetNym_SubCredentialContents((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_AddSubcredential(char * jarg1, char * jarg2, int jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  int32_t temp3 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (int32_t)jarg3;
  arg3 = &temp3; 
  result = OTAPI_Wrap::AddSubcredential((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_RevokeSubcredential(char * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)OTAPI_Wrap::RevokeSubcredential((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_CreateServerContract(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::CreateServerContract((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_CreateAssetContract(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::CreateAssetContract((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_CalculateAssetContractID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::CalculateAssetContractID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_CalculateServerContractID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::CalculateServerContractID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_AddServerContract(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int32_t)OTAPI_Wrap::AddServerContract((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_AddAssetContract(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int32_t)OTAPI_Wrap::AddAssetContract((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_GetServerCount() {
  int jresult ;
  int32_t result;
  
  result = (int32_t)OTAPI_Wrap::GetServerCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_GetAssetTypeCount() {
  int jresult ;
  int32_t result;
  
  result = (int32_t)OTAPI_Wrap::GetAssetTypeCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_GetAccountCount() {
  int jresult ;
  int32_t result;
  
  result = (int32_t)OTAPI_Wrap::GetAccountCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_GetNymCount() {
  int jresult ;
  int32_t result;
  
  result = (int32_t)OTAPI_Wrap::GetNymCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetServer_ID(int jarg1) {
  char * jresult ;
  int32_t *arg1 = 0 ;
  int32_t temp1 ;
  std::string result;
  
  temp1 = (int32_t)jarg1;
  arg1 = &temp1; 
  result = OTAPI_Wrap::GetServer_ID((int const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetServer_Name(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetServer_Name((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetServer_Contract(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetServer_Contract((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_FormatAmount(char * jarg1, long long jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int64_t *arg2 = 0 ;
  int64_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int64_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::FormatAmount((std::string const &)*arg1,(long long const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT long long D_OTAPI_Wrap_StringToAmount(char * jarg1, char * jarg2) {
  long long jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int64_t)OTAPI_Wrap::StringToAmount((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetAssetType_ID(int jarg1) {
  char * jresult ;
  int32_t *arg1 = 0 ;
  int32_t temp1 ;
  std::string result;
  
  temp1 = (int32_t)jarg1;
  arg1 = &temp1; 
  result = OTAPI_Wrap::GetAssetType_ID((int const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetAssetType_Name(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetAssetType_Name((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetAssetType_TLA(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetAssetType_TLA((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetAssetType_Contract(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetAssetType_Contract((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetAccountWallet_ID(int jarg1) {
  char * jresult ;
  int32_t *arg1 = 0 ;
  int32_t temp1 ;
  std::string result;
  
  temp1 = (int32_t)jarg1;
  arg1 = &temp1; 
  result = OTAPI_Wrap::GetAccountWallet_ID((int const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetAccountWallet_Name(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetAccountWallet_Name((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT long long D_OTAPI_Wrap_GetAccountWallet_Balance(char * jarg1) {
  long long jresult ;
  std::string *arg1 = 0 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int64_t)OTAPI_Wrap::GetAccountWallet_Balance((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetAccountWallet_Type(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetAccountWallet_Type((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetAccountWallet_AssetTypeID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetAccountWallet_AssetTypeID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetAccountWallet_ServerID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetAccountWallet_ServerID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetAccountWallet_NymID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetAccountWallet_NymID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetAccountWallet_InboxHash(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetAccountWallet_InboxHash((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetAccountWallet_OutboxHash(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetAccountWallet_OutboxHash((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_VerifyAccountReceipt(char * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)OTAPI_Wrap::VerifyAccountReceipt((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_GetNym_TransactionNumCount(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::GetNym_TransactionNumCount((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_ID(int jarg1) {
  char * jresult ;
  int32_t *arg1 = 0 ;
  int32_t temp1 ;
  std::string result;
  
  temp1 = (int32_t)jarg1;
  arg1 = &temp1; 
  result = OTAPI_Wrap::GetNym_ID((int const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_Name(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetNym_Name((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_Stats(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::GetNym_Stats((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_NymboxHash(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::GetNym_NymboxHash((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_RecentHash(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::GetNym_RecentHash((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_InboxHash(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::GetNym_InboxHash((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_OutboxHash(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::GetNym_OutboxHash((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_IsNym_RegisteredAtServer(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)OTAPI_Wrap::IsNym_RegisteredAtServer((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_GetNym_MailCount(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int32_t)OTAPI_Wrap::GetNym_MailCount((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_MailContentsByIndex(char * jarg1, int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::GetNym_MailContentsByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_MailSenderIDByIndex(char * jarg1, int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::GetNym_MailSenderIDByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_MailServerIDByIndex(char * jarg1, int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::GetNym_MailServerIDByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Nym_RemoveMailByIndex(char * jarg1, int jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = (bool)OTAPI_Wrap::Nym_RemoveMailByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Nym_VerifyMailByIndex(char * jarg1, int jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = (bool)OTAPI_Wrap::Nym_VerifyMailByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_GetNym_OutmailCount(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int32_t)OTAPI_Wrap::GetNym_OutmailCount((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_OutmailContentsByIndex(char * jarg1, int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::GetNym_OutmailContentsByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_OutmailRecipientIDByIndex(char * jarg1, int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::GetNym_OutmailRecipientIDByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_OutmailServerIDByIndex(char * jarg1, int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::GetNym_OutmailServerIDByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Nym_RemoveOutmailByIndex(char * jarg1, int jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = (bool)OTAPI_Wrap::Nym_RemoveOutmailByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Nym_VerifyOutmailByIndex(char * jarg1, int jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = (bool)OTAPI_Wrap::Nym_VerifyOutmailByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_GetNym_OutpaymentsCount(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int32_t)OTAPI_Wrap::GetNym_OutpaymentsCount((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_OutpaymentsContentsByIndex(char * jarg1, int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::GetNym_OutpaymentsContentsByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_OutpaymentsRecipientIDByIndex(char * jarg1, int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::GetNym_OutpaymentsRecipientIDByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GetNym_OutpaymentsServerIDByIndex(char * jarg1, int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::GetNym_OutpaymentsServerIDByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Nym_RemoveOutpaymentsByIndex(char * jarg1, int jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = (bool)OTAPI_Wrap::Nym_RemoveOutpaymentsByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Nym_VerifyOutpaymentsByIndex(char * jarg1, int jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = (bool)OTAPI_Wrap::Nym_VerifyOutpaymentsByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Wallet_CanRemoveServer(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)OTAPI_Wrap::Wallet_CanRemoveServer((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Wallet_RemoveServer(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)OTAPI_Wrap::Wallet_RemoveServer((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Wallet_CanRemoveAssetType(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)OTAPI_Wrap::Wallet_CanRemoveAssetType((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Wallet_RemoveAssetType(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)OTAPI_Wrap::Wallet_RemoveAssetType((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Wallet_CanRemoveNym(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)OTAPI_Wrap::Wallet_CanRemoveNym((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Wallet_RemoveNym(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)OTAPI_Wrap::Wallet_RemoveNym((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Wallet_CanRemoveAccount(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)OTAPI_Wrap::Wallet_CanRemoveAccount((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Wallet_ChangePassphrase() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)OTAPI_Wrap::Wallet_ChangePassphrase();
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Wallet_ExportNym(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Wallet_ExportNym((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Wallet_ImportNym(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Wallet_ImportNym((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Wallet_ImportCert(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::Wallet_ImportCert((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Wallet_ExportCert(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Wallet_ExportCert((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Wallet_GetNymIDFromPartial(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Wallet_GetNymIDFromPartial((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Wallet_GetServerIDFromPartial(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Wallet_GetServerIDFromPartial((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Wallet_GetAssetIDFromPartial(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Wallet_GetAssetIDFromPartial((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Wallet_GetAccountIDFromPartial(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Wallet_GetAccountIDFromPartial((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_SetNym_Name(char * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)OTAPI_Wrap::SetNym_Name((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_SetAccountWallet_Name(char * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)OTAPI_Wrap::SetAccountWallet_Name((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_SetAssetType_Name(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)OTAPI_Wrap::SetAssetType_Name((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_SetServer_Name(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)OTAPI_Wrap::SetServer_Name((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_WriteCheque(char * jarg1, long long jarg2, void * jarg3, void * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int64_t *arg2 = 0 ;
  WrapTimeT *arg3 = 0 ;
  WrapTimeT *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string *arg8 = 0 ;
  int64_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int64_t)jarg2;
  arg2 = &temp2; 
  arg3 = (WrapTimeT *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "WrapTimeT const & type is null");
    return 0;
  } 
  arg4 = (WrapTimeT *)jarg4;
  if (!arg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "WrapTimeT const & type is null");
    return 0;
  } 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  if (!jarg7) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg7_str(jarg7);
  arg7 = &arg7_str; 
  if (!jarg8) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg8_str(jarg8);
  arg8 = &arg8_str; 
  result = OTAPI_Wrap::WriteCheque((std::string const &)*arg1,(long long const &)*arg2,(WrapTimeT const &)*arg3,(WrapTimeT const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_DiscardCheque(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (bool)OTAPI_Wrap::DiscardCheque((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_ProposePaymentPlan(char * jarg1, void * jarg2, void * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, long long jarg9, void * jarg10, long long jarg11, void * jarg12, void * jarg13, void * jarg14, int jarg15) {
  char * jresult ;
  std::string *arg1 = 0 ;
  WrapTimeT *arg2 = 0 ;
  WrapTimeT *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string *arg8 = 0 ;
  int64_t *arg9 = 0 ;
  WrapTimeT *arg10 = 0 ;
  int64_t *arg11 = 0 ;
  WrapTimeT *arg12 = 0 ;
  WrapTimeT *arg13 = 0 ;
  WrapTimeT *arg14 = 0 ;
  int32_t *arg15 = 0 ;
  int64_t temp9 ;
  int64_t temp11 ;
  int32_t temp15 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (WrapTimeT *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "WrapTimeT const & type is null");
    return 0;
  } 
  arg3 = (WrapTimeT *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "WrapTimeT const & type is null");
    return 0;
  } 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  if (!jarg7) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg7_str(jarg7);
  arg7 = &arg7_str; 
  if (!jarg8) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg8_str(jarg8);
  arg8 = &arg8_str; 
  temp9 = (int64_t)jarg9;
  arg9 = &temp9; 
  arg10 = (WrapTimeT *)jarg10;
  if (!arg10) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "WrapTimeT const & type is null");
    return 0;
  } 
  temp11 = (int64_t)jarg11;
  arg11 = &temp11; 
  arg12 = (WrapTimeT *)jarg12;
  if (!arg12) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "WrapTimeT const & type is null");
    return 0;
  } 
  arg13 = (WrapTimeT *)jarg13;
  if (!arg13) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "WrapTimeT const & type is null");
    return 0;
  } 
  arg14 = (WrapTimeT *)jarg14;
  if (!arg14) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "WrapTimeT const & type is null");
    return 0;
  } 
  temp15 = (int32_t)jarg15;
  arg15 = &temp15; 
  result = OTAPI_Wrap::ProposePaymentPlan((std::string const &)*arg1,(WrapTimeT const &)*arg2,(WrapTimeT const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8,(long long const &)*arg9,(WrapTimeT const &)*arg10,(long long const &)*arg11,(WrapTimeT const &)*arg12,(WrapTimeT const &)*arg13,(WrapTimeT const &)*arg14,(int const &)*arg15);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_EasyProposePlan(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7, char * jarg8, char * jarg9, char * jarg10) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string *arg8 = 0 ;
  std::string *arg9 = 0 ;
  std::string *arg10 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  if (!jarg7) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg7_str(jarg7);
  arg7 = &arg7_str; 
  if (!jarg8) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg8_str(jarg8);
  arg8 = &arg8_str; 
  if (!jarg9) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg9_str(jarg9);
  arg9 = &arg9_str; 
  if (!jarg10) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg10_str(jarg10);
  arg10 = &arg10_str; 
  result = OTAPI_Wrap::EasyProposePlan((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8,(std::string const &)*arg9,(std::string const &)*arg10);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_ConfirmPaymentPlan(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = OTAPI_Wrap::ConfirmPaymentPlan((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Create_SmartContract(char * jarg1, void * jarg2, void * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  WrapTimeT *arg2 = 0 ;
  WrapTimeT *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  arg2 = (WrapTimeT *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "WrapTimeT const & type is null");
    return 0;
  } 
  arg3 = (WrapTimeT *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "WrapTimeT const & type is null");
    return 0;
  } 
  result = OTAPI_Wrap::Create_SmartContract((std::string const &)*arg1,(WrapTimeT const &)*arg2,(WrapTimeT const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_SmartContract_AddBylaw(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::SmartContract_AddBylaw((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_SmartContract_AddClause(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = OTAPI_Wrap::SmartContract_AddClause((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_SmartContract_AddVariable(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  if (!jarg7) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg7_str(jarg7);
  arg7 = &arg7_str; 
  result = OTAPI_Wrap::SmartContract_AddVariable((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_SmartContract_AddCallback(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = OTAPI_Wrap::SmartContract_AddCallback((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_SmartContract_AddHook(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = OTAPI_Wrap::SmartContract_AddHook((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_SmartContract_AddParty(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = OTAPI_Wrap::SmartContract_AddParty((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_SmartContract_AddAccount(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = OTAPI_Wrap::SmartContract_AddAccount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_SmartContract_CountNumsNeeded(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::SmartContract_CountNumsNeeded((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_SmartContract_ConfirmAccount(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  result = OTAPI_Wrap::SmartContract_ConfirmAccount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_SmartContract_ConfirmParty(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::SmartContract_ConfirmParty((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Smart_AreAllPartiesConfirmed(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)OTAPI_Wrap::Smart_AreAllPartiesConfirmed((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Smart_GetBylawCount(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int32_t)OTAPI_Wrap::Smart_GetBylawCount((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Smart_GetBylawByIndex(char * jarg1, int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::Smart_GetBylawByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Bylaw_GetLanguage(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::Bylaw_GetLanguage((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Bylaw_GetClauseCount(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::Bylaw_GetClauseCount((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Clause_GetNameByIndex(char * jarg1, char * jarg2, int jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  int32_t temp3 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (int32_t)jarg3;
  arg3 = &temp3; 
  result = OTAPI_Wrap::Clause_GetNameByIndex((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Clause_GetContents(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::Clause_GetContents((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Bylaw_GetVariableCount(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::Bylaw_GetVariableCount((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Variable_GetNameByIndex(char * jarg1, char * jarg2, int jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  int32_t temp3 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (int32_t)jarg3;
  arg3 = &temp3; 
  result = OTAPI_Wrap::Variable_GetNameByIndex((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Variable_GetType(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::Variable_GetType((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Variable_GetAccess(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::Variable_GetAccess((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Variable_GetContents(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::Variable_GetContents((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Bylaw_GetHookCount(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::Bylaw_GetHookCount((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Hook_GetNameByIndex(char * jarg1, char * jarg2, int jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  int32_t temp3 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (int32_t)jarg3;
  arg3 = &temp3; 
  result = OTAPI_Wrap::Hook_GetNameByIndex((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Hook_GetClauseCount(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::Hook_GetClauseCount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Hook_GetClauseAtIndex(char * jarg1, char * jarg2, char * jarg3, int jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t *arg4 = 0 ;
  int32_t temp4 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (int32_t)jarg4;
  arg4 = &temp4; 
  result = OTAPI_Wrap::Hook_GetClauseAtIndex((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(int const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Bylaw_GetCallbackCount(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::Bylaw_GetCallbackCount((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Callback_GetNameByIndex(char * jarg1, char * jarg2, int jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  int32_t temp3 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (int32_t)jarg3;
  arg3 = &temp3; 
  result = OTAPI_Wrap::Callback_GetNameByIndex((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Callback_GetClause(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::Callback_GetClause((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Smart_GetPartyCount(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int32_t)OTAPI_Wrap::Smart_GetPartyCount((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Smart_GetPartyByIndex(char * jarg1, int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::Smart_GetPartyByIndex((std::string const &)*arg1,(int const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Smart_IsPartyConfirmed(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)OTAPI_Wrap::Smart_IsPartyConfirmed((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Party_GetID(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::Party_GetID((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Party_GetAcctCount(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::Party_GetAcctCount((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Party_GetAcctNameByIndex(char * jarg1, char * jarg2, int jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  int32_t temp3 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (int32_t)jarg3;
  arg3 = &temp3; 
  result = OTAPI_Wrap::Party_GetAcctNameByIndex((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Party_GetAcctID(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::Party_GetAcctID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Party_GetAcctAssetID(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::Party_GetAcctAssetID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Party_GetAcctAgentName(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::Party_GetAcctAgentName((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Party_GetAgentCount(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::Party_GetAgentCount((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Party_GetAgentNameByIndex(char * jarg1, char * jarg2, int jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  int32_t temp3 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (int32_t)jarg3;
  arg3 = &temp3; 
  result = OTAPI_Wrap::Party_GetAgentNameByIndex((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Party_GetAgentID(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::Party_GetAgentID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_activateSmartContract(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::activateSmartContract((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_triggerClause(char * jarg1, char * jarg2, long long jarg3, char * jarg4, char * jarg5) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int64_t *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int64_t temp3 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (int64_t)jarg3;
  arg3 = &temp3; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (int32_t)OTAPI_Wrap::triggerClause((std::string const &)*arg1,(std::string const &)*arg2,(long long const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Msg_HarvestTransactionNumbers(char * jarg1, char * jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  bool temp3 ;
  bool temp4 ;
  bool temp5 ;
  bool temp6 ;
  bool temp7 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = jarg3 ? true : false;
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false;
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false;
  arg5 = &temp5; 
  temp6 = jarg6 ? true : false;
  arg6 = &temp6; 
  temp7 = jarg7 ? true : false;
  arg7 = &temp7; 
  result = (bool)OTAPI_Wrap::Msg_HarvestTransactionNumbers((std::string const &)*arg1,(std::string const &)*arg2,(bool const &)*arg3,(bool const &)*arg4,(bool const &)*arg5,(bool const &)*arg6,(bool const &)*arg7);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadUserPubkey_Encryption(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::LoadUserPubkey_Encryption((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadUserPubkey_Signing(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::LoadUserPubkey_Signing((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadPubkey_Encryption(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::LoadPubkey_Encryption((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadPubkey_Signing(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::LoadPubkey_Signing((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_VerifyUserPrivateKey(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)OTAPI_Wrap::VerifyUserPrivateKey((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadPurse(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::LoadPurse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadMint(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::LoadMint((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadAssetContract(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::LoadAssetContract((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadServerContract(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::LoadServerContract((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Mint_IsStillGood(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)OTAPI_Wrap::Mint_IsStillGood((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_IsBasketCurrency(char * jarg1) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (bool)OTAPI_Wrap::IsBasketCurrency((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Basket_GetMemberCount(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int32_t)OTAPI_Wrap::Basket_GetMemberCount((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Basket_GetMemberType(char * jarg1, int jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::Basket_GetMemberType((std::string const &)*arg1,(int const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT long long D_OTAPI_Wrap_Basket_GetMinimumTransferAmount(char * jarg1) {
  long long jresult ;
  std::string *arg1 = 0 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int64_t)OTAPI_Wrap::Basket_GetMinimumTransferAmount((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT long long D_OTAPI_Wrap_Basket_GetMemberMinimumTransferAmount(char * jarg1, int jarg2) {
  long long jresult ;
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int32_t temp2 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int32_t)jarg2;
  arg2 = &temp2; 
  result = (int64_t)OTAPI_Wrap::Basket_GetMemberMinimumTransferAmount((std::string const &)*arg1,(int const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadAssetAccount(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::LoadAssetAccount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadInbox(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::LoadInbox((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadOutbox(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::LoadOutbox((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadInboxNoVerify(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::LoadInboxNoVerify((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadOutboxNoVerify(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::LoadOutboxNoVerify((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadPaymentInbox(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::LoadPaymentInbox((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadPaymentInboxNoVerify(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::LoadPaymentInboxNoVerify((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadRecordBox(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::LoadRecordBox((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadRecordBoxNoVerify(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::LoadRecordBoxNoVerify((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_ClearRecord(char * jarg1, char * jarg2, char * jarg3, int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t *arg4 = 0 ;
  bool *arg5 = 0 ;
  int32_t temp4 ;
  bool temp5 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (int32_t)jarg4;
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false;
  arg5 = &temp5; 
  result = (bool)OTAPI_Wrap::ClearRecord((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(int const &)*arg4,(bool const &)*arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadExpiredBox(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::LoadExpiredBox((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadExpiredBoxNoVerify(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::LoadExpiredBoxNoVerify((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_ClearExpired(char * jarg1, char * jarg2, int jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  bool *arg4 = 0 ;
  int32_t temp3 ;
  bool temp4 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (int32_t)jarg3;
  arg3 = &temp3; 
  temp4 = jarg4 ? true : false;
  arg4 = &temp4; 
  result = (bool)OTAPI_Wrap::ClearExpired((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3,(bool const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Ledger_GetCount(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int32_t)OTAPI_Wrap::Ledger_GetCount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Ledger_CreateResponse(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = OTAPI_Wrap::Ledger_CreateResponse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Ledger_GetTransactionByIndex(char * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t *arg5 = 0 ;
  int32_t temp5 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (int32_t)jarg5;
  arg5 = &temp5; 
  result = OTAPI_Wrap::Ledger_GetTransactionByIndex((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(int const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Ledger_GetTransactionByID(char * jarg1, char * jarg2, char * jarg3, char * jarg4, long long jarg5) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t *arg5 = 0 ;
  int64_t temp5 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (int64_t)jarg5;
  arg5 = &temp5; 
  result = OTAPI_Wrap::Ledger_GetTransactionByID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(long long const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT long long D_OTAPI_Wrap_Ledger_GetTransactionIDByIndex(char * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5) {
  long long jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t *arg5 = 0 ;
  int32_t temp5 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (int32_t)jarg5;
  arg5 = &temp5; 
  result = (int64_t)OTAPI_Wrap::Ledger_GetTransactionIDByIndex((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(int const &)*arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Ledger_AddTransaction(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = OTAPI_Wrap::Ledger_AddTransaction((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Transaction_CreateResponse(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, unsigned int jarg6) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool temp6 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  temp6 = jarg6 ? true : false;
  arg6 = &temp6; 
  result = OTAPI_Wrap::Transaction_CreateResponse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(bool const &)*arg6);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Ledger_FinalizeResponse(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = OTAPI_Wrap::Ledger_FinalizeResponse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Ledger_GetInstrument(char * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t *arg5 = 0 ;
  int32_t temp5 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (int32_t)jarg5;
  arg5 = &temp5; 
  result = OTAPI_Wrap::Ledger_GetInstrument((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(int const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_RecordPayment(char * jarg1, char * jarg2, unsigned int jarg3, int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  int32_t *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool temp3 ;
  int32_t temp4 ;
  bool temp5 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = jarg3 ? true : false;
  arg3 = &temp3; 
  temp4 = (int32_t)jarg4;
  arg4 = &temp4; 
  temp5 = jarg5 ? true : false;
  arg5 = &temp5; 
  result = (bool)OTAPI_Wrap::RecordPayment((std::string const &)*arg1,(std::string const &)*arg2,(bool const &)*arg3,(int const &)*arg4,(bool const &)*arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Transaction_GetType(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = OTAPI_Wrap::Transaction_GetType((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT long long D_OTAPI_Wrap_ReplyNotice_GetRequestNum(char * jarg1, char * jarg2, char * jarg3) {
  long long jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int64_t)OTAPI_Wrap::ReplyNotice_GetRequestNum((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Transaction_GetVoucher(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = OTAPI_Wrap::Transaction_GetVoucher((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Transaction_GetSuccess(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int32_t)OTAPI_Wrap::Transaction_GetSuccess((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Transaction_IsCanceled(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int32_t)OTAPI_Wrap::Transaction_IsCanceled((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Transaction_GetBalanceAgreementSuccess(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int32_t)OTAPI_Wrap::Transaction_GetBalanceAgreementSuccess((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_OTAPI_Wrap_Transaction_GetDateSigned(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  WrapTimeT result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = OTAPI_Wrap::Transaction_GetDateSigned((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = new WrapTimeT((const WrapTimeT &)result); 
  return jresult;
}


SWIGEXPORT long long D_OTAPI_Wrap_Transaction_GetAmount(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  long long jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int64_t)OTAPI_Wrap::Transaction_GetAmount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Pending_GetNote(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = OTAPI_Wrap::Pending_GetNote((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Transaction_GetSenderUserID(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = OTAPI_Wrap::Transaction_GetSenderUserID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Transaction_GetSenderAcctID(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = OTAPI_Wrap::Transaction_GetSenderAcctID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Transaction_GetRecipientUserID(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = OTAPI_Wrap::Transaction_GetRecipientUserID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Transaction_GetRecipientAcctID(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = OTAPI_Wrap::Transaction_GetRecipientAcctID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT long long D_OTAPI_Wrap_Transaction_GetDisplayReferenceToNum(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  long long jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int64_t)OTAPI_Wrap::Transaction_GetDisplayReferenceToNum((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_SavePurse(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (bool)OTAPI_Wrap::SavePurse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_CreatePurse(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = OTAPI_Wrap::CreatePurse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_CreatePurse_Passphrase(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::CreatePurse_Passphrase((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT long long D_OTAPI_Wrap_Purse_GetTotalValue(char * jarg1, char * jarg2, char * jarg3) {
  long long jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int64_t)OTAPI_Wrap::Purse_GetTotalValue((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Purse_Count(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::Purse_Count((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Purse_HasPassword(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)OTAPI_Wrap::Purse_HasPassword((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Purse_Peek(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = OTAPI_Wrap::Purse_Peek((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Purse_Pop(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = OTAPI_Wrap::Purse_Pop((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Purse_Push(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  result = OTAPI_Wrap::Purse_Push((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Purse_Empty(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = OTAPI_Wrap::Purse_Empty((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_Wallet_ImportPurse(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (bool)OTAPI_Wrap::Wallet_ImportPurse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_exchangePurse(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int32_t)OTAPI_Wrap::exchangePurse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Token_ChangeOwner(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  result = OTAPI_Wrap::Token_ChangeOwner((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Token_GetID(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::Token_GetID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT long long D_OTAPI_Wrap_Token_GetDenomination(char * jarg1, char * jarg2, char * jarg3) {
  long long jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int64_t)OTAPI_Wrap::Token_GetDenomination((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Token_GetSeries(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::Token_GetSeries((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_OTAPI_Wrap_Token_GetValidFrom(char * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  WrapTimeT result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::Token_GetValidFrom((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = new WrapTimeT((const WrapTimeT &)result); 
  return jresult;
}


SWIGEXPORT void * D_OTAPI_Wrap_Token_GetValidTo(char * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  WrapTimeT result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::Token_GetValidTo((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = new WrapTimeT((const WrapTimeT &)result); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Token_GetAssetID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Token_GetAssetID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Token_GetServerID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Token_GetServerID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT long long D_OTAPI_Wrap_Instrmnt_GetAmount(char * jarg1) {
  long long jresult ;
  std::string *arg1 = 0 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int64_t)OTAPI_Wrap::Instrmnt_GetAmount((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT long long D_OTAPI_Wrap_Instrmnt_GetTransNum(char * jarg1) {
  long long jresult ;
  std::string *arg1 = 0 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int64_t)OTAPI_Wrap::Instrmnt_GetTransNum((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_OTAPI_Wrap_Instrmnt_GetValidFrom(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  WrapTimeT result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Instrmnt_GetValidFrom((std::string const &)*arg1);
  jresult = new WrapTimeT((const WrapTimeT &)result); 
  return jresult;
}


SWIGEXPORT void * D_OTAPI_Wrap_Instrmnt_GetValidTo(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  WrapTimeT result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Instrmnt_GetValidTo((std::string const &)*arg1);
  jresult = new WrapTimeT((const WrapTimeT &)result); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Instrmnt_GetMemo(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Instrmnt_GetMemo((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Instrmnt_GetType(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Instrmnt_GetType((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Instrmnt_GetServerID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Instrmnt_GetServerID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Instrmnt_GetAssetID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Instrmnt_GetAssetID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Instrmnt_GetSenderUserID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Instrmnt_GetSenderUserID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Instrmnt_GetSenderAcctID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Instrmnt_GetSenderAcctID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Instrmnt_GetRemitterUserID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Instrmnt_GetRemitterUserID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Instrmnt_GetRemitterAcctID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Instrmnt_GetRemitterAcctID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Instrmnt_GetRecipientUserID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Instrmnt_GetRecipientUserID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Instrmnt_GetRecipientAcctID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Instrmnt_GetRecipientAcctID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_checkServerID(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::checkServerID((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_createUserAccount(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::createUserAccount((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_deleteUserAccount(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::deleteUserAccount((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_deleteAssetAccount(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::deleteAssetAccount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_usageCredits(char * jarg1, char * jarg2, char * jarg3, long long jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t *arg4 = 0 ;
  int64_t temp4 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (int64_t)jarg4;
  arg4 = &temp4; 
  result = (int32_t)OTAPI_Wrap::usageCredits((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(long long const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT long long D_OTAPI_Wrap_Message_GetUsageCredits(char * jarg1) {
  long long jresult ;
  std::string *arg1 = 0 ;
  int64_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int64_t)OTAPI_Wrap::Message_GetUsageCredits((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_checkUser(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::checkUser((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_sendUserMessage(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (int32_t)OTAPI_Wrap::sendUserMessage((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_sendUserInstrument(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  result = (int32_t)OTAPI_Wrap::sendUserInstrument((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_getRequest(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::getRequest((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_getTransactionNumber(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::getTransactionNumber((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_issueAssetType(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::issueAssetType((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_getContract(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::getContract((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_getMint(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::getMint((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_createAssetAccount(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::createAssetAccount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_getAccount(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::getAccount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_getAccountFiles(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::getAccountFiles((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GenerateBasketCreation(char * jarg1, long long jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  int64_t *arg2 = 0 ;
  int64_t temp2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  temp2 = (int64_t)jarg2;
  arg2 = &temp2; 
  result = OTAPI_Wrap::GenerateBasketCreation((std::string const &)*arg1,(long long const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_AddBasketCreationItem(char * jarg1, char * jarg2, char * jarg3, long long jarg4) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t *arg4 = 0 ;
  int64_t temp4 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (int64_t)jarg4;
  arg4 = &temp4; 
  result = OTAPI_Wrap::AddBasketCreationItem((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(long long const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_issueBasket(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::issueBasket((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_GenerateBasketExchange(char * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t *arg5 = 0 ;
  int32_t temp5 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (int32_t)jarg5;
  arg5 = &temp5; 
  result = OTAPI_Wrap::GenerateBasketExchange((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(int const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_AddBasketExchangeItem(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = OTAPI_Wrap::AddBasketExchangeItem((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_exchangeBasket(char * jarg1, char * jarg2, char * jarg3, char * jarg4, unsigned int jarg5) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool temp5 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = jarg5 ? true : false;
  arg5 = &temp5; 
  result = (int32_t)OTAPI_Wrap::exchangeBasket((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(bool const &)*arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_notarizeWithdrawal(char * jarg1, char * jarg2, char * jarg3, long long jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t *arg4 = 0 ;
  int64_t temp4 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (int64_t)jarg4;
  arg4 = &temp4; 
  result = (int32_t)OTAPI_Wrap::notarizeWithdrawal((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(long long const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_notarizeDeposit(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int32_t)OTAPI_Wrap::notarizeDeposit((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_notarizeTransfer(char * jarg1, char * jarg2, char * jarg3, char * jarg4, long long jarg5, char * jarg6) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t *arg5 = 0 ;
  std::string *arg6 = 0 ;
  int64_t temp5 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  temp5 = (int64_t)jarg5;
  arg5 = &temp5; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  result = (int32_t)OTAPI_Wrap::notarizeTransfer((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(long long const &)*arg5,(std::string const &)*arg6);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_getInbox(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::getInbox((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_getOutbox(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::getOutbox((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_getNymbox(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::getNymbox((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadNymbox(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::LoadNymbox((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_LoadNymboxNoVerify(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = OTAPI_Wrap::LoadNymboxNoVerify((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Nymbox_GetReplyNotice(char * jarg1, char * jarg2, long long jarg3) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int64_t *arg3 = 0 ;
  int64_t temp3 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (int64_t)jarg3;
  arg3 = &temp3; 
  result = OTAPI_Wrap::Nymbox_GetReplyNotice((std::string const &)*arg1,(std::string const &)*arg2,(long long const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_HaveAlreadySeenReply(char * jarg1, char * jarg2, long long jarg3) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int64_t *arg3 = 0 ;
  int64_t temp3 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (int64_t)jarg3;
  arg3 = &temp3; 
  result = (bool)OTAPI_Wrap::HaveAlreadySeenReply((std::string const &)*arg1,(std::string const &)*arg2,(long long const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_getBoxReceipt(char * jarg1, char * jarg2, char * jarg3, int jarg4, long long jarg5) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t *arg4 = 0 ;
  int64_t *arg5 = 0 ;
  int32_t temp4 ;
  int64_t temp5 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (int32_t)jarg4;
  arg4 = &temp4; 
  temp5 = (int64_t)jarg5;
  arg5 = &temp5; 
  result = (int32_t)OTAPI_Wrap::getBoxReceipt((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(int const &)*arg4,(long long const &)*arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_DoesBoxReceiptExist(char * jarg1, char * jarg2, char * jarg3, int jarg4, long long jarg5) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t *arg4 = 0 ;
  int64_t *arg5 = 0 ;
  int32_t temp4 ;
  int64_t temp5 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (int32_t)jarg4;
  arg4 = &temp4; 
  temp5 = (int64_t)jarg5;
  arg5 = &temp5; 
  result = (bool)OTAPI_Wrap::DoesBoxReceiptExist((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(int const &)*arg4,(long long const &)*arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_processInbox(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int32_t)OTAPI_Wrap::processInbox((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_processNymbox(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::processNymbox((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_withdrawVoucher(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, long long jarg6) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int64_t *arg6 = 0 ;
  int64_t temp6 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  temp6 = (int64_t)jarg6;
  arg6 = &temp6; 
  result = (int32_t)OTAPI_Wrap::withdrawVoucher((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(long long const &)*arg6);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_payDividend(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, long long jarg6) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int64_t *arg6 = 0 ;
  int64_t temp6 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  temp6 = (int64_t)jarg6;
  arg6 = &temp6; 
  result = (int32_t)OTAPI_Wrap::payDividend((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(long long const &)*arg6);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_depositCheque(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int32_t)OTAPI_Wrap::depositCheque((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_depositPaymentPlan(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::depositPaymentPlan((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_issueMarketOffer(char * jarg1, char * jarg2, long long jarg3, long long jarg4, long long jarg5, long long jarg6, unsigned int jarg7, void * jarg8, char * jarg9, long long jarg10) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int64_t *arg3 = 0 ;
  int64_t *arg4 = 0 ;
  int64_t *arg5 = 0 ;
  int64_t *arg6 = 0 ;
  bool *arg7 = 0 ;
  WrapTimeT *arg8 = 0 ;
  std::string *arg9 = 0 ;
  int64_t *arg10 = 0 ;
  int64_t temp3 ;
  int64_t temp4 ;
  int64_t temp5 ;
  int64_t temp6 ;
  bool temp7 ;
  int64_t temp10 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  temp3 = (int64_t)jarg3;
  arg3 = &temp3; 
  temp4 = (int64_t)jarg4;
  arg4 = &temp4; 
  temp5 = (int64_t)jarg5;
  arg5 = &temp5; 
  temp6 = (int64_t)jarg6;
  arg6 = &temp6; 
  temp7 = jarg7 ? true : false;
  arg7 = &temp7; 
  arg8 = (WrapTimeT *)jarg8;
  if (!arg8) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "WrapTimeT const & type is null");
    return 0;
  } 
  if (!jarg9) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg9_str(jarg9);
  arg9 = &arg9_str; 
  temp10 = (int64_t)jarg10;
  arg10 = &temp10; 
  result = (int32_t)OTAPI_Wrap::issueMarketOffer((std::string const &)*arg1,(std::string const &)*arg2,(long long const &)*arg3,(long long const &)*arg4,(long long const &)*arg5,(long long const &)*arg6,(bool const &)*arg7,(WrapTimeT const &)*arg8,(std::string const &)*arg9,(long long const &)*arg10);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_getMarketList(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::getMarketList((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_getMarketOffers(char * jarg1, char * jarg2, char * jarg3, long long jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t *arg4 = 0 ;
  int64_t temp4 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (int64_t)jarg4;
  arg4 = &temp4; 
  result = (int32_t)OTAPI_Wrap::getMarketOffers((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(long long const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_getMarketRecentTrades(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::getMarketRecentTrades((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_getNym_MarketOffers(char * jarg1, char * jarg2) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)OTAPI_Wrap::getNym_MarketOffers((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_killMarketOffer(char * jarg1, char * jarg2, char * jarg3, long long jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t *arg4 = 0 ;
  int64_t temp4 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (int64_t)jarg4;
  arg4 = &temp4; 
  result = (int32_t)OTAPI_Wrap::killMarketOffer((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(long long const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_killPaymentPlan(char * jarg1, char * jarg2, char * jarg3, long long jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t *arg4 = 0 ;
  int64_t temp4 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  temp4 = (int64_t)jarg4;
  arg4 = &temp4; 
  result = (int32_t)OTAPI_Wrap::killPaymentPlan((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(long long const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_PopMessageBuffer(long long jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  int64_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t temp1 ;
  std::string result;
  
  temp1 = (int64_t)jarg1;
  arg1 = &temp1; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::PopMessageBuffer((long long const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OTAPI_Wrap_FlushMessageBuffer() {
  OTAPI_Wrap::FlushMessageBuffer();
}


SWIGEXPORT char * D_OTAPI_Wrap_GetSentMessage(long long jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  int64_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t temp1 ;
  std::string result;
  
  temp1 = (int64_t)jarg1;
  arg1 = &temp1; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = OTAPI_Wrap::GetSentMessage((long long const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_RemoveSentMessage(long long jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  int64_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t temp1 ;
  bool result;
  
  temp1 = (int64_t)jarg1;
  arg1 = &temp1; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)OTAPI_Wrap::RemoveSentMessage((long long const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_OTAPI_Wrap_FlushSentMessages(unsigned int jarg1, char * jarg2, char * jarg3, char * jarg4) {
  bool *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool temp1 ;
  
  temp1 = jarg1 ? true : false;
  arg1 = &temp1; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  OTAPI_Wrap::FlushSentMessages((bool const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void D_OTAPI_Wrap_Sleep(long long jarg1) {
  int64_t *arg1 = 0 ;
  int64_t temp1 ;
  
  temp1 = (int64_t)jarg1;
  arg1 = &temp1; 
  OTAPI_Wrap::Sleep((long long const &)*arg1);
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_ResyncNymWithServer(char * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)OTAPI_Wrap::ResyncNymWithServer((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Message_GetCommand(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Message_GetCommand((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Message_GetSuccess(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int32_t)OTAPI_Wrap::Message_GetSuccess((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_queryAssetTypes(char * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (int32_t)OTAPI_Wrap::queryAssetTypes((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Message_GetPayload(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Message_GetPayload((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Message_GetDepth(char * jarg1) {
  int jresult ;
  std::string *arg1 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (int32_t)OTAPI_Wrap::Message_GetDepth((std::string const &)*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Message_GetTransactionSuccess(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int32_t)OTAPI_Wrap::Message_GetTransactionSuccess((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Message_IsTransactionCanceled(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int32_t)OTAPI_Wrap::Message_IsTransactionCanceled((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OTAPI_Wrap_Message_GetBalanceAgreementSuccess(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int32_t)OTAPI_Wrap::Message_GetBalanceAgreementSuccess((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Message_GetLedger(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Message_GetLedger((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Message_GetNewAssetTypeID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Message_GetNewAssetTypeID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Message_GetNewIssuerAcctID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Message_GetNewIssuerAcctID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Message_GetNewAcctID(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Message_GetNewAcctID((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OTAPI_Wrap_Message_GetNymboxHash(char * jarg1) {
  char * jresult ;
  std::string *arg1 = 0 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = OTAPI_Wrap::Message_GetNymboxHash((std::string const &)*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_ConnectServer(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (bool)OTAPI_Wrap::ConnectServer((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OTAPI_Wrap_ProcessSockets() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)OTAPI_Wrap::ProcessSockets();
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OT_CLI_GetArgsCount(char * jarg1) {
  int jresult ;
  std::string arg1 ;
  int32_t result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (int32_t)OT_CLI_GetArgsCount(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OT_CLI_GetValueByKey(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = OT_CLI_GetValueByKey(arg1,arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_CLI_GetValueByIndex(char * jarg1, int jarg2) {
  char * jresult ;
  std::string arg1 ;
  int32_t arg2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (int32_t)jarg2;
  result = OT_CLI_GetValueByIndex(arg1,arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_CLI_GetKeyByIndex(char * jarg1, int jarg2) {
  char * jresult ;
  std::string arg1 ;
  int32_t arg2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  arg2 = (int32_t)jarg2;
  result = OT_CLI_GetKeyByIndex(arg1,arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_CLI_ReadLine() {
  char * jresult ;
  std::string result;
  
  result = OT_CLI_ReadLine();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_CLI_ReadUntilEOF() {
  char * jresult ;
  std::string result;
  
  result = OT_CLI_ReadUntilEOF();
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_new_OT_ME() {
  void * jresult ;
  OT_ME *result = 0 ;
  
  result = (OT_ME *)new OT_ME();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_OT_ME(void * jarg1) {
  OT_ME *arg1 = (OT_ME *) 0 ;
  
  arg1 = (OT_ME *)jarg1;
  delete arg1;
}


SWIGEXPORT int D_OT_ME_opentxs_main_loop(void * jarg1) {
  int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  int32_t result;
  
  arg1 = (OT_ME *)jarg1;
  result = (int32_t)(arg1)->opentxs_main_loop();
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OT_ME_make_sure_enough_trans_nums(void * jarg1, int jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  int32_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  arg1 = (OT_ME *)jarg1;
  arg2 = (int32_t)jarg2;
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (bool)(arg1)->make_sure_enough_trans_nums(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OT_ME_register_nym(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (arg1)->register_nym((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_check_user(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->check_user((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_create_pseudonym(void * jarg1, int jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  int32_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  arg2 = (int32_t)jarg2;
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->create_pseudonym(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_issue_asset_type(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->issue_asset_type((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_issue_basket_currency(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->issue_basket_currency((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_exchange_basket_currency(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, unsigned int jarg7) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  bool arg7 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  arg7 = jarg7 ? true : false;
  result = (arg1)->exchange_basket_currency((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,arg7);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_retrieve_contract(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->retrieve_contract((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_load_or_retrieve_contract(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->load_or_retrieve_contract((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_create_asset_acct(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->create_asset_acct((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_stat_asset_account(void * jarg1, char * jarg2) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->stat_asset_account((std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OT_ME_retrieve_account__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (bool)(arg1)->retrieve_account((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OT_ME_retrieve_account__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = jarg5 ? true : false;
  result = (bool)(arg1)->retrieve_account((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OT_ME_retrieve_nym__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (bool)(arg1)->retrieve_nym((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OT_ME_retrieve_nym__SWIG_1(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  unsigned int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = jarg4 ? true : false;
  result = (bool)(arg1)->retrieve_nym((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OT_ME_send_transfer(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, long long jarg6, char * jarg7) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int64_t arg6 ;
  std::string *arg7 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  arg6 = (int64_t)jarg6;
  if (!jarg7) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg7_str(jarg7);
  arg7 = &arg7_str; 
  result = (arg1)->send_transfer((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,(std::string const &)*arg7);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_process_inbox(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (arg1)->process_inbox((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OT_ME_accept_inbox_items(void * jarg1, char * jarg2, int jarg3, char * jarg4) {
  unsigned int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  int32_t arg3 ;
  std::string *arg4 = 0 ;
  bool result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int32_t)jarg3;
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (bool)(arg1)->accept_inbox_items((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OT_ME_discard_incoming_payments(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (bool)(arg1)->discard_incoming_payments((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OT_ME_cancel_outgoing_payments(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (bool)(arg1)->cancel_outgoing_payments((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OT_ME_accept_from_paymentbox(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (int32_t)(arg1)->accept_from_paymentbox((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OT_ME_load_public_encryption_key(void * jarg1, char * jarg2) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->load_public_encryption_key((std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_load_public_signing_key(void * jarg1, char * jarg2) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->load_public_signing_key((std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_load_or_retrieve_encrypt_key(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->load_or_retrieve_encrypt_key((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_load_or_retrieve_signing_key(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->load_or_retrieve_signing_key((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_send_user_msg_pubkey(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  result = (arg1)->send_user_msg_pubkey((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_send_user_pmnt_pubkey(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  result = (arg1)->send_user_pmnt_pubkey((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_send_user_cash_pubkey(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, char * jarg7) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  if (!jarg7) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg7_str(jarg7);
  arg7 = &arg7_str; 
  result = (arg1)->send_user_cash_pubkey((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_send_user_msg(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (arg1)->send_user_msg((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_send_user_payment(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (arg1)->send_user_payment((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_send_user_cash(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  result = (arg1)->send_user_cash((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OT_ME_withdraw_and_send_cash(void * jarg1, char * jarg2, char * jarg3, char * jarg4, long long jarg5) {
  unsigned int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t arg5 ;
  bool result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (int64_t)jarg5;
  result = (bool)(arg1)->withdraw_and_send_cash((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OT_ME_get_payment_instrument__SWIG_0(void * jarg1, char * jarg2, char * jarg3, int jarg4) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t arg4 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int32_t)jarg4;
  result = (arg1)->get_payment_instrument((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_get_payment_instrument__SWIG_1(void * jarg1, char * jarg2, char * jarg3, int jarg4, char * jarg5) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t arg4 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int32_t)jarg4;
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (arg1)->get_payment_instrument((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_get_box_receipt(void * jarg1, char * jarg2, char * jarg3, char * jarg4, int jarg5, long long jarg6) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t arg5 ;
  int64_t arg6 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (int32_t)jarg5;
  arg6 = (int64_t)jarg6;
  result = (arg1)->get_box_receipt((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_retrieve_mint(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->retrieve_mint((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_load_or_retrieve_mint(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->load_or_retrieve_mint((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_query_asset_types(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->query_asset_types((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_create_market_offer(void * jarg1, char * jarg2, char * jarg3, long long jarg4, long long jarg5, long long jarg6, long long jarg7, unsigned int jarg8, long long jarg9, char * jarg10, long long jarg11) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t arg4 ;
  int64_t arg5 ;
  int64_t arg6 ;
  int64_t arg7 ;
  bool arg8 ;
  int64_t arg9 ;
  std::string arg10 ;
  int64_t arg11 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int64_t)jarg4;
  arg5 = (int64_t)jarg5;
  arg6 = (int64_t)jarg6;
  arg7 = (int64_t)jarg7;
  arg8 = jarg8 ? true : false;
  arg9 = (int64_t)jarg9;
  if (!jarg10) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg10)->assign(jarg10); 
  arg11 = (int64_t)jarg11;
  result = (arg1)->create_market_offer((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_kill_market_offer(void * jarg1, char * jarg2, char * jarg3, char * jarg4, long long jarg5) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t arg5 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (int64_t)jarg5;
  result = (arg1)->kill_market_offer((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_kill_payment_plan(void * jarg1, char * jarg2, char * jarg3, char * jarg4, long long jarg5) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t arg5 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (int64_t)jarg5;
  result = (arg1)->kill_payment_plan((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_cancel_payment_plan(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->cancel_payment_plan((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_activate_smart_contract(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  result = (arg1)->activate_smart_contract((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_trigger_clause(void * jarg1, char * jarg2, char * jarg3, long long jarg4, char * jarg5, char * jarg6) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  arg4 = (int64_t)jarg4;
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  result = (arg1)->trigger_clause((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_withdraw_cash(void * jarg1, char * jarg2, char * jarg3, char * jarg4, long long jarg5) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t arg5 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (int64_t)jarg5;
  result = (arg1)->withdraw_cash((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OT_ME_easy_withdraw_cash(void * jarg1, char * jarg2, long long jarg3) {
  int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  int32_t result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (int64_t)jarg3;
  result = (int32_t)(arg1)->easy_withdraw_cash((std::string const &)*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OT_ME_export_cash(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, unsigned int jarg7, void * jarg8) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  bool arg7 ;
  std::string *arg8 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  arg7 = jarg7 ? true : false;
  arg8 = (std::string *)jarg8;
  if (!arg8) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  result = (arg1)->export_cash((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,arg7,*arg8);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_withdraw_voucher(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, long long jarg7) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  int64_t arg7 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  arg7 = (int64_t)jarg7;
  result = (arg1)->withdraw_voucher((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,arg7);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_pay_dividend(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6, long long jarg7) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  int64_t arg7 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  arg7 = (int64_t)jarg7;
  result = (arg1)->pay_dividend((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,arg7);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_deposit_cheque(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (arg1)->deposit_cheque((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OT_ME_deposit_cash(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int32_t result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (int32_t)(arg1)->deposit_cash((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OT_ME_deposit_local_purse(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int32_t result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (int32_t)(arg1)->deposit_local_purse((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OT_ME_get_market_list(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (arg1)->get_market_list((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_get_market_offers(void * jarg1, char * jarg2, char * jarg3, char * jarg4, long long jarg5) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t arg5 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  arg5 = (int64_t)jarg5;
  result = (arg1)->get_market_offers((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_get_nym_market_offers(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  result = (arg1)->get_nym_market_offers((std::string const &)*arg2,(std::string const &)*arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_get_market_recent_trades(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  result = (arg1)->get_market_recent_trades((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_adjust_usage_credits(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (arg1)->adjust_usage_credits((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int D_OT_ME_VerifyMessageSuccess(void * jarg1, char * jarg2) {
  int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)(arg1)->VerifyMessageSuccess((std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OT_ME_VerifyMsgBalanceAgrmntSuccess(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int32_t result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (int32_t)(arg1)->VerifyMsgBalanceAgrmntSuccess((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OT_ME_VerifyMsgTrnxSuccess(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int32_t result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  result = (int32_t)(arg1)->VerifyMsgTrnxSuccess((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OT_ME_InterpretTransactionMsgReply(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  int32_t result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg4_str(jarg4);
  arg4 = &arg4_str; 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg5_str(jarg5);
  arg5 = &arg5_str; 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg6_str(jarg6);
  arg6 = &arg6_str; 
  result = (int32_t)(arg1)->InterpretTransactionMsgReply((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_OT_ME_ExecuteScript_ReturnString__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (arg1)->ExecuteScript_ReturnString((std::string const &)*arg2,arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_OT_ME_ExecuteScript_ReturnString__SWIG_1(void * jarg1, char * jarg2) {
  char * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->ExecuteScript_ReturnString((std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_OT_ME_ExecuteScript_ReturnBool__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  bool result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (bool)(arg1)->ExecuteScript_ReturnBool((std::string const &)*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OT_ME_ExecuteScript_ReturnBool__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (bool)(arg1)->ExecuteScript_ReturnBool((std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OT_ME_ExecuteScript_ReturnInt__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  int32_t result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (int32_t)(arg1)->ExecuteScript_ReturnInt((std::string const &)*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT int D_OT_ME_ExecuteScript_ReturnInt__SWIG_1(void * jarg1, char * jarg2) {
  int jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (int32_t)(arg1)->ExecuteScript_ReturnInt((std::string const &)*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_OT_ME_ExecuteScript_ReturnVoid__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  (&arg3)->assign(jarg3); 
  (arg1)->ExecuteScript_ReturnVoid((std::string const &)*arg2,arg3);
}


SWIGEXPORT void D_OT_ME_ExecuteScript_ReturnVoid__SWIG_1(void * jarg1, char * jarg2) {
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->ExecuteScript_ReturnVoid((std::string const &)*arg2);
}


SWIGEXPORT void D_OT_ME_AddVariable(void * jarg1, char * jarg2, void * jarg3) {
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  OTVariable *arg3 = 0 ;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  arg3 = (OTVariable *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTVariable & type is null");
    return ;
  } 
  (arg1)->AddVariable((std::string const &)*arg2,*arg3);
}


SWIGEXPORT void * D_OT_ME_FindVariable(void * jarg1, char * jarg2) {
  void * jresult ;
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  OTVariable *result = 0 ;
  
  arg1 = (OT_ME *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (OTVariable *)(arg1)->FindVariable((std::string const &)*arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_OT_ME_FindVariable2(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  OTVariable *result = 0 ;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = (OTVariable *)OT_ME::FindVariable2((std::string const &)*arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Storable(void * jarg1) {
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  delete arg1;
}


SWIGEXPORT void * D_Storable_Create(int jarg1, int jarg2) {
  void * jresult ;
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  arg1 = (OTDB::StoredObjectType)jarg1; 
  arg2 = (OTDB::PackType)jarg2; 
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Storable_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::Storable *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::Storable *)OTDB::Storable::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Storage_GetPacker__SWIG_0(void * jarg1, int jarg2) {
  void * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::PackType arg2 ;
  OTPacker *result = 0 ;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (OTDB::PackType)jarg2; 
  result = (OTPacker *)(arg1)->GetPacker(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Storage_GetPacker__SWIG_1(void * jarg1) {
  void * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTPacker *result = 0 ;
  
  arg1 = (OTDB::Storage *)jarg1;
  result = (OTPacker *)(arg1)->GetPacker();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_Exists__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (bool)(arg1)->Exists(arg2,arg3,arg4,arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_Exists__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (bool)(arg1)->Exists(arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_Exists__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (bool)(arg1)->Exists(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_Exists__SWIG_3(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->Exists(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT long long D_Storage_FormPathString__SWIG_0(void * jarg1, void * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  long long jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  int64_t result;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg6)->assign(jarg6); 
  result = (int64_t)(arg1)->FormPathString(*arg2,arg3,arg4,arg5,arg6);
  jresult = result;
  return jresult;
}


SWIGEXPORT long long D_Storage_FormPathString__SWIG_1(void * jarg1, void * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  long long jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  int64_t result;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (int64_t)(arg1)->FormPathString(*arg2,arg3,arg4,arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT long long D_Storage_FormPathString__SWIG_2(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  long long jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  int64_t result;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (int64_t)(arg1)->FormPathString(*arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT long long D_Storage_FormPathString__SWIG_3(void * jarg1, void * jarg2, char * jarg3) {
  long long jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  int64_t result;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (int64_t)(arg1)->FormPathString(*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_Storage(void * jarg1) {
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  
  arg1 = (OTDB::Storage *)jarg1;
  delete arg1;
}


SWIGEXPORT unsigned int D_Storage_StoreString__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg6)->assign(jarg6); 
  result = (bool)(arg1)->StoreString(arg2,arg3,arg4,arg5,arg6);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_StoreString__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (bool)(arg1)->StoreString(arg2,arg3,arg4,arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_StoreString__SWIG_2(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (bool)(arg1)->StoreString(arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_StoreString__SWIG_3(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (bool)(arg1)->StoreString(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_Storage_QueryString__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  char * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (arg1)->QueryString(arg2,arg3,arg4,arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_Storage_QueryString__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (arg1)->QueryString(arg2,arg3,arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_Storage_QueryString__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (arg1)->QueryString(arg2,arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_Storage_QueryString__SWIG_3(void * jarg1, char * jarg2) {
  char * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->QueryString(arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_StorePlainString__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg6)->assign(jarg6); 
  result = (bool)(arg1)->StorePlainString(arg2,arg3,arg4,arg5,arg6);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_StorePlainString__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (bool)(arg1)->StorePlainString(arg2,arg3,arg4,arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_StorePlainString__SWIG_2(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (bool)(arg1)->StorePlainString(arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_StorePlainString__SWIG_3(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (bool)(arg1)->StorePlainString(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_Storage_QueryPlainString__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  char * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (arg1)->QueryPlainString(arg2,arg3,arg4,arg5);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_Storage_QueryPlainString__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (arg1)->QueryPlainString(arg2,arg3,arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_Storage_QueryPlainString__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (arg1)->QueryPlainString(arg2,arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_Storage_QueryPlainString__SWIG_3(void * jarg1, char * jarg2) {
  char * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (arg1)->QueryPlainString(arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_StoreObject__SWIG_0(void * jarg1, void * jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::Storable *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (OTDB::Storable *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::Storable & type is null");
    return 0;
  } 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg6)->assign(jarg6); 
  result = (bool)(arg1)->StoreObject(*arg2,arg3,arg4,arg5,arg6);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_StoreObject__SWIG_1(void * jarg1, void * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::Storable *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (OTDB::Storable *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::Storable & type is null");
    return 0;
  } 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (bool)(arg1)->StoreObject(*arg2,arg3,arg4,arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_StoreObject__SWIG_2(void * jarg1, void * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::Storable *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (OTDB::Storable *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::Storable & type is null");
    return 0;
  } 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (bool)(arg1)->StoreObject(*arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_StoreObject__SWIG_3(void * jarg1, void * jarg2, char * jarg3) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::Storable *arg2 = 0 ;
  std::string arg3 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (OTDB::Storable *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::Storable & type is null");
    return 0;
  } 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (bool)(arg1)->StoreObject(*arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_Storage_QueryObject__SWIG_0(void * jarg1, int jarg2, char * jarg3, char * jarg4, char * jarg5, char * jarg6) {
  void * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  OTDB::Storable *result = 0 ;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (OTDB::StoredObjectType)jarg2; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  if (!jarg6) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg6)->assign(jarg6); 
  result = (OTDB::Storable *)(arg1)->QueryObject(arg2,arg3,arg4,arg5,arg6);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Storage_QueryObject__SWIG_1(void * jarg1, int jarg2, char * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  OTDB::Storable *result = 0 ;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (OTDB::StoredObjectType)jarg2; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (OTDB::Storable *)(arg1)->QueryObject(arg2,arg3,arg4,arg5);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Storage_QueryObject__SWIG_2(void * jarg1, int jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  OTDB::Storable *result = 0 ;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (OTDB::StoredObjectType)jarg2; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (OTDB::Storable *)(arg1)->QueryObject(arg2,arg3,arg4);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Storage_QueryObject__SWIG_3(void * jarg1, int jarg2, char * jarg3) {
  void * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  std::string arg3 ;
  OTDB::Storable *result = 0 ;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (OTDB::StoredObjectType)jarg2; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (OTDB::Storable *)(arg1)->QueryObject(arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * D_Storage_EncodeObject(void * jarg1, void * jarg2) {
  char * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::Storable *arg2 = 0 ;
  std::string result;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (OTDB::Storable *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::Storable & type is null");
    return 0;
  } 
  result = (arg1)->EncodeObject(*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_Storage_DecodeObject(void * jarg1, int jarg2, char * jarg3) {
  void * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  std::string arg3 ;
  OTDB::Storable *result = 0 ;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (OTDB::StoredObjectType)jarg2; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (OTDB::Storable *)(arg1)->DecodeObject(arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_EraseValueByKey__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (bool)(arg1)->EraseValueByKey(arg2,arg3,arg4,arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_EraseValueByKey__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (bool)(arg1)->EraseValueByKey(arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_EraseValueByKey__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (bool)(arg1)->EraseValueByKey(arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Storage_EraseValueByKey__SWIG_3(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (OTDB::Storage *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->EraseValueByKey(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_Storage_CreateObject(void * jarg1, int jarg2) {
  void * jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  OTDB::Storable *result = 0 ;
  
  arg1 = (OTDB::Storage *)jarg1;
  arg2 = (OTDB::StoredObjectType)jarg2; 
  result = (OTDB::Storable *)(arg1)->CreateObject(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Storage_Create(int jarg1, int jarg2) {
  void * jresult ;
  OTDB::StorageType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storage *result = 0 ;
  
  arg1 = (OTDB::StorageType)jarg1; 
  arg2 = (OTDB::PackType)jarg2; 
  result = (OTDB::Storage *)OTDB::Storage::Create(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT int D_Storage_GetType(void * jarg1) {
  int jresult ;
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StorageType result;
  
  arg1 = (OTDB::Storage *)jarg1;
  result = (OTDB::StorageType)((OTDB::Storage const *)arg1)->GetType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int D_InitDefaultStorage(int jarg1, int jarg2) {
  unsigned int jresult ;
  OTDB::StorageType arg1 ;
  OTDB::PackType arg2 ;
  bool result;
  
  arg1 = (OTDB::StorageType)jarg1; 
  arg2 = (OTDB::PackType)jarg2; 
  result = (bool)OTDB::InitDefaultStorage(arg1,arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_GetDefaultStorage() {
  void * jresult ;
  OTDB::Storage *result = 0 ;
  
  result = (OTDB::Storage *)OTDB::GetDefaultStorage();
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_CreateStorageContext__SWIG_0(int jarg1, int jarg2) {
  void * jresult ;
  OTDB::StorageType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storage *result = 0 ;
  
  arg1 = (OTDB::StorageType)jarg1; 
  arg2 = (OTDB::PackType)jarg2; 
  result = (OTDB::Storage *)OTDB::CreateStorageContext(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_CreateStorageContext__SWIG_1(int jarg1) {
  void * jresult ;
  OTDB::StorageType arg1 ;
  OTDB::Storage *result = 0 ;
  
  arg1 = (OTDB::StorageType)jarg1; 
  result = (OTDB::Storage *)OTDB::CreateStorageContext(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_CreateObject(int jarg1) {
  void * jresult ;
  OTDB::StoredObjectType arg1 ;
  OTDB::Storable *result = 0 ;
  
  arg1 = (OTDB::StoredObjectType)jarg1; 
  result = (OTDB::Storable *)OTDB::CreateObject(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_CheckStringsExistInOrder__SWIG_0(void * jarg1, void * jarg2, void * jarg3, void * jarg4, char * jarg5) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (std::string *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  arg4 = (std::string *)jarg4;
  if (!arg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  arg5 = (char *)jarg5; 
  result = (bool)OTDB::CheckStringsExistInOrder(*arg1,*arg2,*arg3,*arg4,(char const *)arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_CheckStringsExistInOrder__SWIG_1(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  arg1 = (std::string *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  arg2 = (std::string *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  arg3 = (std::string *)jarg3;
  if (!arg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  arg4 = (std::string *)jarg4;
  if (!arg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  result = (bool)OTDB::CheckStringsExistInOrder(*arg1,*arg2,*arg3,*arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Exists__SWIG_0(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (bool)OTDB::Exists(arg1,arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Exists__SWIG_1(char * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (bool)OTDB::Exists(arg1,arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Exists__SWIG_2(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string arg1 ;
  std::string arg2 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)OTDB::Exists(arg1,arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Exists__SWIG_3(char * jarg1) {
  unsigned int jresult ;
  std::string arg1 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (bool)OTDB::Exists(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT long long D_FormPathString__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  long long jresult ;
  std::string *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  int64_t result;
  
  arg1 = (std::string *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (int64_t)OTDB::FormPathString(*arg1,arg2,arg3,arg4,arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT long long D_FormPathString__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  long long jresult ;
  std::string *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int64_t result;
  
  arg1 = (std::string *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (int64_t)OTDB::FormPathString(*arg1,arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT long long D_FormPathString__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
  long long jresult ;
  std::string *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int64_t result;
  
  arg1 = (std::string *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (int64_t)OTDB::FormPathString(*arg1,arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT long long D_FormPathString__SWIG_3(void * jarg1, char * jarg2) {
  long long jresult ;
  std::string *arg1 = 0 ;
  std::string arg2 ;
  int64_t result;
  
  arg1 = (std::string *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "std::string & type is null");
    return 0;
  } 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (int64_t)OTDB::FormPathString(*arg1,arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StoreString__SWIG_0(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  unsigned int jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (bool)OTDB::StoreString(arg1,arg2,arg3,arg4,arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StoreString__SWIG_1(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (bool)OTDB::StoreString(arg1,arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StoreString__SWIG_2(char * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (bool)OTDB::StoreString(arg1,arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StoreString__SWIG_3(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string arg1 ;
  std::string arg2 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)OTDB::StoreString(arg1,arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_QueryString__SWIG_0(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = OTDB::QueryString(arg1,arg2,arg3,arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_QueryString__SWIG_1(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = OTDB::QueryString(arg1,arg2,arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_QueryString__SWIG_2(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = OTDB::QueryString(arg1,arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_QueryString__SWIG_3(char * jarg1) {
  char * jresult ;
  std::string arg1 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = OTDB::QueryString(arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_StorePlainString__SWIG_0(char * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  unsigned int jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (bool)OTDB::StorePlainString(arg1,arg2,arg3,arg4,arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StorePlainString__SWIG_1(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (bool)OTDB::StorePlainString(arg1,arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StorePlainString__SWIG_2(char * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (bool)OTDB::StorePlainString(arg1,arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StorePlainString__SWIG_3(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string arg1 ;
  std::string arg2 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)OTDB::StorePlainString(arg1,arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT char * D_QueryPlainString__SWIG_0(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = OTDB::QueryPlainString(arg1,arg2,arg3,arg4);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_QueryPlainString__SWIG_1(char * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = OTDB::QueryPlainString(arg1,arg2,arg3);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_QueryPlainString__SWIG_2(char * jarg1, char * jarg2) {
  char * jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = OTDB::QueryPlainString(arg1,arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * D_QueryPlainString__SWIG_3(char * jarg1) {
  char * jresult ;
  std::string arg1 ;
  std::string result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = OTDB::QueryPlainString(arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT unsigned int D_StoreObject__SWIG_0(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  unsigned int jresult ;
  OTDB::Storable *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  arg1 = (OTDB::Storable *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::Storable & type is null");
    return 0;
  } 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (bool)OTDB::StoreObject(*arg1,arg2,arg3,arg4,arg5);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StoreObject__SWIG_1(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  OTDB::Storable *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  arg1 = (OTDB::Storable *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::Storable & type is null");
    return 0;
  } 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (bool)OTDB::StoreObject(*arg1,arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StoreObject__SWIG_2(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  OTDB::Storable *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  arg1 = (OTDB::Storable *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::Storable & type is null");
    return 0;
  } 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (bool)OTDB::StoreObject(*arg1,arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_StoreObject__SWIG_3(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  OTDB::Storable *arg1 = 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (OTDB::Storable *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::Storable & type is null");
    return 0;
  } 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)OTDB::StoreObject(*arg1,arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_QueryObject__SWIG_0(int jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  OTDB::StoredObjectType arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  OTDB::Storable *result = 0 ;
  
  arg1 = (OTDB::StoredObjectType)jarg1; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  if (!jarg5) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg5)->assign(jarg5); 
  result = (OTDB::Storable *)OTDB::QueryObject(arg1,arg2,arg3,arg4,arg5);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_QueryObject__SWIG_1(int jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  OTDB::StoredObjectType arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  OTDB::Storable *result = 0 ;
  
  arg1 = (OTDB::StoredObjectType)jarg1; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (OTDB::Storable *)OTDB::QueryObject(arg1,arg2,arg3,arg4);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_QueryObject__SWIG_2(int jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  OTDB::StoredObjectType arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  OTDB::Storable *result = 0 ;
  
  arg1 = (OTDB::StoredObjectType)jarg1; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (OTDB::Storable *)OTDB::QueryObject(arg1,arg2,arg3);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_QueryObject__SWIG_3(int jarg1, char * jarg2) {
  void * jresult ;
  OTDB::StoredObjectType arg1 ;
  std::string arg2 ;
  OTDB::Storable *result = 0 ;
  
  arg1 = (OTDB::StoredObjectType)jarg1; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (OTDB::Storable *)OTDB::QueryObject(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT char * D_EncodeObject(void * jarg1) {
  char * jresult ;
  OTDB::Storable *arg1 = 0 ;
  std::string result;
  
  arg1 = (OTDB::Storable *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::Storable & type is null");
    return 0;
  } 
  result = OTDB::EncodeObject(*arg1);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_DecodeObject(int jarg1, char * jarg2) {
  void * jresult ;
  OTDB::StoredObjectType arg1 ;
  std::string arg2 ;
  OTDB::Storable *result = 0 ;
  
  arg1 = (OTDB::StoredObjectType)jarg1; 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (OTDB::Storable *)OTDB::DecodeObject(arg1,arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_EraseValueByKey__SWIG_0(char * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  unsigned int jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  if (!jarg4) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg4)->assign(jarg4); 
  result = (bool)OTDB::EraseValueByKey(arg1,arg2,arg3,arg4);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_EraseValueByKey__SWIG_1(char * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg3)->assign(jarg3); 
  result = (bool)OTDB::EraseValueByKey(arg1,arg2,arg3);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_EraseValueByKey__SWIG_2(char * jarg1, char * jarg2) {
  unsigned int jresult ;
  std::string arg1 ;
  std::string arg2 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)OTDB::EraseValueByKey(arg1,arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_EraseValueByKey__SWIG_3(char * jarg1) {
  unsigned int jresult ;
  std::string arg1 ;
  bool result;
  
  if (!jarg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  (&arg1)->assign(jarg1); 
  result = (bool)OTDB::EraseValueByKey(arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_delete_OTDBString(void * jarg1) {
  OTDB::OTDBString *arg1 = (OTDB::OTDBString *) 0 ;
  
  arg1 = (OTDB::OTDBString *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_OTDBString_m_string_set(void * jarg1, char * jarg2) {
  OTDB::OTDBString *arg1 = (OTDB::OTDBString *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OTDBString *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->m_string = *arg2;
}


SWIGEXPORT char * D_OTDBString_m_string_get(void * jarg1) {
  char * jresult ;
  OTDB::OTDBString *arg1 = (OTDB::OTDBString *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OTDBString *)jarg1;
  result = (std::string *) & ((arg1)->m_string);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_OTDBString_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::OTDBString *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::OTDBString *)OTDB::OTDBString::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Blob(void * jarg1) {
  OTDB::Blob *arg1 = (OTDB::Blob *) 0 ;
  
  arg1 = (OTDB::Blob *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_Blob_m_memBuffer_set(void * jarg1, void * jarg2) {
  OTDB::Blob *arg1 = (OTDB::Blob *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  
  arg1 = (OTDB::Blob *)jarg1;
  arg2 = (std::vector< uint8_t > *)jarg2;
  if (arg1) (arg1)->m_memBuffer = *arg2;
}


SWIGEXPORT void * D_Blob_m_memBuffer_get(void * jarg1) {
  void * jresult ;
  OTDB::Blob *arg1 = (OTDB::Blob *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  arg1 = (OTDB::Blob *)jarg1;
  result = (std::vector< uint8_t > *)& ((arg1)->m_memBuffer);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void * D_Blob_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::Blob *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::Blob *)OTDB::Blob::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_StringMap(void * jarg1) {
  OTDB::StringMap *arg1 = (OTDB::StringMap *) 0 ;
  
  arg1 = (OTDB::StringMap *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_StringMap_the_map_set(void * jarg1, void * jarg2) {
  OTDB::StringMap *arg1 = (OTDB::StringMap *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = (OTDB::StringMap *)jarg1;
  arg2 = (std::map< std::string,std::string > *)jarg2;
  if (arg1) (arg1)->the_map = *arg2;
}


SWIGEXPORT void * D_StringMap_the_map_get(void * jarg1) {
  void * jresult ;
  OTDB::StringMap *arg1 = (OTDB::StringMap *) 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  arg1 = (OTDB::StringMap *)jarg1;
  result = (std::map< std::string,std::string > *)& ((arg1)->the_map);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_StringMap_SetValue(void * jarg1, char * jarg2, char * jarg3) {
  OTDB::StringMap *arg1 = (OTDB::StringMap *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (OTDB::StringMap *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (!jarg3) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg3_str(jarg3);
  arg3 = &arg3_str; 
  (arg1)->SetValue((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT char * D_StringMap_GetValue(void * jarg1, char * jarg2) {
  char * jresult ;
  OTDB::StringMap *arg1 = (OTDB::StringMap *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (OTDB::StringMap *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return 0;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  result = (arg1)->GetValue((std::string const &)*arg2);
  jresult = SWIG_d_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_StringMap_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::StringMap *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::StringMap *)OTDB::StringMap::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Displayable(void * jarg1) {
  OTDB::Displayable *arg1 = (OTDB::Displayable *) 0 ;
  
  arg1 = (OTDB::Displayable *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_Displayable_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::Displayable *arg1 = (OTDB::Displayable *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::Displayable *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_Displayable_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::Displayable *arg1 = (OTDB::Displayable *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::Displayable *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_Displayable_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::Displayable *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::Displayable *)OTDB::Displayable::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_MarketData(void * jarg1) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_MarketData_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_MarketData_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_server_id_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_id = *arg2;
}


SWIGEXPORT char * D_MarketData_server_id_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->server_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_market_id_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->market_id = *arg2;
}


SWIGEXPORT char * D_MarketData_market_id_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->market_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_asset_type_id_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->asset_type_id = *arg2;
}


SWIGEXPORT char * D_MarketData_asset_type_id_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->asset_type_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_currency_type_id_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->currency_type_id = *arg2;
}


SWIGEXPORT char * D_MarketData_currency_type_id_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->currency_type_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_scale_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->scale = *arg2;
}


SWIGEXPORT char * D_MarketData_scale_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->scale);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_total_assets_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->total_assets = *arg2;
}


SWIGEXPORT char * D_MarketData_total_assets_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->total_assets);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_number_bids_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->number_bids = *arg2;
}


SWIGEXPORT char * D_MarketData_number_bids_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->number_bids);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_number_asks_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->number_asks = *arg2;
}


SWIGEXPORT char * D_MarketData_number_asks_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->number_asks);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_last_sale_price_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->last_sale_price = *arg2;
}


SWIGEXPORT char * D_MarketData_last_sale_price_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->last_sale_price);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_current_bid_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->current_bid = *arg2;
}


SWIGEXPORT char * D_MarketData_current_bid_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->current_bid);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_current_ask_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->current_ask = *arg2;
}


SWIGEXPORT char * D_MarketData_current_ask_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->current_ask);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_volume_trades_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->volume_trades = *arg2;
}


SWIGEXPORT char * D_MarketData_volume_trades_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->volume_trades);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_volume_assets_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->volume_assets = *arg2;
}


SWIGEXPORT char * D_MarketData_volume_assets_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->volume_assets);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_volume_currency_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->volume_currency = *arg2;
}


SWIGEXPORT char * D_MarketData_volume_currency_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->volume_currency);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_recent_highest_bid_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->recent_highest_bid = *arg2;
}


SWIGEXPORT char * D_MarketData_recent_highest_bid_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->recent_highest_bid);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_recent_lowest_ask_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->recent_lowest_ask = *arg2;
}


SWIGEXPORT char * D_MarketData_recent_lowest_ask_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->recent_lowest_ask);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_MarketData_last_sale_date_set(void * jarg1, char * jarg2) {
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->last_sale_date = *arg2;
}


SWIGEXPORT char * D_MarketData_last_sale_date_get(void * jarg1) {
  char * jresult ;
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::MarketData *)jarg1;
  result = (std::string *) & ((arg1)->last_sale_date);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_MarketData_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::MarketData *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::MarketData *)OTDB::MarketData::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_MarketList(void * jarg1) {
  OTDB::MarketList *arg1 = (OTDB::MarketList *) 0 ;
  
  arg1 = (OTDB::MarketList *)jarg1;
  delete arg1;
}


SWIGEXPORT size_t D_MarketList_GetMarketDataCount(void * jarg1) {
  size_t jresult ;
  OTDB::MarketList *arg1 = (OTDB::MarketList *) 0 ;
  size_t result;
  
  arg1 = (OTDB::MarketList *)jarg1;
  result = (arg1)->GetMarketDataCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_MarketList_GetMarketData(void * jarg1, size_t jarg2) {
  void * jresult ;
  OTDB::MarketList *arg1 = (OTDB::MarketList *) 0 ;
  size_t arg2 ;
  OTDB::MarketData *result = 0 ;
  
  arg1 = (OTDB::MarketList *)jarg1;
  arg2 = (size_t)jarg2;
  result = (OTDB::MarketData *)(arg1)->GetMarketData(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_MarketList_RemoveMarketData(void * jarg1, size_t jarg2) {
  unsigned int jresult ;
  OTDB::MarketList *arg1 = (OTDB::MarketList *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (OTDB::MarketList *)jarg1;
  arg2 = (size_t)jarg2;
  result = (bool)(arg1)->RemoveMarketData(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_MarketList_AddMarketData(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTDB::MarketList *arg1 = (OTDB::MarketList *) 0 ;
  OTDB::MarketData *arg2 = 0 ;
  bool result;
  
  arg1 = (OTDB::MarketList *)jarg1;
  arg2 = (OTDB::MarketData *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::MarketData & type is null");
    return 0;
  } 
  result = (bool)(arg1)->AddMarketData(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_MarketList_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::MarketList *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::MarketList *)OTDB::MarketList::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_OfferDataMarket(void * jarg1) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  
  arg1 = (OTDB::OfferDataMarket *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_OfferDataMarket_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataMarket *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_OfferDataMarket_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataMarket *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataMarket_transaction_id_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataMarket *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->transaction_id = *arg2;
}


SWIGEXPORT char * D_OfferDataMarket_transaction_id_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataMarket *)jarg1;
  result = (std::string *) & ((arg1)->transaction_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataMarket_price_per_scale_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataMarket *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->price_per_scale = *arg2;
}


SWIGEXPORT char * D_OfferDataMarket_price_per_scale_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataMarket *)jarg1;
  result = (std::string *) & ((arg1)->price_per_scale);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataMarket_available_assets_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataMarket *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->available_assets = *arg2;
}


SWIGEXPORT char * D_OfferDataMarket_available_assets_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataMarket *)jarg1;
  result = (std::string *) & ((arg1)->available_assets);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataMarket_minimum_increment_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataMarket *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->minimum_increment = *arg2;
}


SWIGEXPORT char * D_OfferDataMarket_minimum_increment_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataMarket *)jarg1;
  result = (std::string *) & ((arg1)->minimum_increment);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataMarket_date_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataMarket *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->date = *arg2;
}


SWIGEXPORT char * D_OfferDataMarket_date_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataMarket *)jarg1;
  result = (std::string *) & ((arg1)->date);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_OfferDataMarket_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::OfferDataMarket *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::OfferDataMarket *)OTDB::OfferDataMarket::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_BidData(void * jarg1) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  
  arg1 = (OTDB::BidData *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_BidData_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BidData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_BidData_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BidData *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_BidData_transaction_id_set(void * jarg1, char * jarg2) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BidData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->transaction_id = *arg2;
}


SWIGEXPORT char * D_BidData_transaction_id_get(void * jarg1) {
  char * jresult ;
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BidData *)jarg1;
  result = (std::string *) & ((arg1)->transaction_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_BidData_price_per_scale_set(void * jarg1, char * jarg2) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BidData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->price_per_scale = *arg2;
}


SWIGEXPORT char * D_BidData_price_per_scale_get(void * jarg1) {
  char * jresult ;
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BidData *)jarg1;
  result = (std::string *) & ((arg1)->price_per_scale);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_BidData_available_assets_set(void * jarg1, char * jarg2) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BidData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->available_assets = *arg2;
}


SWIGEXPORT char * D_BidData_available_assets_get(void * jarg1) {
  char * jresult ;
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BidData *)jarg1;
  result = (std::string *) & ((arg1)->available_assets);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_BidData_minimum_increment_set(void * jarg1, char * jarg2) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BidData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->minimum_increment = *arg2;
}


SWIGEXPORT char * D_BidData_minimum_increment_get(void * jarg1) {
  char * jresult ;
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BidData *)jarg1;
  result = (std::string *) & ((arg1)->minimum_increment);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_BidData_date_set(void * jarg1, char * jarg2) {
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BidData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->date = *arg2;
}


SWIGEXPORT char * D_BidData_date_get(void * jarg1) {
  char * jresult ;
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BidData *)jarg1;
  result = (std::string *) & ((arg1)->date);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_BidData_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::BidData *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::BidData *)OTDB::BidData::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_AskData(void * jarg1) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  
  arg1 = (OTDB::AskData *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_AskData_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::AskData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_AskData_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::AskData *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_AskData_transaction_id_set(void * jarg1, char * jarg2) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::AskData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->transaction_id = *arg2;
}


SWIGEXPORT char * D_AskData_transaction_id_get(void * jarg1) {
  char * jresult ;
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::AskData *)jarg1;
  result = (std::string *) & ((arg1)->transaction_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_AskData_price_per_scale_set(void * jarg1, char * jarg2) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::AskData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->price_per_scale = *arg2;
}


SWIGEXPORT char * D_AskData_price_per_scale_get(void * jarg1) {
  char * jresult ;
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::AskData *)jarg1;
  result = (std::string *) & ((arg1)->price_per_scale);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_AskData_available_assets_set(void * jarg1, char * jarg2) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::AskData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->available_assets = *arg2;
}


SWIGEXPORT char * D_AskData_available_assets_get(void * jarg1) {
  char * jresult ;
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::AskData *)jarg1;
  result = (std::string *) & ((arg1)->available_assets);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_AskData_minimum_increment_set(void * jarg1, char * jarg2) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::AskData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->minimum_increment = *arg2;
}


SWIGEXPORT char * D_AskData_minimum_increment_get(void * jarg1) {
  char * jresult ;
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::AskData *)jarg1;
  result = (std::string *) & ((arg1)->minimum_increment);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_AskData_date_set(void * jarg1, char * jarg2) {
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::AskData *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->date = *arg2;
}


SWIGEXPORT char * D_AskData_date_get(void * jarg1) {
  char * jresult ;
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::AskData *)jarg1;
  result = (std::string *) & ((arg1)->date);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_AskData_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::AskData *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::AskData *)OTDB::AskData::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_OfferListMarket(void * jarg1) {
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  
  arg1 = (OTDB::OfferListMarket *)jarg1;
  delete arg1;
}


SWIGEXPORT size_t D_OfferListMarket_GetBidDataCount(void * jarg1) {
  size_t jresult ;
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t result;
  
  arg1 = (OTDB::OfferListMarket *)jarg1;
  result = (arg1)->GetBidDataCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_OfferListMarket_GetBidData(void * jarg1, size_t jarg2) {
  void * jresult ;
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t arg2 ;
  OTDB::BidData *result = 0 ;
  
  arg1 = (OTDB::OfferListMarket *)jarg1;
  arg2 = (size_t)jarg2;
  result = (OTDB::BidData *)(arg1)->GetBidData(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_OfferListMarket_RemoveBidData(void * jarg1, size_t jarg2) {
  unsigned int jresult ;
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (OTDB::OfferListMarket *)jarg1;
  arg2 = (size_t)jarg2;
  result = (bool)(arg1)->RemoveBidData(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OfferListMarket_AddBidData(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  OTDB::BidData *arg2 = 0 ;
  bool result;
  
  arg1 = (OTDB::OfferListMarket *)jarg1;
  arg2 = (OTDB::BidData *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::BidData & type is null");
    return 0;
  } 
  result = (bool)(arg1)->AddBidData(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_OfferListMarket_GetAskDataCount(void * jarg1) {
  size_t jresult ;
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t result;
  
  arg1 = (OTDB::OfferListMarket *)jarg1;
  result = (arg1)->GetAskDataCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_OfferListMarket_GetAskData(void * jarg1, size_t jarg2) {
  void * jresult ;
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t arg2 ;
  OTDB::AskData *result = 0 ;
  
  arg1 = (OTDB::OfferListMarket *)jarg1;
  arg2 = (size_t)jarg2;
  result = (OTDB::AskData *)(arg1)->GetAskData(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_OfferListMarket_RemoveAskData(void * jarg1, size_t jarg2) {
  unsigned int jresult ;
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (OTDB::OfferListMarket *)jarg1;
  arg2 = (size_t)jarg2;
  result = (bool)(arg1)->RemoveAskData(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OfferListMarket_AddAskData(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  OTDB::AskData *arg2 = 0 ;
  bool result;
  
  arg1 = (OTDB::OfferListMarket *)jarg1;
  arg2 = (OTDB::AskData *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::AskData & type is null");
    return 0;
  } 
  result = (bool)(arg1)->AddAskData(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_OfferListMarket_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::OfferListMarket *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::OfferListMarket *)OTDB::OfferListMarket::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TradeDataMarket(void * jarg1) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  
  arg1 = (OTDB::TradeDataMarket *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_TradeDataMarket_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataMarket *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_TradeDataMarket_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataMarket *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_TradeDataMarket_transaction_id_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataMarket *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->transaction_id = *arg2;
}


SWIGEXPORT char * D_TradeDataMarket_transaction_id_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataMarket *)jarg1;
  result = (std::string *) & ((arg1)->transaction_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_TradeDataMarket_date_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataMarket *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->date = *arg2;
}


SWIGEXPORT char * D_TradeDataMarket_date_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataMarket *)jarg1;
  result = (std::string *) & ((arg1)->date);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_TradeDataMarket_price_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataMarket *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->price = *arg2;
}


SWIGEXPORT char * D_TradeDataMarket_price_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataMarket *)jarg1;
  result = (std::string *) & ((arg1)->price);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_TradeDataMarket_amount_sold_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataMarket *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->amount_sold = *arg2;
}


SWIGEXPORT char * D_TradeDataMarket_amount_sold_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataMarket *)jarg1;
  result = (std::string *) & ((arg1)->amount_sold);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_TradeDataMarket_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::TradeDataMarket *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::TradeDataMarket *)OTDB::TradeDataMarket::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TradeListMarket(void * jarg1) {
  OTDB::TradeListMarket *arg1 = (OTDB::TradeListMarket *) 0 ;
  
  arg1 = (OTDB::TradeListMarket *)jarg1;
  delete arg1;
}


SWIGEXPORT size_t D_TradeListMarket_GetTradeDataMarketCount(void * jarg1) {
  size_t jresult ;
  OTDB::TradeListMarket *arg1 = (OTDB::TradeListMarket *) 0 ;
  size_t result;
  
  arg1 = (OTDB::TradeListMarket *)jarg1;
  result = (arg1)->GetTradeDataMarketCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TradeListMarket_GetTradeDataMarket(void * jarg1, size_t jarg2) {
  void * jresult ;
  OTDB::TradeListMarket *arg1 = (OTDB::TradeListMarket *) 0 ;
  size_t arg2 ;
  OTDB::TradeDataMarket *result = 0 ;
  
  arg1 = (OTDB::TradeListMarket *)jarg1;
  arg2 = (size_t)jarg2;
  result = (OTDB::TradeDataMarket *)(arg1)->GetTradeDataMarket(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TradeListMarket_RemoveTradeDataMarket(void * jarg1, size_t jarg2) {
  unsigned int jresult ;
  OTDB::TradeListMarket *arg1 = (OTDB::TradeListMarket *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (OTDB::TradeListMarket *)jarg1;
  arg2 = (size_t)jarg2;
  result = (bool)(arg1)->RemoveTradeDataMarket(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TradeListMarket_AddTradeDataMarket(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTDB::TradeListMarket *arg1 = (OTDB::TradeListMarket *) 0 ;
  OTDB::TradeDataMarket *arg2 = 0 ;
  bool result;
  
  arg1 = (OTDB::TradeListMarket *)jarg1;
  arg2 = (OTDB::TradeDataMarket *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::TradeDataMarket & type is null");
    return 0;
  } 
  result = (bool)(arg1)->AddTradeDataMarket(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TradeListMarket_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::TradeListMarket *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::TradeListMarket *)OTDB::TradeListMarket::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_OfferDataNym(void * jarg1) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_OfferDataNym_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_valid_from_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->valid_from = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_valid_from_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->valid_from);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_valid_to_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->valid_to = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_valid_to_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->valid_to);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_server_id_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_id = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_server_id_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->server_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_asset_type_id_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->asset_type_id = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_asset_type_id_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->asset_type_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_asset_acct_id_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->asset_acct_id = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_asset_acct_id_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->asset_acct_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_currency_type_id_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->currency_type_id = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_currency_type_id_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->currency_type_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_currency_acct_id_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->currency_acct_id = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_currency_acct_id_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->currency_acct_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_selling_set(void * jarg1, unsigned int jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  bool arg2 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->selling = arg2;
}


SWIGEXPORT unsigned int D_OfferDataNym_selling_get(void * jarg1) {
  unsigned int jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  bool result;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (bool) ((arg1)->selling);
  jresult = result;
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_scale_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->scale = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_scale_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->scale);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_price_per_scale_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->price_per_scale = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_price_per_scale_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->price_per_scale);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_transaction_id_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->transaction_id = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_transaction_id_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->transaction_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_total_assets_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->total_assets = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_total_assets_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->total_assets);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_finished_so_far_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->finished_so_far = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_finished_so_far_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->finished_so_far);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_minimum_increment_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->minimum_increment = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_minimum_increment_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->minimum_increment);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_stop_sign_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->stop_sign = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_stop_sign_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->stop_sign);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_stop_price_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->stop_price = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_stop_price_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->stop_price);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_OfferDataNym_date_set(void * jarg1, char * jarg2) {
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->date = *arg2;
}


SWIGEXPORT char * D_OfferDataNym_date_get(void * jarg1) {
  char * jresult ;
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::OfferDataNym *)jarg1;
  result = (std::string *) & ((arg1)->date);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_OfferDataNym_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::OfferDataNym *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::OfferDataNym *)OTDB::OfferDataNym::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_OfferListNym(void * jarg1) {
  OTDB::OfferListNym *arg1 = (OTDB::OfferListNym *) 0 ;
  
  arg1 = (OTDB::OfferListNym *)jarg1;
  delete arg1;
}


SWIGEXPORT size_t D_OfferListNym_GetOfferDataNymCount(void * jarg1) {
  size_t jresult ;
  OTDB::OfferListNym *arg1 = (OTDB::OfferListNym *) 0 ;
  size_t result;
  
  arg1 = (OTDB::OfferListNym *)jarg1;
  result = (arg1)->GetOfferDataNymCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_OfferListNym_GetOfferDataNym(void * jarg1, size_t jarg2) {
  void * jresult ;
  OTDB::OfferListNym *arg1 = (OTDB::OfferListNym *) 0 ;
  size_t arg2 ;
  OTDB::OfferDataNym *result = 0 ;
  
  arg1 = (OTDB::OfferListNym *)jarg1;
  arg2 = (size_t)jarg2;
  result = (OTDB::OfferDataNym *)(arg1)->GetOfferDataNym(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_OfferListNym_RemoveOfferDataNym(void * jarg1, size_t jarg2) {
  unsigned int jresult ;
  OTDB::OfferListNym *arg1 = (OTDB::OfferListNym *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (OTDB::OfferListNym *)jarg1;
  arg2 = (size_t)jarg2;
  result = (bool)(arg1)->RemoveOfferDataNym(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_OfferListNym_AddOfferDataNym(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTDB::OfferListNym *arg1 = (OTDB::OfferListNym *) 0 ;
  OTDB::OfferDataNym *arg2 = 0 ;
  bool result;
  
  arg1 = (OTDB::OfferListNym *)jarg1;
  arg2 = (OTDB::OfferDataNym *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::OfferDataNym & type is null");
    return 0;
  } 
  result = (bool)(arg1)->AddOfferDataNym(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_OfferListNym_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::OfferListNym *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::OfferListNym *)OTDB::OfferListNym::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TradeDataNym(void * jarg1) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_TradeDataNym_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_TradeDataNym_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_TradeDataNym_transaction_id_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->transaction_id = *arg2;
}


SWIGEXPORT char * D_TradeDataNym_transaction_id_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  result = (std::string *) & ((arg1)->transaction_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_TradeDataNym_completed_count_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->completed_count = *arg2;
}


SWIGEXPORT char * D_TradeDataNym_completed_count_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  result = (std::string *) & ((arg1)->completed_count);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_TradeDataNym_date_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->date = *arg2;
}


SWIGEXPORT char * D_TradeDataNym_date_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  result = (std::string *) & ((arg1)->date);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_TradeDataNym_price_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->price = *arg2;
}


SWIGEXPORT char * D_TradeDataNym_price_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  result = (std::string *) & ((arg1)->price);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_TradeDataNym_amount_sold_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->amount_sold = *arg2;
}


SWIGEXPORT char * D_TradeDataNym_amount_sold_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  result = (std::string *) & ((arg1)->amount_sold);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_TradeDataNym_updated_id_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->updated_id = *arg2;
}


SWIGEXPORT char * D_TradeDataNym_updated_id_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  result = (std::string *) & ((arg1)->updated_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_TradeDataNym_offer_price_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->offer_price = *arg2;
}


SWIGEXPORT char * D_TradeDataNym_offer_price_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  result = (std::string *) & ((arg1)->offer_price);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_TradeDataNym_finished_so_far_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->finished_so_far = *arg2;
}


SWIGEXPORT char * D_TradeDataNym_finished_so_far_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  result = (std::string *) & ((arg1)->finished_so_far);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_TradeDataNym_asset_id_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->asset_id = *arg2;
}


SWIGEXPORT char * D_TradeDataNym_asset_id_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  result = (std::string *) & ((arg1)->asset_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_TradeDataNym_currency_id_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->currency_id = *arg2;
}


SWIGEXPORT char * D_TradeDataNym_currency_id_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  result = (std::string *) & ((arg1)->currency_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_TradeDataNym_currency_paid_set(void * jarg1, char * jarg2) {
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->currency_paid = *arg2;
}


SWIGEXPORT char * D_TradeDataNym_currency_paid_get(void * jarg1) {
  char * jresult ;
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::TradeDataNym *)jarg1;
  result = (std::string *) & ((arg1)->currency_paid);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_TradeDataNym_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::TradeDataNym *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::TradeDataNym *)OTDB::TradeDataNym::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_TradeListNym(void * jarg1) {
  OTDB::TradeListNym *arg1 = (OTDB::TradeListNym *) 0 ;
  
  arg1 = (OTDB::TradeListNym *)jarg1;
  delete arg1;
}


SWIGEXPORT size_t D_TradeListNym_GetTradeDataNymCount(void * jarg1) {
  size_t jresult ;
  OTDB::TradeListNym *arg1 = (OTDB::TradeListNym *) 0 ;
  size_t result;
  
  arg1 = (OTDB::TradeListNym *)jarg1;
  result = (arg1)->GetTradeDataNymCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TradeListNym_GetTradeDataNym(void * jarg1, size_t jarg2) {
  void * jresult ;
  OTDB::TradeListNym *arg1 = (OTDB::TradeListNym *) 0 ;
  size_t arg2 ;
  OTDB::TradeDataNym *result = 0 ;
  
  arg1 = (OTDB::TradeListNym *)jarg1;
  arg2 = (size_t)jarg2;
  result = (OTDB::TradeDataNym *)(arg1)->GetTradeDataNym(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_TradeListNym_RemoveTradeDataNym(void * jarg1, size_t jarg2) {
  unsigned int jresult ;
  OTDB::TradeListNym *arg1 = (OTDB::TradeListNym *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (OTDB::TradeListNym *)jarg1;
  arg2 = (size_t)jarg2;
  result = (bool)(arg1)->RemoveTradeDataNym(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_TradeListNym_AddTradeDataNym(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTDB::TradeListNym *arg1 = (OTDB::TradeListNym *) 0 ;
  OTDB::TradeDataNym *arg2 = 0 ;
  bool result;
  
  arg1 = (OTDB::TradeListNym *)jarg1;
  arg2 = (OTDB::TradeDataNym *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::TradeDataNym & type is null");
    return 0;
  } 
  result = (bool)(arg1)->AddTradeDataNym(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_TradeListNym_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::TradeListNym *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::TradeListNym *)OTDB::TradeListNym::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Acct(void * jarg1) {
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  
  arg1 = (OTDB::Acct *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_Acct_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::Acct *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_Acct_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::Acct *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Acct_acct_id_set(void * jarg1, char * jarg2) {
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::Acct *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->acct_id = *arg2;
}


SWIGEXPORT char * D_Acct_acct_id_get(void * jarg1) {
  char * jresult ;
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::Acct *)jarg1;
  result = (std::string *) & ((arg1)->acct_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Acct_server_id_set(void * jarg1, char * jarg2) {
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::Acct *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_id = *arg2;
}


SWIGEXPORT char * D_Acct_server_id_get(void * jarg1) {
  char * jresult ;
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::Acct *)jarg1;
  result = (std::string *) & ((arg1)->server_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_Acct_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::Acct *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::Acct *)OTDB::Acct::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_BitcoinAcct(void * jarg1) {
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  
  arg1 = (OTDB::BitcoinAcct *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_BitcoinAcct_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BitcoinAcct *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_BitcoinAcct_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BitcoinAcct *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_BitcoinAcct_acct_id_set(void * jarg1, char * jarg2) {
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BitcoinAcct *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->acct_id = *arg2;
}


SWIGEXPORT char * D_BitcoinAcct_acct_id_get(void * jarg1) {
  char * jresult ;
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BitcoinAcct *)jarg1;
  result = (std::string *) & ((arg1)->acct_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_BitcoinAcct_server_id_set(void * jarg1, char * jarg2) {
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BitcoinAcct *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_id = *arg2;
}


SWIGEXPORT char * D_BitcoinAcct_server_id_get(void * jarg1) {
  char * jresult ;
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BitcoinAcct *)jarg1;
  result = (std::string *) & ((arg1)->server_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_BitcoinAcct_bitcoin_acct_name_set(void * jarg1, char * jarg2) {
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BitcoinAcct *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->bitcoin_acct_name = *arg2;
}


SWIGEXPORT char * D_BitcoinAcct_bitcoin_acct_name_get(void * jarg1) {
  char * jresult ;
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BitcoinAcct *)jarg1;
  result = (std::string *) & ((arg1)->bitcoin_acct_name);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_BitcoinAcct_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::BitcoinAcct *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::BitcoinAcct *)OTDB::BitcoinAcct::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_ServerInfo(void * jarg1) {
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  
  arg1 = (OTDB::ServerInfo *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_ServerInfo_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ServerInfo *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_ServerInfo_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ServerInfo *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_ServerInfo_server_id_set(void * jarg1, char * jarg2) {
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ServerInfo *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_id = *arg2;
}


SWIGEXPORT char * D_ServerInfo_server_id_get(void * jarg1) {
  char * jresult ;
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ServerInfo *)jarg1;
  result = (std::string *) & ((arg1)->server_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_ServerInfo_server_type_set(void * jarg1, char * jarg2) {
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ServerInfo *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_type = *arg2;
}


SWIGEXPORT char * D_ServerInfo_server_type_get(void * jarg1) {
  char * jresult ;
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ServerInfo *)jarg1;
  result = (std::string *) & ((arg1)->server_type);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_ServerInfo_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::ServerInfo *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::ServerInfo *)OTDB::ServerInfo::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Server(void * jarg1) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  
  arg1 = (OTDB::Server *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_Server_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::Server *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_Server_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::Server *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Server_server_id_set(void * jarg1, char * jarg2) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::Server *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_id = *arg2;
}


SWIGEXPORT char * D_Server_server_id_get(void * jarg1) {
  char * jresult ;
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::Server *)jarg1;
  result = (std::string *) & ((arg1)->server_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Server_server_type_set(void * jarg1, char * jarg2) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::Server *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_type = *arg2;
}


SWIGEXPORT char * D_Server_server_type_get(void * jarg1) {
  char * jresult ;
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::Server *)jarg1;
  result = (std::string *) & ((arg1)->server_type);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Server_server_host_set(void * jarg1, char * jarg2) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::Server *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_host = *arg2;
}


SWIGEXPORT char * D_Server_server_host_get(void * jarg1) {
  char * jresult ;
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::Server *)jarg1;
  result = (std::string *) & ((arg1)->server_host);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Server_server_port_set(void * jarg1, char * jarg2) {
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::Server *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_port = *arg2;
}


SWIGEXPORT char * D_Server_server_port_get(void * jarg1) {
  char * jresult ;
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::Server *)jarg1;
  result = (std::string *) & ((arg1)->server_port);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_Server_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::Server *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::Server *)OTDB::Server::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_BitcoinServer(void * jarg1) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  
  arg1 = (OTDB::BitcoinServer *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_BitcoinServer_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BitcoinServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_BitcoinServer_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BitcoinServer *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_BitcoinServer_server_id_set(void * jarg1, char * jarg2) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BitcoinServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_id = *arg2;
}


SWIGEXPORT char * D_BitcoinServer_server_id_get(void * jarg1) {
  char * jresult ;
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BitcoinServer *)jarg1;
  result = (std::string *) & ((arg1)->server_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_BitcoinServer_server_type_set(void * jarg1, char * jarg2) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BitcoinServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_type = *arg2;
}


SWIGEXPORT char * D_BitcoinServer_server_type_get(void * jarg1) {
  char * jresult ;
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BitcoinServer *)jarg1;
  result = (std::string *) & ((arg1)->server_type);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_BitcoinServer_server_host_set(void * jarg1, char * jarg2) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BitcoinServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_host = *arg2;
}


SWIGEXPORT char * D_BitcoinServer_server_host_get(void * jarg1) {
  char * jresult ;
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BitcoinServer *)jarg1;
  result = (std::string *) & ((arg1)->server_host);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_BitcoinServer_server_port_set(void * jarg1, char * jarg2) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BitcoinServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_port = *arg2;
}


SWIGEXPORT char * D_BitcoinServer_server_port_get(void * jarg1) {
  char * jresult ;
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BitcoinServer *)jarg1;
  result = (std::string *) & ((arg1)->server_port);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_BitcoinServer_bitcoin_username_set(void * jarg1, char * jarg2) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BitcoinServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->bitcoin_username = *arg2;
}


SWIGEXPORT char * D_BitcoinServer_bitcoin_username_get(void * jarg1) {
  char * jresult ;
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BitcoinServer *)jarg1;
  result = (std::string *) & ((arg1)->bitcoin_username);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_BitcoinServer_bitcoin_password_set(void * jarg1, char * jarg2) {
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::BitcoinServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->bitcoin_password = *arg2;
}


SWIGEXPORT char * D_BitcoinServer_bitcoin_password_get(void * jarg1) {
  char * jresult ;
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::BitcoinServer *)jarg1;
  result = (std::string *) & ((arg1)->bitcoin_password);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_BitcoinServer_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::BitcoinServer *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::BitcoinServer *)OTDB::BitcoinServer::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_RippleServer(void * jarg1) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_RippleServer_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_RippleServer_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_RippleServer_server_id_set(void * jarg1, char * jarg2) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_id = *arg2;
}


SWIGEXPORT char * D_RippleServer_server_id_get(void * jarg1) {
  char * jresult ;
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  result = (std::string *) & ((arg1)->server_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_RippleServer_server_type_set(void * jarg1, char * jarg2) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_type = *arg2;
}


SWIGEXPORT char * D_RippleServer_server_type_get(void * jarg1) {
  char * jresult ;
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  result = (std::string *) & ((arg1)->server_type);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_RippleServer_server_host_set(void * jarg1, char * jarg2) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_host = *arg2;
}


SWIGEXPORT char * D_RippleServer_server_host_get(void * jarg1) {
  char * jresult ;
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  result = (std::string *) & ((arg1)->server_host);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_RippleServer_server_port_set(void * jarg1, char * jarg2) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_port = *arg2;
}


SWIGEXPORT char * D_RippleServer_server_port_get(void * jarg1) {
  char * jresult ;
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  result = (std::string *) & ((arg1)->server_port);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_RippleServer_ripple_username_set(void * jarg1, char * jarg2) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->ripple_username = *arg2;
}


SWIGEXPORT char * D_RippleServer_ripple_username_get(void * jarg1) {
  char * jresult ;
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  result = (std::string *) & ((arg1)->ripple_username);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_RippleServer_ripple_password_set(void * jarg1, char * jarg2) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->ripple_password = *arg2;
}


SWIGEXPORT char * D_RippleServer_ripple_password_get(void * jarg1) {
  char * jresult ;
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  result = (std::string *) & ((arg1)->ripple_password);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_RippleServer_namefield_id_set(void * jarg1, char * jarg2) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->namefield_id = *arg2;
}


SWIGEXPORT char * D_RippleServer_namefield_id_get(void * jarg1) {
  char * jresult ;
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  result = (std::string *) & ((arg1)->namefield_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_RippleServer_passfield_id_set(void * jarg1, char * jarg2) {
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->passfield_id = *arg2;
}


SWIGEXPORT char * D_RippleServer_passfield_id_get(void * jarg1) {
  char * jresult ;
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::RippleServer *)jarg1;
  result = (std::string *) & ((arg1)->passfield_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_RippleServer_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::RippleServer *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::RippleServer *)OTDB::RippleServer::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_LoomServer(void * jarg1) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  
  arg1 = (OTDB::LoomServer *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_LoomServer_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::LoomServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_LoomServer_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::LoomServer *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_LoomServer_server_id_set(void * jarg1, char * jarg2) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::LoomServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_id = *arg2;
}


SWIGEXPORT char * D_LoomServer_server_id_get(void * jarg1) {
  char * jresult ;
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::LoomServer *)jarg1;
  result = (std::string *) & ((arg1)->server_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_LoomServer_server_type_set(void * jarg1, char * jarg2) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::LoomServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_type = *arg2;
}


SWIGEXPORT char * D_LoomServer_server_type_get(void * jarg1) {
  char * jresult ;
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::LoomServer *)jarg1;
  result = (std::string *) & ((arg1)->server_type);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_LoomServer_server_host_set(void * jarg1, char * jarg2) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::LoomServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_host = *arg2;
}


SWIGEXPORT char * D_LoomServer_server_host_get(void * jarg1) {
  char * jresult ;
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::LoomServer *)jarg1;
  result = (std::string *) & ((arg1)->server_host);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_LoomServer_server_port_set(void * jarg1, char * jarg2) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::LoomServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_port = *arg2;
}


SWIGEXPORT char * D_LoomServer_server_port_get(void * jarg1) {
  char * jresult ;
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::LoomServer *)jarg1;
  result = (std::string *) & ((arg1)->server_port);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_LoomServer_loom_username_set(void * jarg1, char * jarg2) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::LoomServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->loom_username = *arg2;
}


SWIGEXPORT char * D_LoomServer_loom_username_get(void * jarg1) {
  char * jresult ;
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::LoomServer *)jarg1;
  result = (std::string *) & ((arg1)->loom_username);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_LoomServer_namefield_id_set(void * jarg1, char * jarg2) {
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::LoomServer *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->namefield_id = *arg2;
}


SWIGEXPORT char * D_LoomServer_namefield_id_get(void * jarg1) {
  char * jresult ;
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::LoomServer *)jarg1;
  result = (std::string *) & ((arg1)->namefield_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_LoomServer_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::LoomServer *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::LoomServer *)OTDB::LoomServer::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_ContactNym(void * jarg1) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  
  arg1 = (OTDB::ContactNym *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_ContactNym_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ContactNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_ContactNym_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ContactNym *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_ContactNym_nym_type_set(void * jarg1, char * jarg2) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ContactNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->nym_type = *arg2;
}


SWIGEXPORT char * D_ContactNym_nym_type_get(void * jarg1) {
  char * jresult ;
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ContactNym *)jarg1;
  result = (std::string *) & ((arg1)->nym_type);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_ContactNym_nym_id_set(void * jarg1, char * jarg2) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ContactNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->nym_id = *arg2;
}


SWIGEXPORT char * D_ContactNym_nym_id_get(void * jarg1) {
  char * jresult ;
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ContactNym *)jarg1;
  result = (std::string *) & ((arg1)->nym_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_ContactNym_public_key_set(void * jarg1, char * jarg2) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ContactNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->public_key = *arg2;
}


SWIGEXPORT char * D_ContactNym_public_key_get(void * jarg1) {
  char * jresult ;
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ContactNym *)jarg1;
  result = (std::string *) & ((arg1)->public_key);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_ContactNym_memo_set(void * jarg1, char * jarg2) {
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ContactNym *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->memo = *arg2;
}


SWIGEXPORT char * D_ContactNym_memo_get(void * jarg1) {
  char * jresult ;
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ContactNym *)jarg1;
  result = (std::string *) & ((arg1)->memo);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT size_t D_ContactNym_GetServerInfoCount(void * jarg1) {
  size_t jresult ;
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  size_t result;
  
  arg1 = (OTDB::ContactNym *)jarg1;
  result = (arg1)->GetServerInfoCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_ContactNym_GetServerInfo(void * jarg1, size_t jarg2) {
  void * jresult ;
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  size_t arg2 ;
  OTDB::ServerInfo *result = 0 ;
  
  arg1 = (OTDB::ContactNym *)jarg1;
  arg2 = (size_t)jarg2;
  result = (OTDB::ServerInfo *)(arg1)->GetServerInfo(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_ContactNym_RemoveServerInfo(void * jarg1, size_t jarg2) {
  unsigned int jresult ;
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (OTDB::ContactNym *)jarg1;
  arg2 = (size_t)jarg2;
  result = (bool)(arg1)->RemoveServerInfo(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_ContactNym_AddServerInfo(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  OTDB::ServerInfo *arg2 = 0 ;
  bool result;
  
  arg1 = (OTDB::ContactNym *)jarg1;
  arg2 = (OTDB::ServerInfo *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::ServerInfo & type is null");
    return 0;
  } 
  result = (bool)(arg1)->AddServerInfo(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_ContactNym_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::ContactNym *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::ContactNym *)OTDB::ContactNym::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_WalletData(void * jarg1) {
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  
  arg1 = (OTDB::WalletData *)jarg1;
  delete arg1;
}


SWIGEXPORT size_t D_WalletData_GetBitcoinServerCount(void * jarg1) {
  size_t jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t result;
  
  arg1 = (OTDB::WalletData *)jarg1;
  result = (arg1)->GetBitcoinServerCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_WalletData_GetBitcoinServer(void * jarg1, size_t jarg2) {
  void * jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  OTDB::BitcoinServer *result = 0 ;
  
  arg1 = (OTDB::WalletData *)jarg1;
  arg2 = (size_t)jarg2;
  result = (OTDB::BitcoinServer *)(arg1)->GetBitcoinServer(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_WalletData_RemoveBitcoinServer(void * jarg1, size_t jarg2) {
  unsigned int jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (OTDB::WalletData *)jarg1;
  arg2 = (size_t)jarg2;
  result = (bool)(arg1)->RemoveBitcoinServer(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_WalletData_AddBitcoinServer(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  OTDB::BitcoinServer *arg2 = 0 ;
  bool result;
  
  arg1 = (OTDB::WalletData *)jarg1;
  arg2 = (OTDB::BitcoinServer *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::BitcoinServer & type is null");
    return 0;
  } 
  result = (bool)(arg1)->AddBitcoinServer(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_WalletData_GetBitcoinAcctCount(void * jarg1) {
  size_t jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t result;
  
  arg1 = (OTDB::WalletData *)jarg1;
  result = (arg1)->GetBitcoinAcctCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_WalletData_GetBitcoinAcct(void * jarg1, size_t jarg2) {
  void * jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  OTDB::BitcoinAcct *result = 0 ;
  
  arg1 = (OTDB::WalletData *)jarg1;
  arg2 = (size_t)jarg2;
  result = (OTDB::BitcoinAcct *)(arg1)->GetBitcoinAcct(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_WalletData_RemoveBitcoinAcct(void * jarg1, size_t jarg2) {
  unsigned int jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (OTDB::WalletData *)jarg1;
  arg2 = (size_t)jarg2;
  result = (bool)(arg1)->RemoveBitcoinAcct(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_WalletData_AddBitcoinAcct(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  OTDB::BitcoinAcct *arg2 = 0 ;
  bool result;
  
  arg1 = (OTDB::WalletData *)jarg1;
  arg2 = (OTDB::BitcoinAcct *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::BitcoinAcct & type is null");
    return 0;
  } 
  result = (bool)(arg1)->AddBitcoinAcct(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_WalletData_GetRippleServerCount(void * jarg1) {
  size_t jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t result;
  
  arg1 = (OTDB::WalletData *)jarg1;
  result = (arg1)->GetRippleServerCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_WalletData_GetRippleServer(void * jarg1, size_t jarg2) {
  void * jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  OTDB::RippleServer *result = 0 ;
  
  arg1 = (OTDB::WalletData *)jarg1;
  arg2 = (size_t)jarg2;
  result = (OTDB::RippleServer *)(arg1)->GetRippleServer(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_WalletData_RemoveRippleServer(void * jarg1, size_t jarg2) {
  unsigned int jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (OTDB::WalletData *)jarg1;
  arg2 = (size_t)jarg2;
  result = (bool)(arg1)->RemoveRippleServer(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_WalletData_AddRippleServer(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  OTDB::RippleServer *arg2 = 0 ;
  bool result;
  
  arg1 = (OTDB::WalletData *)jarg1;
  arg2 = (OTDB::RippleServer *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::RippleServer & type is null");
    return 0;
  } 
  result = (bool)(arg1)->AddRippleServer(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_WalletData_GetLoomServerCount(void * jarg1) {
  size_t jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t result;
  
  arg1 = (OTDB::WalletData *)jarg1;
  result = (arg1)->GetLoomServerCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_WalletData_GetLoomServer(void * jarg1, size_t jarg2) {
  void * jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  OTDB::LoomServer *result = 0 ;
  
  arg1 = (OTDB::WalletData *)jarg1;
  arg2 = (size_t)jarg2;
  result = (OTDB::LoomServer *)(arg1)->GetLoomServer(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_WalletData_RemoveLoomServer(void * jarg1, size_t jarg2) {
  unsigned int jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (OTDB::WalletData *)jarg1;
  arg2 = (size_t)jarg2;
  result = (bool)(arg1)->RemoveLoomServer(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_WalletData_AddLoomServer(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  OTDB::LoomServer *arg2 = 0 ;
  bool result;
  
  arg1 = (OTDB::WalletData *)jarg1;
  arg2 = (OTDB::LoomServer *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::LoomServer & type is null");
    return 0;
  } 
  result = (bool)(arg1)->AddLoomServer(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_WalletData_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::WalletData *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::WalletData *)OTDB::WalletData::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_ContactAcct(void * jarg1) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_ContactAcct_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_ContactAcct_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_ContactAcct_server_type_set(void * jarg1, char * jarg2) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_type = *arg2;
}


SWIGEXPORT char * D_ContactAcct_server_type_get(void * jarg1) {
  char * jresult ;
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  result = (std::string *) & ((arg1)->server_type);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_ContactAcct_server_id_set(void * jarg1, char * jarg2) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->server_id = *arg2;
}


SWIGEXPORT char * D_ContactAcct_server_id_get(void * jarg1) {
  char * jresult ;
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  result = (std::string *) & ((arg1)->server_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_ContactAcct_asset_type_id_set(void * jarg1, char * jarg2) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->asset_type_id = *arg2;
}


SWIGEXPORT char * D_ContactAcct_asset_type_id_get(void * jarg1) {
  char * jresult ;
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  result = (std::string *) & ((arg1)->asset_type_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_ContactAcct_acct_id_set(void * jarg1, char * jarg2) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->acct_id = *arg2;
}


SWIGEXPORT char * D_ContactAcct_acct_id_get(void * jarg1) {
  char * jresult ;
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  result = (std::string *) & ((arg1)->acct_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_ContactAcct_nym_id_set(void * jarg1, char * jarg2) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->nym_id = *arg2;
}


SWIGEXPORT char * D_ContactAcct_nym_id_get(void * jarg1) {
  char * jresult ;
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  result = (std::string *) & ((arg1)->nym_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_ContactAcct_memo_set(void * jarg1, char * jarg2) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->memo = *arg2;
}


SWIGEXPORT char * D_ContactAcct_memo_get(void * jarg1) {
  char * jresult ;
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  result = (std::string *) & ((arg1)->memo);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_ContactAcct_public_key_set(void * jarg1, char * jarg2) {
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->public_key = *arg2;
}


SWIGEXPORT char * D_ContactAcct_public_key_get(void * jarg1) {
  char * jresult ;
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::ContactAcct *)jarg1;
  result = (std::string *) & ((arg1)->public_key);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * D_ContactAcct_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::ContactAcct *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::ContactAcct *)OTDB::ContactAcct::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_Contact(void * jarg1) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  
  arg1 = (OTDB::Contact *)jarg1;
  delete arg1;
}


SWIGEXPORT void D_Contact_gui_label_set(void * jarg1, char * jarg2) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::Contact *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->gui_label = *arg2;
}


SWIGEXPORT char * D_Contact_gui_label_get(void * jarg1) {
  char * jresult ;
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::Contact *)jarg1;
  result = (std::string *) & ((arg1)->gui_label);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Contact_contact_id_set(void * jarg1, char * jarg2) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::Contact *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->contact_id = *arg2;
}


SWIGEXPORT char * D_Contact_contact_id_get(void * jarg1) {
  char * jresult ;
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::Contact *)jarg1;
  result = (std::string *) & ((arg1)->contact_id);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Contact_email_set(void * jarg1, char * jarg2) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::Contact *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->email = *arg2;
}


SWIGEXPORT char * D_Contact_email_get(void * jarg1) {
  char * jresult ;
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::Contact *)jarg1;
  result = (std::string *) & ((arg1)->email);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Contact_memo_set(void * jarg1, char * jarg2) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::Contact *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->memo = *arg2;
}


SWIGEXPORT char * D_Contact_memo_get(void * jarg1) {
  char * jresult ;
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::Contact *)jarg1;
  result = (std::string *) & ((arg1)->memo);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void D_Contact_public_key_set(void * jarg1, char * jarg2) {
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (OTDB::Contact *)jarg1;
  if (!jarg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "null string");
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->public_key = *arg2;
}


SWIGEXPORT char * D_Contact_public_key_get(void * jarg1) {
  char * jresult ;
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (OTDB::Contact *)jarg1;
  result = (std::string *) & ((arg1)->public_key);
  jresult = SWIG_d_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT size_t D_Contact_GetContactNymCount(void * jarg1) {
  size_t jresult ;
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t result;
  
  arg1 = (OTDB::Contact *)jarg1;
  result = (arg1)->GetContactNymCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_Contact_GetContactNym(void * jarg1, size_t jarg2) {
  void * jresult ;
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t arg2 ;
  OTDB::ContactNym *result = 0 ;
  
  arg1 = (OTDB::Contact *)jarg1;
  arg2 = (size_t)jarg2;
  result = (OTDB::ContactNym *)(arg1)->GetContactNym(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_Contact_RemoveContactNym(void * jarg1, size_t jarg2) {
  unsigned int jresult ;
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (OTDB::Contact *)jarg1;
  arg2 = (size_t)jarg2;
  result = (bool)(arg1)->RemoveContactNym(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Contact_AddContactNym(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  OTDB::ContactNym *arg2 = 0 ;
  bool result;
  
  arg1 = (OTDB::Contact *)jarg1;
  arg2 = (OTDB::ContactNym *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::ContactNym & type is null");
    return 0;
  } 
  result = (bool)(arg1)->AddContactNym(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT size_t D_Contact_GetContactAcctCount(void * jarg1) {
  size_t jresult ;
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t result;
  
  arg1 = (OTDB::Contact *)jarg1;
  result = (arg1)->GetContactAcctCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_Contact_GetContactAcct(void * jarg1, size_t jarg2) {
  void * jresult ;
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t arg2 ;
  OTDB::ContactAcct *result = 0 ;
  
  arg1 = (OTDB::Contact *)jarg1;
  arg2 = (size_t)jarg2;
  result = (OTDB::ContactAcct *)(arg1)->GetContactAcct(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_Contact_RemoveContactAcct(void * jarg1, size_t jarg2) {
  unsigned int jresult ;
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (OTDB::Contact *)jarg1;
  arg2 = (size_t)jarg2;
  result = (bool)(arg1)->RemoveContactAcct(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_Contact_AddContactAcct(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  OTDB::ContactAcct *arg2 = 0 ;
  bool result;
  
  arg1 = (OTDB::Contact *)jarg1;
  arg2 = (OTDB::ContactAcct *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::ContactAcct & type is null");
    return 0;
  } 
  result = (bool)(arg1)->AddContactAcct(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_Contact_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::Contact *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::Contact *)OTDB::Contact::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT void D_delete_AddressBook(void * jarg1) {
  OTDB::AddressBook *arg1 = (OTDB::AddressBook *) 0 ;
  
  arg1 = (OTDB::AddressBook *)jarg1;
  delete arg1;
}


SWIGEXPORT size_t D_AddressBook_GetContactCount(void * jarg1) {
  size_t jresult ;
  OTDB::AddressBook *arg1 = (OTDB::AddressBook *) 0 ;
  size_t result;
  
  arg1 = (OTDB::AddressBook *)jarg1;
  result = (arg1)->GetContactCount();
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_AddressBook_GetContact(void * jarg1, size_t jarg2) {
  void * jresult ;
  OTDB::AddressBook *arg1 = (OTDB::AddressBook *) 0 ;
  size_t arg2 ;
  OTDB::Contact *result = 0 ;
  
  arg1 = (OTDB::AddressBook *)jarg1;
  arg2 = (size_t)jarg2;
  result = (OTDB::Contact *)(arg1)->GetContact(arg2);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_AddressBook_RemoveContact(void * jarg1, size_t jarg2) {
  unsigned int jresult ;
  OTDB::AddressBook *arg1 = (OTDB::AddressBook *) 0 ;
  size_t arg2 ;
  bool result;
  
  arg1 = (OTDB::AddressBook *)jarg1;
  arg2 = (size_t)jarg2;
  result = (bool)(arg1)->RemoveContact(arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT unsigned int D_AddressBook_AddContact(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  OTDB::AddressBook *arg1 = (OTDB::AddressBook *) 0 ;
  OTDB::Contact *arg2 = 0 ;
  bool result;
  
  arg1 = (OTDB::AddressBook *)jarg1;
  arg2 = (OTDB::Contact *)jarg2;
  if (!arg2) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTDB::Contact & type is null");
    return 0;
  } 
  result = (bool)(arg1)->AddContact(*arg2);
  jresult = result;
  return jresult;
}


SWIGEXPORT void * D_AddressBook_ot_dynamic_cast(void * jarg1) {
  void * jresult ;
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::AddressBook *result = 0 ;
  
  arg1 = (OTDB::Storable *)jarg1;
  result = (OTDB::AddressBook *)OTDB::AddressBook::ot_dynamic_cast(arg1);
  jresult = (void *)result;
  return jresult;
}


SWIGEXPORT unsigned int D_OT_API_Set_PasswordCallback(void * jarg1) {
  unsigned int jresult ;
  OTCaller *arg1 = 0 ;
  bool result;
  
  arg1 = (OTCaller *)jarg1;
  if (!arg1) {
    SWIG_DSetPendingException(SWIG_DIllegalArgumentException, "OTCaller & type is null");
    return 0;
  } 
  result = (bool)OT_API_Set_PasswordCallback(*arg1);
  jresult = result;
  return jresult;
}


SWIGEXPORT OTDB::Storable * D_OTDBString_Upcast(OTDB::Storable *objectRef) {
    return (OTDB::Storable *)objectRef;
}

SWIGEXPORT OTDB::Storable * D_Blob_Upcast(OTDB::Storable *objectRef) {
    return (OTDB::Storable *)objectRef;
}

SWIGEXPORT OTDB::Storable * D_StringMap_Upcast(OTDB::Storable *objectRef) {
    return (OTDB::Storable *)objectRef;
}

SWIGEXPORT OTDB::Storable * D_Displayable_Upcast(OTDB::Storable *objectRef) {
    return (OTDB::Storable *)objectRef;
}

SWIGEXPORT OTDB::Displayable * D_MarketData_Upcast(OTDB::Displayable *objectRef) {
    return (OTDB::Displayable *)objectRef;
}

SWIGEXPORT OTDB::Storable * D_MarketList_Upcast(OTDB::Storable *objectRef) {
    return (OTDB::Storable *)objectRef;
}

SWIGEXPORT OTDB::Displayable * D_OfferDataMarket_Upcast(OTDB::Displayable *objectRef) {
    return (OTDB::Displayable *)objectRef;
}

SWIGEXPORT OTDB::OfferDataMarket * D_BidData_Upcast(OTDB::OfferDataMarket *objectRef) {
    return (OTDB::OfferDataMarket *)objectRef;
}

SWIGEXPORT OTDB::OfferDataMarket * D_AskData_Upcast(OTDB::OfferDataMarket *objectRef) {
    return (OTDB::OfferDataMarket *)objectRef;
}

SWIGEXPORT OTDB::Storable * D_OfferListMarket_Upcast(OTDB::Storable *objectRef) {
    return (OTDB::Storable *)objectRef;
}

SWIGEXPORT OTDB::Displayable * D_TradeDataMarket_Upcast(OTDB::Displayable *objectRef) {
    return (OTDB::Displayable *)objectRef;
}

SWIGEXPORT OTDB::Storable * D_TradeListMarket_Upcast(OTDB::Storable *objectRef) {
    return (OTDB::Storable *)objectRef;
}

SWIGEXPORT OTDB::Displayable * D_OfferDataNym_Upcast(OTDB::Displayable *objectRef) {
    return (OTDB::Displayable *)objectRef;
}

SWIGEXPORT OTDB::Storable * D_OfferListNym_Upcast(OTDB::Storable *objectRef) {
    return (OTDB::Storable *)objectRef;
}

SWIGEXPORT OTDB::Displayable * D_TradeDataNym_Upcast(OTDB::Displayable *objectRef) {
    return (OTDB::Displayable *)objectRef;
}

SWIGEXPORT OTDB::Storable * D_TradeListNym_Upcast(OTDB::Storable *objectRef) {
    return (OTDB::Storable *)objectRef;
}

SWIGEXPORT OTDB::Displayable * D_Acct_Upcast(OTDB::Displayable *objectRef) {
    return (OTDB::Displayable *)objectRef;
}

SWIGEXPORT OTDB::Acct * D_BitcoinAcct_Upcast(OTDB::Acct *objectRef) {
    return (OTDB::Acct *)objectRef;
}

SWIGEXPORT OTDB::Displayable * D_ServerInfo_Upcast(OTDB::Displayable *objectRef) {
    return (OTDB::Displayable *)objectRef;
}

SWIGEXPORT OTDB::ServerInfo * D_Server_Upcast(OTDB::ServerInfo *objectRef) {
    return (OTDB::ServerInfo *)objectRef;
}

SWIGEXPORT OTDB::Server * D_BitcoinServer_Upcast(OTDB::Server *objectRef) {
    return (OTDB::Server *)objectRef;
}

SWIGEXPORT OTDB::Server * D_RippleServer_Upcast(OTDB::Server *objectRef) {
    return (OTDB::Server *)objectRef;
}

SWIGEXPORT OTDB::Server * D_LoomServer_Upcast(OTDB::Server *objectRef) {
    return (OTDB::Server *)objectRef;
}

SWIGEXPORT OTDB::Displayable * D_ContactNym_Upcast(OTDB::Displayable *objectRef) {
    return (OTDB::Displayable *)objectRef;
}

SWIGEXPORT OTDB::Storable * D_WalletData_Upcast(OTDB::Storable *objectRef) {
    return (OTDB::Storable *)objectRef;
}

SWIGEXPORT OTDB::Displayable * D_ContactAcct_Upcast(OTDB::Displayable *objectRef) {
    return (OTDB::Displayable *)objectRef;
}

SWIGEXPORT OTDB::Displayable * D_Contact_Upcast(OTDB::Displayable *objectRef) {
    return (OTDB::Displayable *)objectRef;
}

SWIGEXPORT OTDB::Storable * D_AddressBook_Upcast(OTDB::Storable *objectRef) {
    return (OTDB::Storable *)objectRef;
}

#ifdef __cplusplus
}
#endif

