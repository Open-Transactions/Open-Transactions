/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// source: swig\otapi\OTAPI.i

#define SWIGMODULE otapi
#define SWIG_DIRECTORS

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>



typedef long long intgo;
typedef unsigned long long uintgo;



typedef struct { char *p; intgo n; } _gostring_;
typedef struct { void* array; intgo len; intgo cap; } _goslice_;




#define swiggo_size_assert_eq(x, y, name) typedef char name[(x-y)*(x-y)*-2+1];
#define swiggo_size_assert(t, n) swiggo_size_assert_eq(sizeof(t), n, swiggo_sizeof_##t##_is_not_##n)

swiggo_size_assert(char, 1)
swiggo_size_assert(short, 2)
swiggo_size_assert(int, 4)
typedef long long swiggo_long_long;
swiggo_size_assert(swiggo_long_long, 8)
swiggo_size_assert(float, 4)
swiggo_size_assert(double, 8)

#ifdef __cplusplus
extern "C" {
#endif
extern void crosscall2(void (*fn)(void *, int), void *, int);
extern void _cgo_allocate(void *, int);
extern void _cgo_panic(void *, int);
#ifdef __cplusplus
}
#endif

static void *_swig_goallocate(size_t len) {
  struct {
    size_t len;
    void *ret;
  } a;
  a.len = len;
  crosscall2(_cgo_allocate, &a, (int) sizeof a);
  return a.ret;
}

static void _swig_gopanic(const char *p) {
  struct {
    const char *p;
  } a;
  a.p = p;
  crosscall2(_cgo_panic, &a, (int) sizeof a);
}




static _gostring_ _swig_makegostring(const char *p, size_t l) {
  _gostring_ ret;
  ret.p = (char*)_swig_goallocate(l + 1);
  memcpy(ret.p, p, l);
  ret.n = l;
  return ret;
}

#define SWIG_contract_assert(expr, msg) \
  if (!(expr)) { _swig_gopanic(msg); } else


#include <inttypes.h>


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <vector>
#include <stdexcept>


#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>



#ifndef IMPORT
#define IMPORT
#endif

#include <string>
#include <vector>
#include <map>

#include "../../include/otlib/OTPassword.hpp"
#include "../../include/otapi/OTAPI.hpp"
#include "../../include/otapi/OT_ME.hpp"
#include "../../include/otlib/OTStorage.hpp"
#include "../../include/otlib/OTAsymmetricKey.hpp"


SWIGINTERN std::vector< unsigned char >::const_reference std_vector_Sl_unsigned_SS_char_Sg__get(std::vector< unsigned char > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_unsigned_SS_char_Sg__set(std::vector< unsigned char > *self,int i,std::vector< unsigned char >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::string const &std_map_Sl_std_string_Sc_std_string_Sg__get(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    return i->second;
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__set(std::map< std::string,std::string > *self,std::string const &key,std::string const &x){
                (*self)[key] = x;
            }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__del(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                if (i != self->end())
                    self->erase(i);
                else
                    throw std::out_of_range("key not found");
            }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__has_key(std::map< std::string,std::string > *self,std::string const &key){
                std::map<std::string,std::string >::iterator i = self->find(key);
                return i != self->end();
            }

	using namespace OTDB;
	

// C++ director class methods.
#include "OTAPI-go.hpp"

SwigDirector_OTCallback::SwigDirector_OTCallback(void *swig_p)
    : OTCallback(),
      go_val(swig_p)
{ }

extern "C" void _swiggo_wrap_DeleteDirector_OTCallback(void*, int);
SwigDirector_OTCallback::~SwigDirector_OTCallback()
{
  struct { void *p; } a;
  a.p = go_val;
  crosscall2(_swiggo_wrap_DeleteDirector_OTCallback, &a, (int) sizeof a);
}

extern "C" void _wrap_Swig_DirectorOTCallback_callback_runOne(void*, int);
void SwigDirector_OTCallback::runOne(char const *szDisplay, OTPassword &theOutput) {
  struct {
    void *go_val;
    _gostring_ arg2;
    OTPassword *arg3;
  } swig_a;
  swig_a.go_val = go_val;
  
  swig_a.arg2 = _swig_makegostring((char*)szDisplay, szDisplay ? strlen((char*)szDisplay) : 0);
  
  swig_a.arg3 = (OTPassword *)&theOutput; 
  crosscall2(_wrap_Swig_DirectorOTCallback_callback_runOne, &swig_a, (int) sizeof swig_a);
}

extern "C" void _wrap_Swig_DirectorOTCallback_callback_runTwo(void*, int);
void SwigDirector_OTCallback::runTwo(char const *szDisplay, OTPassword &theOutput) {
  struct {
    void *go_val;
    _gostring_ arg2;
    OTPassword *arg3;
  } swig_a;
  swig_a.go_val = go_val;
  
  swig_a.arg2 = _swig_makegostring((char*)szDisplay, szDisplay ? strlen((char*)szDisplay) : 0);
  
  swig_a.arg3 = (OTPassword *)&theOutput; 
  crosscall2(_wrap_Swig_DirectorOTCallback_callback_runTwo, &swig_a, (int) sizeof swig_a);
}

#ifdef __cplusplus
extern "C" {
#endif

void
_wrap_imaxdiv_t_quot_set(void *swig_v)
{
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  
  struct swigargs {
    imaxdiv_t *arg1;
    long long arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(imaxdiv_t **)&swig_a->arg1; 
  arg2 = (long long)swig_a->arg2; 
  
  if (arg1) (arg1)->quot = arg2;
  
}


void
_wrap_imaxdiv_t_quot_get(void *swig_v)
{
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long result;
  
  struct swigargs {
    imaxdiv_t *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(imaxdiv_t **)&swig_a->arg1; 
  
  result = (long long) ((arg1)->quot);
  swig_a->result = result; 
}


void
_wrap_imaxdiv_t_rem_set(void *swig_v)
{
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long arg2 ;
  
  struct swigargs {
    imaxdiv_t *arg1;
    long long arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(imaxdiv_t **)&swig_a->arg1; 
  arg2 = (long long)swig_a->arg2; 
  
  if (arg1) (arg1)->rem = arg2;
  
}


void
_wrap_imaxdiv_t_rem_get(void *swig_v)
{
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  long long result;
  
  struct swigargs {
    imaxdiv_t *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(imaxdiv_t **)&swig_a->arg1; 
  
  result = (long long) ((arg1)->rem);
  swig_a->result = result; 
}


void
_wrap_new_imaxdiv_t(void *swig_v)
{
  imaxdiv_t *result = 0 ;
  
  struct swigargs {
    long : 0;
    imaxdiv_t *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (imaxdiv_t *)new imaxdiv_t();
  *(imaxdiv_t **)&swig_a->result = result; 
}


void
_wrap_delete_imaxdiv_t(void *swig_v)
{
  imaxdiv_t *arg1 = (imaxdiv_t *) 0 ;
  
  struct swigargs {
    imaxdiv_t *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(imaxdiv_t **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_imaxabs(void *swig_v)
{
  intmax_t arg1 ;
  intmax_t result;
  
  struct swigargs {
    long long arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (intmax_t)swig_a->arg1; 
  
  result = (intmax_t)imaxabs(arg1);
  swig_a->result = result; 
}


void
_wrap_imaxdiv(void *swig_v)
{
  intmax_t arg1 ;
  intmax_t arg2 ;
  imaxdiv_t result;
  
  struct swigargs {
    long long arg1;
    long long arg2;
    long : 0;
    imaxdiv_t *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (intmax_t)swig_a->arg1; 
  arg2 = (intmax_t)swig_a->arg2; 
  
  result = imaxdiv(arg1,arg2);
  *(imaxdiv_t **)&swig_a->result = new imaxdiv_t(result); 
}


void
_wrap_new_VectorUnsignedChar__SWIG_0(void *swig_v)
{
  std::vector< unsigned char > *result = 0 ;
  
  struct swigargs {
    long : 0;
    std::vector< unsigned char > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >();
  *(std::vector< unsigned char > **)&swig_a->result = result; 
}


void
_wrap_new_VectorUnsignedChar__SWIG_1(void *swig_v)
{
  std::vector< unsigned char >::size_type arg1 ;
  std::vector< unsigned char > *result = 0 ;
  
  struct swigargs {
    long long arg1;
    long : 0;
    std::vector< unsigned char > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (size_t)swig_a->arg1; 
  
  result = (std::vector< unsigned char > *)new std::vector< unsigned char >(arg1);
  *(std::vector< unsigned char > **)&swig_a->result = result; 
}


void
_wrap_VectorUnsignedChar_size(void *swig_v)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  struct swigargs {
    std::vector< unsigned char > *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< unsigned char > **)&swig_a->arg1; 
  
  result = ((std::vector< unsigned char > const *)arg1)->size();
  swig_a->result = result; 
}


void
_wrap_VectorUnsignedChar_capacity(void *swig_v)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type result;
  
  struct swigargs {
    std::vector< unsigned char > *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< unsigned char > **)&swig_a->arg1; 
  
  result = ((std::vector< unsigned char > const *)arg1)->capacity();
  swig_a->result = result; 
}


void
_wrap_VectorUnsignedChar_reserve(void *swig_v)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::size_type arg2 ;
  
  struct swigargs {
    std::vector< unsigned char > *arg1;
    long long arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< unsigned char > **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  (arg1)->reserve(arg2);
  
}


void
_wrap_VectorUnsignedChar_isEmpty(void *swig_v)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  bool result;
  
  struct swigargs {
    std::vector< unsigned char > *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< unsigned char > **)&swig_a->arg1; 
  
  result = (bool)((std::vector< unsigned char > const *)arg1)->empty();
  swig_a->result = result; 
}


void
_wrap_VectorUnsignedChar_clear(void *swig_v)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  struct swigargs {
    std::vector< unsigned char > *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< unsigned char > **)&swig_a->arg1; 
  
  (arg1)->clear();
  
}


void
_wrap_VectorUnsignedChar_add(void *swig_v)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  std::vector< unsigned char >::value_type *arg2 = 0 ;
  
  struct swigargs {
    std::vector< unsigned char > *arg1;
    unsigned char arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< unsigned char > **)&swig_a->arg1; 
  arg2 = (std::vector< unsigned char >::value_type *)&swig_a->arg2; 
  
  (arg1)->push_back((std::vector< unsigned char >::value_type const &)*arg2);
  
}


void
_wrap_VectorUnsignedChar_get(void *swig_v)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *result = 0 ;
  
  struct swigargs {
    std::vector< unsigned char > *arg1;
    intgo arg2;
    long : 0;
    unsigned char result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< unsigned char > **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  
  try {
    result = (std::vector< unsigned char >::value_type *) &std_vector_Sl_unsigned_SS_char_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  swig_a->result = (unsigned char)*result; 
}


void
_wrap_VectorUnsignedChar_set(void *swig_v)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  int arg2 ;
  std::vector< unsigned char >::value_type *arg3 = 0 ;
  
  struct swigargs {
    std::vector< unsigned char > *arg1;
    intgo arg2;
    unsigned char arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< unsigned char > **)&swig_a->arg1; 
  arg2 = (int)swig_a->arg2; 
  arg3 = (std::vector< unsigned char >::value_type *)&swig_a->arg3; 
  
  try {
    std_vector_Sl_unsigned_SS_char_Sg__set(arg1,arg2,(unsigned char const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  
}


void
_wrap_delete_VectorUnsignedChar(void *swig_v)
{
  std::vector< unsigned char > *arg1 = (std::vector< unsigned char > *) 0 ;
  
  struct swigargs {
    std::vector< unsigned char > *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::vector< unsigned char > **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_new_MapStringString__SWIG_0(void *swig_v)
{
  std::map< std::string,std::string > *result = 0 ;
  
  struct swigargs {
    long : 0;
    std::map< std::string,std::string > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  *(std::map< std::string,std::string > **)&swig_a->result = result; 
}


void
_wrap_new_MapStringString__SWIG_1(void *swig_v)
{
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  struct swigargs {
    std::map< std::string,std::string > *arg1;
    long : 0;
    std::map< std::string,std::string > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::map< std::string,std::string > **)&swig_a->arg1; 
  
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  *(std::map< std::string,std::string > **)&swig_a->result = result; 
}


void
_wrap_MapStringString_size(void *swig_v)
{
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  unsigned int result;
  
  struct swigargs {
    std::map< std::string,std::string > *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::map< std::string,std::string > **)&swig_a->arg1; 
  
  result = (unsigned int)((std::map< std::string,std::string > const *)arg1)->size();
  swig_a->result = result; 
}


void
_wrap_MapStringString_empty(void *swig_v)
{
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  struct swigargs {
    std::map< std::string,std::string > *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::map< std::string,std::string > **)&swig_a->arg1; 
  
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  swig_a->result = result; 
}


void
_wrap_MapStringString_clear(void *swig_v)
{
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  struct swigargs {
    std::map< std::string,std::string > *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::map< std::string,std::string > **)&swig_a->arg1; 
  
  (arg1)->clear();
  
}


void
_wrap_MapStringString_get(void *swig_v)
{
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    std::map< std::string,std::string > *arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::map< std::string,std::string > **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  try {
    result = (std::string *) &std_map_Sl_std_string_Sc_std_string_Sg__get(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MapStringString_set(void *swig_v)
{
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  struct swigargs {
    std::map< std::string,std::string > *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::map< std::string,std::string > **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std_map_Sl_std_string_Sc_std_string_Sg__set(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  
}


void
_wrap_MapStringString_del(void *swig_v)
{
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    std::map< std::string,std::string > *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::map< std::string,std::string > **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  try {
    std_map_Sl_std_string_Sc_std_string_Sg__del(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    _swig_gopanic((&_e)->what());
  }
  
  
}


void
_wrap_MapStringString_has_key(void *swig_v)
{
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    std::map< std::string,std::string > *arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::map< std::string,std::string > **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__has_key(arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_delete_MapStringString(void *swig_v)
{
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  struct swigargs {
    std::map< std::string,std::string > *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::map< std::string,std::string > **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_DEFAULT_SIZE_OTPassword(void *swig_v)
{
  OTPassword::BlockSize result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTPassword::DEFAULT_SIZE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_LARGER_SIZE_OTPassword(void *swig_v)
{
  OTPassword::BlockSize result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTPassword::LARGER_SIZE;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_OTPassword_m_theBlockSize_get(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  OTPassword::BlockSize result;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (OTPassword::BlockSize)(OTPassword::BlockSize) ((arg1)->m_theBlockSize);
  swig_a->result = (intgo)result; 
}


void
_wrap_OTPassword_isPassword(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  bool result;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (bool)((OTPassword const *)arg1)->isPassword();
  swig_a->result = result; 
}


void
_wrap_OTPassword_getPassword_uint8(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint8_t *result = 0 ;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (uint8_t *)((OTPassword const *)arg1)->getPassword_uint8();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_OTPassword_getPassword(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (char *)((OTPassword const *)arg1)->getPassword();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_OTPassword_getPasswordWritable(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint8_t *result = 0 ;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (uint8_t *)(arg1)->getPasswordWritable();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_OTPassword_getPasswordWritable_char(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (char *)(arg1)->getPasswordWritable_char();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_OTPassword_setPassword(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  int32_t result;
  
  struct swigargs {
    OTPassword *arg1;
    _gostring_ arg2;
    intgo arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  arg3 = (int32_t)swig_a->arg3; 
  
  result = (int32_t)(arg1)->setPassword((char const *)arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_OTPassword_setPassword_uint8(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint8_t *arg2 = (uint8_t *) 0 ;
  uint32_t arg3 ;
  int32_t result;
  
  struct swigargs {
    OTPassword *arg1;
    _gostring_ arg2;
    intgo arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  arg2 = (uint8_t *)swig_a->arg2.p; 
  arg3 = (uint32_t)swig_a->arg3; 
  
  result = (int32_t)(arg1)->setPassword_uint8((uint8_t const *)arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_OTPassword_addChar(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint8_t arg2 ;
  bool result;
  
  struct swigargs {
    OTPassword *arg1;
    char arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  arg2 = (uint8_t)swig_a->arg2; 
  
  result = (bool)(arg1)->addChar(arg2);
  swig_a->result = result; 
}


void
_wrap_OTPassword_randomizePassword__SWIG_0(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint32_t arg2 ;
  int32_t result;
  
  struct swigargs {
    OTPassword *arg1;
    intgo arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  arg2 = (uint32_t)swig_a->arg2; 
  
  result = (int32_t)(arg1)->randomizePassword(arg2);
  swig_a->result = result; 
}


void
_wrap_OTPassword_randomizePassword__SWIG_1(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  int32_t result;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (int32_t)(arg1)->randomizePassword();
  swig_a->result = result; 
}


void
_wrap_OTPassword_randomizePassword_uint8(void *swig_v)
{
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (uint8_t *)swig_a->arg1.p; 
  arg2 = (uint32_t)swig_a->arg2; 
  
  result = (bool)OTPassword::randomizePassword_uint8(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_OTPassword_randomizePassword__SWIG_2(void *swig_v)
{
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (char *)swig_a->arg1.p; 
  arg2 = (uint32_t)swig_a->arg2; 
  
  result = (bool)OTPassword::randomizePassword(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_OTPassword_isMemory(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  bool result;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (bool)((OTPassword const *)arg1)->isMemory();
  swig_a->result = result; 
}


void
_wrap_OTPassword_getMemory(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (void *)((OTPassword const *)arg1)->getMemory();
  *(void **)&swig_a->result = result; 
}


void
_wrap_OTPassword_getMemory_uint8(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint8_t *result = 0 ;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (uint8_t *)((OTPassword const *)arg1)->getMemory_uint8();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_OTPassword_getMemoryWritable(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  void *result = 0 ;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (void *)(arg1)->getMemoryWritable();
  *(void **)&swig_a->result = result; 
}


void
_wrap_OTPassword_setMemory(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  int32_t result;
  
  struct swigargs {
    OTPassword *arg1;
    void *arg2;
    intgo arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = (uint32_t)swig_a->arg3; 
  
  result = (int32_t)(arg1)->setMemory((void const *)arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_OTPassword_addMemory(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  void *arg2 = (void *) 0 ;
  uint32_t arg3 ;
  int32_t result;
  
  struct swigargs {
    OTPassword *arg1;
    void *arg2;
    intgo arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  arg2 = *(void **)&swig_a->arg2; 
  arg3 = (uint32_t)swig_a->arg3; 
  
  result = (int32_t)(arg1)->addMemory((void const *)arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_OTPassword_randomizeMemory__SWIG_0(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint32_t arg2 ;
  int32_t result;
  
  struct swigargs {
    OTPassword *arg1;
    intgo arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  arg2 = (uint32_t)swig_a->arg2; 
  
  result = (int32_t)(arg1)->randomizeMemory(arg2);
  swig_a->result = result; 
}


void
_wrap_OTPassword_randomizeMemory__SWIG_1(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  int32_t result;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (int32_t)(arg1)->randomizeMemory();
  swig_a->result = result; 
}


void
_wrap_OTPassword_randomizeMemory_uint8(void *swig_v)
{
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (uint8_t *)swig_a->arg1.p; 
  arg2 = (uint32_t)swig_a->arg2; 
  
  result = (bool)OTPassword::randomizeMemory_uint8(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_OTPassword_randomizeMemory__SWIG_2(void *swig_v)
{
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  struct swigargs {
    void *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(void **)&swig_a->arg1; 
  arg2 = (uint32_t)swig_a->arg2; 
  
  result = (bool)OTPassword::randomizeMemory(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_OTPassword_getBlockSize(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint32_t result;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (uint32_t)((OTPassword const *)arg1)->getBlockSize();
  swig_a->result = result; 
}


void
_wrap_OTPassword_Compare(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  OTPassword *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTPassword *arg1;
    OTPassword *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  arg2 = *(OTPassword **)&swig_a->arg2; 
  
  result = (bool)((OTPassword const *)arg1)->Compare(*arg2);
  swig_a->result = result; 
}


void
_wrap_OTPassword_getPasswordSize(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint32_t result;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (uint32_t)((OTPassword const *)arg1)->getPasswordSize();
  swig_a->result = result; 
}


void
_wrap_OTPassword_getMemorySize(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint32_t result;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (uint32_t)((OTPassword const *)arg1)->getMemorySize();
  swig_a->result = result; 
}


void
_wrap_OTPassword_zeroMemory__SWIG_0(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  
  struct swigargs {
    OTPassword *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  (arg1)->zeroMemory();
  
}


void
_wrap_OTPassword_zeroMemory__SWIG_1(void *swig_v)
{
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (uint8_t *)swig_a->arg1.p; 
  arg2 = (uint32_t)swig_a->arg2; 
  
  OTPassword::zeroMemory(arg1,arg2);
  
}


void
_wrap_OTPassword_zeroMemory__SWIG_2(void *swig_v)
{
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  
  struct swigargs {
    void *arg1;
    intgo arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(void **)&swig_a->arg1; 
  arg2 = (uint32_t)swig_a->arg2; 
  
  OTPassword::zeroMemory(arg1,arg2);
  
}


void
_wrap_OTPassword_safe_memcpy__SWIG_0(void *swig_v)
{
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  void *arg3 = (void *) 0 ;
  uint32_t arg4 ;
  bool arg5 ;
  void *result = 0 ;
  
  struct swigargs {
    void *arg1;
    intgo arg2;
    void *arg3;
    intgo arg4;
    bool arg5;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(void **)&swig_a->arg1; 
  arg2 = (uint32_t)swig_a->arg2; 
  arg3 = *(void **)&swig_a->arg3; 
  arg4 = (uint32_t)swig_a->arg4; 
  arg5 = (bool)swig_a->arg5; 
  
  result = (void *)OTPassword::safe_memcpy(arg1,arg2,(void const *)arg3,arg4,arg5);
  *(void **)&swig_a->result = result; 
}


void
_wrap_OTPassword_safe_memcpy__SWIG_1(void *swig_v)
{
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  void *arg3 = (void *) 0 ;
  uint32_t arg4 ;
  void *result = 0 ;
  
  struct swigargs {
    void *arg1;
    intgo arg2;
    void *arg3;
    intgo arg4;
    long : 0;
    void *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(void **)&swig_a->arg1; 
  arg2 = (uint32_t)swig_a->arg2; 
  arg3 = *(void **)&swig_a->arg3; 
  arg4 = (uint32_t)swig_a->arg4; 
  
  result = (void *)OTPassword::safe_memcpy(arg1,arg2,(void const *)arg3,arg4);
  *(void **)&swig_a->result = result; 
}


void
_wrap_OTPassword_CreateTextBuffer(void *swig_v)
{
  OTPassword *result = 0 ;
  
  struct swigargs {
    long : 0;
    OTPassword *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (OTPassword *)OTPassword::CreateTextBuffer();
  *(OTPassword **)&swig_a->result = result; 
}


void
_wrap_OTPassword_SetSize(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  uint32_t arg2 ;
  bool result;
  
  struct swigargs {
    OTPassword *arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  arg2 = (uint32_t)swig_a->arg2; 
  
  result = (bool)(arg1)->SetSize(arg2);
  swig_a->result = result; 
}


void
_wrap_new_OTPassword__SWIG_0(void *swig_v)
{
  OTPassword::BlockSize arg1 ;
  OTPassword *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    OTPassword *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTPassword::BlockSize)swig_a->arg1; 
  
  result = (OTPassword *)new OTPassword(arg1);
  *(OTPassword **)&swig_a->result = result; 
}


void
_wrap_new_OTPassword__SWIG_1(void *swig_v)
{
  OTPassword *result = 0 ;
  
  struct swigargs {
    long : 0;
    OTPassword *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (OTPassword *)new OTPassword();
  *(OTPassword **)&swig_a->result = result; 
}


void
_wrap_new_OTPassword__SWIG_2(void *swig_v)
{
  OTPassword *arg1 = 0 ;
  OTPassword *result = 0 ;
  
  struct swigargs {
    OTPassword *arg1;
    long : 0;
    OTPassword *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  result = (OTPassword *)new OTPassword((OTPassword const &)*arg1);
  *(OTPassword **)&swig_a->result = result; 
}


void
_wrap_new_OTPassword__SWIG_3(void *swig_v)
{
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  OTPassword::BlockSize arg3 ;
  OTPassword *result = 0 ;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    OTPassword *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (char *)swig_a->arg1.p; 
  arg2 = (uint32_t)swig_a->arg2; 
  arg3 = (OTPassword::BlockSize)swig_a->arg3; 
  
  result = (OTPassword *)new OTPassword((char const *)arg1,arg2,arg3);
  *(OTPassword **)&swig_a->result = result; 
}


void
_wrap_new_OTPassword__SWIG_4(void *swig_v)
{
  char *arg1 = (char *) 0 ;
  uint32_t arg2 ;
  OTPassword *result = 0 ;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    OTPassword *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (char *)swig_a->arg1.p; 
  arg2 = (uint32_t)swig_a->arg2; 
  
  result = (OTPassword *)new OTPassword((char const *)arg1,arg2);
  *(OTPassword **)&swig_a->result = result; 
}


void
_wrap_new_OTPassword__SWIG_5(void *swig_v)
{
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  OTPassword::BlockSize arg3 ;
  OTPassword *result = 0 ;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    OTPassword *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (uint8_t *)swig_a->arg1.p; 
  arg2 = (uint32_t)swig_a->arg2; 
  arg3 = (OTPassword::BlockSize)swig_a->arg3; 
  
  result = (OTPassword *)new OTPassword((uint8_t const *)arg1,arg2,arg3);
  *(OTPassword **)&swig_a->result = result; 
}


void
_wrap_new_OTPassword__SWIG_6(void *swig_v)
{
  uint8_t *arg1 = (uint8_t *) 0 ;
  uint32_t arg2 ;
  OTPassword *result = 0 ;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    OTPassword *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (uint8_t *)swig_a->arg1.p; 
  arg2 = (uint32_t)swig_a->arg2; 
  
  result = (OTPassword *)new OTPassword((uint8_t const *)arg1,arg2);
  *(OTPassword **)&swig_a->result = result; 
}


void
_wrap_new_OTPassword__SWIG_7(void *swig_v)
{
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  OTPassword::BlockSize arg3 ;
  OTPassword *result = 0 ;
  
  struct swigargs {
    void *arg1;
    intgo arg2;
    intgo arg3;
    long : 0;
    OTPassword *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(void **)&swig_a->arg1; 
  arg2 = (uint32_t)swig_a->arg2; 
  arg3 = (OTPassword::BlockSize)swig_a->arg3; 
  
  result = (OTPassword *)new OTPassword((void const *)arg1,arg2,arg3);
  *(OTPassword **)&swig_a->result = result; 
}


void
_wrap_new_OTPassword__SWIG_8(void *swig_v)
{
  void *arg1 = (void *) 0 ;
  uint32_t arg2 ;
  OTPassword *result = 0 ;
  
  struct swigargs {
    void *arg1;
    intgo arg2;
    long : 0;
    OTPassword *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(void **)&swig_a->arg1; 
  arg2 = (uint32_t)swig_a->arg2; 
  
  result = (OTPassword *)new OTPassword((void const *)arg1,arg2);
  *(OTPassword **)&swig_a->result = result; 
}


void
_wrap_delete_OTPassword(void *swig_v)
{
  OTPassword *arg1 = (OTPassword *) 0 ;
  
  struct swigargs {
    OTPassword *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTPassword **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap__swig_NewDirectorOTCallbackOTCallback(void *swig_v)
{
  void *arg1 = (void *) 0 ;
  OTCallback *result = 0 ;
  
  struct swigargs {
    void *arg1;
    long : 0;
    OTCallback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(void **)&swig_a->arg1; 
  
  result = new SwigDirector_OTCallback(arg1);
  *(OTCallback **)&swig_a->result = result; 
}


void
_wrap_DeleteDirectorOTCallback(void *swig_v)
{
  OTCallback *arg1 = (OTCallback *) 0 ;
  
  struct swigargs {
    OTCallback *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTCallback **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap__swig_DirectorOTCallback_upcall_RunOne(void *swig_v)
{
  SwigDirector_OTCallback *arg1 = (SwigDirector_OTCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  OTPassword *arg3 = 0 ;
  
  struct swigargs {
    SwigDirector_OTCallback *arg1;
    _gostring_ arg2;
    OTPassword *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(SwigDirector_OTCallback **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  arg3 = *(OTPassword **)&swig_a->arg3; 
  
  arg1->_swig_upcall_runOne(arg2, *arg3);
  
}


void
_wrap__swig_DirectorOTCallback_upcall_RunTwo(void *swig_v)
{
  SwigDirector_OTCallback *arg1 = (SwigDirector_OTCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  OTPassword *arg3 = 0 ;
  
  struct swigargs {
    SwigDirector_OTCallback *arg1;
    _gostring_ arg2;
    OTPassword *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(SwigDirector_OTCallback **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  arg3 = *(OTPassword **)&swig_a->arg3; 
  
  arg1->_swig_upcall_runTwo(arg2, *arg3);
  
}


void
_wrap_new_OTCallback(void *swig_v)
{
  OTCallback *result = 0 ;
  
  struct swigargs {
    long : 0;
    OTCallback *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (OTCallback *)new OTCallback();
  *(OTCallback **)&swig_a->result = result; 
}


void
_wrap_delete_OTCallback(void *swig_v)
{
  OTCallback *arg1 = (OTCallback *) 0 ;
  
  struct swigargs {
    OTCallback *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTCallback **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_OTCallback_runOne(void *swig_v)
{
  OTCallback *arg1 = (OTCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  OTPassword *arg3 = 0 ;
  
  struct swigargs {
    OTCallback *arg1;
    _gostring_ arg2;
    OTPassword *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTCallback **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  arg3 = *(OTPassword **)&swig_a->arg3; 
  
  (arg1)->runOne((char const *)arg2,*arg3);
  
}


void
_wrap_OTCallback_runTwo(void *swig_v)
{
  OTCallback *arg1 = (OTCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  OTPassword *arg3 = 0 ;
  
  struct swigargs {
    OTCallback *arg1;
    _gostring_ arg2;
    OTPassword *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTCallback **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  arg3 = *(OTPassword **)&swig_a->arg3; 
  
  (arg1)->runTwo((char const *)arg2,*arg3);
  
}


void
_wrap_new_OTCaller(void *swig_v)
{
  OTCaller *result = 0 ;
  
  struct swigargs {
    long : 0;
    OTCaller *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (OTCaller *)new OTCaller();
  *(OTCaller **)&swig_a->result = result; 
}


void
_wrap_delete_OTCaller(void *swig_v)
{
  OTCaller *arg1 = (OTCaller *) 0 ;
  
  struct swigargs {
    OTCaller *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTCaller **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_OTCaller_GetPassword(void *swig_v)
{
  OTCaller *arg1 = (OTCaller *) 0 ;
  OTPassword *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTCaller *arg1;
    OTPassword *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTCaller **)&swig_a->arg1; 
  arg2 = *(OTPassword **)&swig_a->arg2; 
  
  result = (bool)((OTCaller const *)arg1)->GetPassword(*arg2);
  swig_a->result = result; 
}


void
_wrap_OTCaller_ZeroOutPassword(void *swig_v)
{
  OTCaller *arg1 = (OTCaller *) 0 ;
  
  struct swigargs {
    OTCaller *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTCaller **)&swig_a->arg1; 
  
  (arg1)->ZeroOutPassword();
  
}


void
_wrap_OTCaller_GetDisplay(void *swig_v)
{
  OTCaller *arg1 = (OTCaller *) 0 ;
  char *result = 0 ;
  
  struct swigargs {
    OTCaller *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTCaller **)&swig_a->arg1; 
  
  result = (char *)((OTCaller const *)arg1)->GetDisplay();
  swig_a->result = _swig_makegostring((char*)result, result ? strlen((char*)result) : 0); 
}


void
_wrap_OTCaller_SetDisplay(void *swig_v)
{
  OTCaller *arg1 = (OTCaller *) 0 ;
  char *arg2 = (char *) 0 ;
  int32_t arg3 ;
  
  struct swigargs {
    OTCaller *arg1;
    _gostring_ arg2;
    intgo arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTCaller **)&swig_a->arg1; 
  arg2 = (char *)swig_a->arg2.p; 
  arg3 = (int32_t)swig_a->arg3; 
  
  (arg1)->SetDisplay((char const *)arg2,arg3);
  
}


void
_wrap_OTCaller_delCallback(void *swig_v)
{
  OTCaller *arg1 = (OTCaller *) 0 ;
  
  struct swigargs {
    OTCaller *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTCaller **)&swig_a->arg1; 
  
  (arg1)->delCallback();
  
}


void
_wrap_OTCaller_setCallback(void *swig_v)
{
  OTCaller *arg1 = (OTCaller *) 0 ;
  OTCallback *arg2 = (OTCallback *) 0 ;
  
  struct swigargs {
    OTCaller *arg1;
    OTCallback *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTCaller **)&swig_a->arg1; 
  arg2 = *(OTCallback **)&swig_a->arg2; 
  
  (arg1)->setCallback(arg2);
  
}


void
_wrap_OTCaller_isCallbackSet(void *swig_v)
{
  OTCaller *arg1 = (OTCaller *) 0 ;
  bool result;
  
  struct swigargs {
    OTCaller *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTCaller **)&swig_a->arg1; 
  
  result = (bool)((OTCaller const *)arg1)->isCallbackSet();
  swig_a->result = result; 
}


void
_wrap_OTCaller_callOne(void *swig_v)
{
  OTCaller *arg1 = (OTCaller *) 0 ;
  
  struct swigargs {
    OTCaller *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTCaller **)&swig_a->arg1; 
  
  (arg1)->callOne();
  
}


void
_wrap_OTCaller_callTwo(void *swig_v)
{
  OTCaller *arg1 = (OTCaller *) 0 ;
  
  struct swigargs {
    OTCaller *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTCaller **)&swig_a->arg1; 
  
  (arg1)->callTwo();
  
}


void
_wrap_new_WrapTimeT(void *swig_v)
{
  WrapTimeT *result = 0 ;
  
  struct swigargs {
    long : 0;
    WrapTimeT *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (WrapTimeT *)new WrapTimeT();
  *(WrapTimeT **)&swig_a->result = result; 
}


void
_wrap_WrapTimeT_getTime(void *swig_v)
{
  WrapTimeT *arg1 = (WrapTimeT *) 0 ;
  int64_t result;
  
  struct swigargs {
    WrapTimeT *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(WrapTimeT **)&swig_a->arg1; 
  
  result = (int64_t)((WrapTimeT const *)arg1)->getTime();
  swig_a->result = result; 
}


void
_wrap_WrapTimeT_setTime(void *swig_v)
{
  WrapTimeT *arg1 = (WrapTimeT *) 0 ;
  int64_t *arg2 = 0 ;
  
  struct swigargs {
    WrapTimeT *arg1;
    long long arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(WrapTimeT **)&swig_a->arg1; 
  arg2 = (int64_t *)&swig_a->arg2; 
  
  (arg1)->setTime((int64_t const &)*arg2);
  
}


void
_wrap_delete_WrapTimeT(void *swig_v)
{
  WrapTimeT *arg1 = (WrapTimeT *) 0 ;
  
  struct swigargs {
    WrapTimeT *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(WrapTimeT **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_OTAPI_Wrap_SetExecutor(void *swig_v)
{
  OTAPI_Exec *arg1 = (OTAPI_Exec *) 0 ;
  OTAPI_Exec *result = 0 ;
  
  struct swigargs {
    OTAPI_Exec *arg1;
    long : 0;
    OTAPI_Exec *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTAPI_Exec **)&swig_a->arg1; 
  
  result = (OTAPI_Exec *)OTAPI_Wrap::SetExecutor(arg1);
  *(OTAPI_Exec **)&swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Exec(void *swig_v)
{
  OTAPI_Exec *result = 0 ;
  
  struct swigargs {
    long : 0;
    OTAPI_Exec *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (OTAPI_Exec *)OTAPI_Wrap::Exec();
  *(OTAPI_Exec **)&swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_It(void *swig_v)
{
  OTAPI_Exec *result = 0 ;
  
  struct swigargs {
    long : 0;
    OTAPI_Exec *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (OTAPI_Exec *)OTAPI_Wrap::It();
  *(OTAPI_Exec **)&swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_OTAPI(void *swig_v)
{
  OT_API *result = 0 ;
  
  struct swigargs {
    long : 0;
    OT_API *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (OT_API *)OTAPI_Wrap::OTAPI();
  *(OT_API **)&swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_StringToLong(void *swig_v)
{
  std::string *arg1 = 0 ;
  int64_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int64_t)OTAPI_Wrap::StringToLong((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_LongToString(void *swig_v)
{
  int64_t *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    long long arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int64_t *)&swig_a->arg1; 
  
  result = OTAPI_Wrap::LongToString((long long const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_StringToUlong(void *swig_v)
{
  std::string *arg1 = 0 ;
  uint64_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (uint64_t)OTAPI_Wrap::StringToUlong((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_UlongToString(void *swig_v)
{
  uint64_t *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    long long arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (uint64_t *)&swig_a->arg1; 
  
  result = OTAPI_Wrap::UlongToString((unsigned long long const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_AppInit(void *swig_v)
{
  bool result;
  
  struct swigargs {
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (bool)OTAPI_Wrap::AppInit();
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_AppCleanup(void *swig_v)
{
  bool result;
  
  struct swigargs {
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (bool)OTAPI_Wrap::AppCleanup();
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_SetAppBinaryFolder(void *swig_v)
{
  std::string *arg1 = 0 ;
  
  struct swigargs {
    _gostring_ arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  OTAPI_Wrap::SetAppBinaryFolder((std::string const &)*arg1);
  
}


void
_wrap_OTAPI_Wrap_SetHomeFolder(void *swig_v)
{
  std::string *arg1 = 0 ;
  
  struct swigargs {
    _gostring_ arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  OTAPI_Wrap::SetHomeFolder((std::string const &)*arg1);
  
}


void
_wrap_OTAPI_Wrap_SetWallet(void *swig_v)
{
  std::string *arg1 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (bool)OTAPI_Wrap::SetWallet((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_WalletExists(void *swig_v)
{
  bool result;
  
  struct swigargs {
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (bool)OTAPI_Wrap::WalletExists();
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_LoadWallet(void *swig_v)
{
  bool result;
  
  struct swigargs {
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (bool)OTAPI_Wrap::LoadWallet();
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_SwitchWallet(void *swig_v)
{
  bool result;
  
  struct swigargs {
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (bool)OTAPI_Wrap::SwitchWallet();
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Output(void *swig_v)
{
  int32_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    intgo arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int32_t *)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  OTAPI_Wrap::Output((int const &)*arg1,(std::string const &)*arg2);
  
}


void
_wrap_OTAPI_Wrap_GetTime(void *swig_v)
{
  WrapTimeT result;
  
  struct swigargs {
    long : 0;
    WrapTimeT *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTAPI_Wrap::GetTime();
  *(WrapTimeT **)&swig_a->result = new WrapTimeT(result); 
}


void
_wrap_OTAPI_Wrap_NumList_Add(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::NumList_Add((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_NumList_Remove(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::NumList_Remove((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_NumList_VerifyQuery(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (bool)OTAPI_Wrap::NumList_VerifyQuery((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_NumList_VerifyAll(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (bool)OTAPI_Wrap::NumList_VerifyAll((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_NumList_Count(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int32_t)OTAPI_Wrap::NumList_Count((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Encode(void *swig_v)
{
  std::string *arg1 = 0 ;
  bool *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    bool arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (bool *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::Encode((std::string const &)*arg1,(bool const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Decode(void *swig_v)
{
  std::string *arg1 = 0 ;
  bool *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    bool arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (bool *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::Decode((std::string const &)*arg1,(bool const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Encrypt(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::Encrypt((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Decrypt(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::Decrypt((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_CreateSymmetricKey(void *swig_v)
{
  std::string result;
  
  struct swigargs {
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTAPI_Wrap::CreateSymmetricKey();
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_SymmetricEncrypt(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::SymmetricEncrypt((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_SymmetricDecrypt(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::SymmetricDecrypt((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_SignContract(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::SignContract((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_FlatSign(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::FlatSign((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_AddSignature(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::AddSignature((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_VerifySignature(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (bool)OTAPI_Wrap::VerifySignature((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_VerifyAndRetrieveXMLContents(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::VerifyAndRetrieveXMLContents((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetMemlogSize(void *swig_v)
{
  int32_t result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int32_t)OTAPI_Wrap::GetMemlogSize();
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetMemlogAtIndex(void *swig_v)
{
  int32_t *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int32_t *)&swig_a->arg1; 
  
  result = OTAPI_Wrap::GetMemlogAtIndex((int const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_PeekMemlogFront(void *swig_v)
{
  std::string result;
  
  struct swigargs {
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTAPI_Wrap::PeekMemlogFront();
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_PeekMemlogBack(void *swig_v)
{
  std::string result;
  
  struct swigargs {
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTAPI_Wrap::PeekMemlogBack();
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_PopMemlogFront(void *swig_v)
{
  bool result;
  
  struct swigargs {
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (bool)OTAPI_Wrap::PopMemlogFront();
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_PopMemlogBack(void *swig_v)
{
  bool result;
  
  struct swigargs {
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (bool)OTAPI_Wrap::PopMemlogBack();
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_CreateNym(void *swig_v)
{
  int32_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    intgo arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int32_t *)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::CreateNym((int const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_ActiveCronItemIDs(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::GetNym_ActiveCronItemIDs((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetActiveCronItem(void *swig_v)
{
  std::string *arg1 = 0 ;
  int64_t arg2 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long long arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int64_t)swig_a->arg2; 
  
  result = OTAPI_Wrap::GetActiveCronItem((std::string const &)*arg1,arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_SourceForID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetNym_SourceForID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_AltSourceLocation(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetNym_AltSourceLocation((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_CredentialCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int32_t)OTAPI_Wrap::GetNym_CredentialCount((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetNym_CredentialID(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::GetNym_CredentialID((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_CredentialContents(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::GetNym_CredentialContents((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_RevokedCredCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int32_t)OTAPI_Wrap::GetNym_RevokedCredCount((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetNym_RevokedCredID(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::GetNym_RevokedCredID((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_RevokedCredContents(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::GetNym_RevokedCredContents((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_SubcredentialCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::GetNym_SubcredentialCount((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetNym_SubCredentialID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    intgo arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (int32_t *)&swig_a->arg3; 
  
  result = OTAPI_Wrap::GetNym_SubCredentialID((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_SubCredentialContents(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::GetNym_SubCredentialContents((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_AddSubcredential(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    intgo arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (int32_t *)&swig_a->arg3; 
  
  result = OTAPI_Wrap::AddSubcredential((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_RevokeSubcredential(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (bool)OTAPI_Wrap::RevokeSubcredential((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_CreateServerContract(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::CreateServerContract((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_CreateAssetContract(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::CreateAssetContract((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_CalculateAssetContractID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::CalculateAssetContractID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_CalculateServerContractID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::CalculateServerContractID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_AddServerContract(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int32_t)OTAPI_Wrap::AddServerContract((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_AddAssetContract(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int32_t)OTAPI_Wrap::AddAssetContract((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetServerCount(void *swig_v)
{
  int32_t result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int32_t)OTAPI_Wrap::GetServerCount();
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetAssetTypeCount(void *swig_v)
{
  int32_t result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int32_t)OTAPI_Wrap::GetAssetTypeCount();
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetAccountCount(void *swig_v)
{
  int32_t result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int32_t)OTAPI_Wrap::GetAccountCount();
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetNymCount(void *swig_v)
{
  int32_t result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (int32_t)OTAPI_Wrap::GetNymCount();
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetServer_ID(void *swig_v)
{
  int32_t *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int32_t *)&swig_a->arg1; 
  
  result = OTAPI_Wrap::GetServer_ID((int const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetServer_Name(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetServer_Name((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetServer_Contract(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetServer_Contract((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_FormatAmount(void *swig_v)
{
  std::string *arg1 = 0 ;
  int64_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long long arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int64_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::FormatAmount((std::string const &)*arg1,(long long const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_StringToAmount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int64_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int64_t)OTAPI_Wrap::StringToAmount((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetAssetType_ID(void *swig_v)
{
  int32_t *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int32_t *)&swig_a->arg1; 
  
  result = OTAPI_Wrap::GetAssetType_ID((int const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetAssetType_Name(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetAssetType_Name((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetAssetType_TLA(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetAssetType_TLA((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetAssetType_Contract(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetAssetType_Contract((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetAccountWallet_ID(void *swig_v)
{
  int32_t *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int32_t *)&swig_a->arg1; 
  
  result = OTAPI_Wrap::GetAccountWallet_ID((int const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetAccountWallet_Name(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetAccountWallet_Name((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetAccountWallet_Balance(void *swig_v)
{
  std::string *arg1 = 0 ;
  int64_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int64_t)OTAPI_Wrap::GetAccountWallet_Balance((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetAccountWallet_Type(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetAccountWallet_Type((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetAccountWallet_AssetTypeID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetAccountWallet_AssetTypeID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetAccountWallet_ServerID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetAccountWallet_ServerID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetAccountWallet_NymID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetAccountWallet_NymID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetAccountWallet_InboxHash(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetAccountWallet_InboxHash((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetAccountWallet_OutboxHash(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetAccountWallet_OutboxHash((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_VerifyAccountReceipt(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (bool)OTAPI_Wrap::VerifyAccountReceipt((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetNym_TransactionNumCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::GetNym_TransactionNumCount((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetNym_ID(void *swig_v)
{
  int32_t *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int32_t *)&swig_a->arg1; 
  
  result = OTAPI_Wrap::GetNym_ID((int const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_Name(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetNym_Name((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_Stats(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::GetNym_Stats((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_NymboxHash(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::GetNym_NymboxHash((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_RecentHash(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::GetNym_RecentHash((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_InboxHash(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::GetNym_InboxHash((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_OutboxHash(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::GetNym_OutboxHash((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_IsNym_RegisteredAtServer(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (bool)OTAPI_Wrap::IsNym_RegisteredAtServer((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetNym_MailCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int32_t)OTAPI_Wrap::GetNym_MailCount((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetNym_MailContentsByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::GetNym_MailContentsByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_MailSenderIDByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::GetNym_MailSenderIDByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_MailServerIDByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::GetNym_MailServerIDByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Nym_RemoveMailByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = (bool)OTAPI_Wrap::Nym_RemoveMailByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Nym_VerifyMailByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = (bool)OTAPI_Wrap::Nym_VerifyMailByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetNym_OutmailCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int32_t)OTAPI_Wrap::GetNym_OutmailCount((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetNym_OutmailContentsByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::GetNym_OutmailContentsByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_OutmailRecipientIDByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::GetNym_OutmailRecipientIDByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_OutmailServerIDByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::GetNym_OutmailServerIDByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Nym_RemoveOutmailByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = (bool)OTAPI_Wrap::Nym_RemoveOutmailByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Nym_VerifyOutmailByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = (bool)OTAPI_Wrap::Nym_VerifyOutmailByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetNym_OutpaymentsCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int32_t)OTAPI_Wrap::GetNym_OutpaymentsCount((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GetNym_OutpaymentsContentsByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::GetNym_OutpaymentsContentsByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_OutpaymentsRecipientIDByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::GetNym_OutpaymentsRecipientIDByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_GetNym_OutpaymentsServerIDByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::GetNym_OutpaymentsServerIDByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Nym_RemoveOutpaymentsByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = (bool)OTAPI_Wrap::Nym_RemoveOutpaymentsByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Nym_VerifyOutpaymentsByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = (bool)OTAPI_Wrap::Nym_VerifyOutpaymentsByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Wallet_CanRemoveServer(void *swig_v)
{
  std::string *arg1 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (bool)OTAPI_Wrap::Wallet_CanRemoveServer((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Wallet_RemoveServer(void *swig_v)
{
  std::string *arg1 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (bool)OTAPI_Wrap::Wallet_RemoveServer((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Wallet_CanRemoveAssetType(void *swig_v)
{
  std::string *arg1 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (bool)OTAPI_Wrap::Wallet_CanRemoveAssetType((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Wallet_RemoveAssetType(void *swig_v)
{
  std::string *arg1 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (bool)OTAPI_Wrap::Wallet_RemoveAssetType((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Wallet_CanRemoveNym(void *swig_v)
{
  std::string *arg1 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (bool)OTAPI_Wrap::Wallet_CanRemoveNym((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Wallet_RemoveNym(void *swig_v)
{
  std::string *arg1 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (bool)OTAPI_Wrap::Wallet_RemoveNym((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Wallet_CanRemoveAccount(void *swig_v)
{
  std::string *arg1 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (bool)OTAPI_Wrap::Wallet_CanRemoveAccount((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Wallet_ChangePassphrase(void *swig_v)
{
  bool result;
  
  struct swigargs {
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (bool)OTAPI_Wrap::Wallet_ChangePassphrase();
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Wallet_ExportNym(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Wallet_ExportNym((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Wallet_ImportNym(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Wallet_ImportNym((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Wallet_ImportCert(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::Wallet_ImportCert((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Wallet_ExportCert(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Wallet_ExportCert((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Wallet_GetNymIDFromPartial(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Wallet_GetNymIDFromPartial((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Wallet_GetServerIDFromPartial(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Wallet_GetServerIDFromPartial((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Wallet_GetAssetIDFromPartial(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Wallet_GetAssetIDFromPartial((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Wallet_GetAccountIDFromPartial(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Wallet_GetAccountIDFromPartial((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_SetNym_Name(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (bool)OTAPI_Wrap::SetNym_Name((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_SetAccountWallet_Name(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (bool)OTAPI_Wrap::SetAccountWallet_Name((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_SetAssetType_Name(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (bool)OTAPI_Wrap::SetAssetType_Name((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_SetServer_Name(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (bool)OTAPI_Wrap::SetServer_Name((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_WriteCheque(void *swig_v)
{
  std::string *arg1 = 0 ;
  int64_t *arg2 = 0 ;
  WrapTimeT *arg3 = 0 ;
  WrapTimeT *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string *arg8 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long long arg2;
    WrapTimeT *arg3;
    WrapTimeT *arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    _gostring_ arg7;
    _gostring_ arg8;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int64_t *)&swig_a->arg2; 
  arg3 = *(WrapTimeT **)&swig_a->arg3; 
  arg4 = *(WrapTimeT **)&swig_a->arg4; 
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  std::string arg7_str(swig_a->arg7.p, swig_a->arg7.n);
  arg7 = &arg7_str;
  
  
  std::string arg8_str(swig_a->arg8.p, swig_a->arg8.n);
  arg8 = &arg8_str;
  
  
  result = OTAPI_Wrap::WriteCheque((std::string const &)*arg1,(long long const &)*arg2,(WrapTimeT const &)*arg3,(WrapTimeT const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_DiscardCheque(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (bool)OTAPI_Wrap::DiscardCheque((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_ProposePaymentPlan(void *swig_v)
{
  std::string *arg1 = 0 ;
  WrapTimeT *arg2 = 0 ;
  WrapTimeT *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string *arg8 = 0 ;
  int64_t *arg9 = 0 ;
  WrapTimeT *arg10 = 0 ;
  int64_t *arg11 = 0 ;
  WrapTimeT *arg12 = 0 ;
  WrapTimeT *arg13 = 0 ;
  WrapTimeT *arg14 = 0 ;
  int32_t *arg15 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    WrapTimeT *arg2;
    WrapTimeT *arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    _gostring_ arg7;
    _gostring_ arg8;
    long long arg9;
    WrapTimeT *arg10;
    long long arg11;
    WrapTimeT *arg12;
    WrapTimeT *arg13;
    WrapTimeT *arg14;
    intgo arg15;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = *(WrapTimeT **)&swig_a->arg2; 
  arg3 = *(WrapTimeT **)&swig_a->arg3; 
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  std::string arg7_str(swig_a->arg7.p, swig_a->arg7.n);
  arg7 = &arg7_str;
  
  
  std::string arg8_str(swig_a->arg8.p, swig_a->arg8.n);
  arg8 = &arg8_str;
  
  arg9 = (int64_t *)&swig_a->arg9; 
  arg10 = *(WrapTimeT **)&swig_a->arg10; 
  arg11 = (int64_t *)&swig_a->arg11; 
  arg12 = *(WrapTimeT **)&swig_a->arg12; 
  arg13 = *(WrapTimeT **)&swig_a->arg13; 
  arg14 = *(WrapTimeT **)&swig_a->arg14; 
  arg15 = (int32_t *)&swig_a->arg15; 
  
  result = OTAPI_Wrap::ProposePaymentPlan((std::string const &)*arg1,(WrapTimeT const &)*arg2,(WrapTimeT const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8,(long long const &)*arg9,(WrapTimeT const &)*arg10,(long long const &)*arg11,(WrapTimeT const &)*arg12,(WrapTimeT const &)*arg13,(WrapTimeT const &)*arg14,(int const &)*arg15);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_EasyProposePlan(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string *arg8 = 0 ;
  std::string *arg9 = 0 ;
  std::string *arg10 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    _gostring_ arg7;
    _gostring_ arg8;
    _gostring_ arg9;
    _gostring_ arg10;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  std::string arg7_str(swig_a->arg7.p, swig_a->arg7.n);
  arg7 = &arg7_str;
  
  
  std::string arg8_str(swig_a->arg8.p, swig_a->arg8.n);
  arg8 = &arg8_str;
  
  
  std::string arg9_str(swig_a->arg9.p, swig_a->arg9.n);
  arg9 = &arg9_str;
  
  
  std::string arg10_str(swig_a->arg10.p, swig_a->arg10.n);
  arg10 = &arg10_str;
  
  
  result = OTAPI_Wrap::EasyProposePlan((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8,(std::string const &)*arg9,(std::string const &)*arg10);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_ConfirmPaymentPlan(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = OTAPI_Wrap::ConfirmPaymentPlan((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Create_SmartContract(void *swig_v)
{
  std::string *arg1 = 0 ;
  WrapTimeT *arg2 = 0 ;
  WrapTimeT *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    WrapTimeT *arg2;
    WrapTimeT *arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = *(WrapTimeT **)&swig_a->arg2; 
  arg3 = *(WrapTimeT **)&swig_a->arg3; 
  
  result = OTAPI_Wrap::Create_SmartContract((std::string const &)*arg1,(WrapTimeT const &)*arg2,(WrapTimeT const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_SmartContract_AddBylaw(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::SmartContract_AddBylaw((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_SmartContract_AddClause(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = OTAPI_Wrap::SmartContract_AddClause((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_SmartContract_AddVariable(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    _gostring_ arg7;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  std::string arg7_str(swig_a->arg7.p, swig_a->arg7.n);
  arg7 = &arg7_str;
  
  
  result = OTAPI_Wrap::SmartContract_AddVariable((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_SmartContract_AddCallback(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = OTAPI_Wrap::SmartContract_AddCallback((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_SmartContract_AddHook(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = OTAPI_Wrap::SmartContract_AddHook((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_SmartContract_AddParty(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = OTAPI_Wrap::SmartContract_AddParty((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_SmartContract_AddAccount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = OTAPI_Wrap::SmartContract_AddAccount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_SmartContract_CountNumsNeeded(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::SmartContract_CountNumsNeeded((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_SmartContract_ConfirmAccount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  result = OTAPI_Wrap::SmartContract_ConfirmAccount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_SmartContract_ConfirmParty(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::SmartContract_ConfirmParty((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Smart_AreAllPartiesConfirmed(void *swig_v)
{
  std::string *arg1 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (bool)OTAPI_Wrap::Smart_AreAllPartiesConfirmed((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Smart_GetBylawCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int32_t)OTAPI_Wrap::Smart_GetBylawCount((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Smart_GetBylawByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::Smart_GetBylawByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Bylaw_GetLanguage(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::Bylaw_GetLanguage((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Bylaw_GetClauseCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::Bylaw_GetClauseCount((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Clause_GetNameByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    intgo arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (int32_t *)&swig_a->arg3; 
  
  result = OTAPI_Wrap::Clause_GetNameByIndex((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Clause_GetContents(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::Clause_GetContents((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Bylaw_GetVariableCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::Bylaw_GetVariableCount((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Variable_GetNameByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    intgo arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (int32_t *)&swig_a->arg3; 
  
  result = OTAPI_Wrap::Variable_GetNameByIndex((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Variable_GetType(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::Variable_GetType((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Variable_GetAccess(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::Variable_GetAccess((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Variable_GetContents(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::Variable_GetContents((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Bylaw_GetHookCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::Bylaw_GetHookCount((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Hook_GetNameByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    intgo arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (int32_t *)&swig_a->arg3; 
  
  result = OTAPI_Wrap::Hook_GetNameByIndex((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Hook_GetClauseCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::Hook_GetClauseCount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Hook_GetClauseAtIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    intgo arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = (int32_t *)&swig_a->arg4; 
  
  result = OTAPI_Wrap::Hook_GetClauseAtIndex((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(int const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Bylaw_GetCallbackCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::Bylaw_GetCallbackCount((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Callback_GetNameByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    intgo arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (int32_t *)&swig_a->arg3; 
  
  result = OTAPI_Wrap::Callback_GetNameByIndex((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Callback_GetClause(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::Callback_GetClause((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Smart_GetPartyCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int32_t)OTAPI_Wrap::Smart_GetPartyCount((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Smart_GetPartyByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::Smart_GetPartyByIndex((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Smart_IsPartyConfirmed(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (bool)OTAPI_Wrap::Smart_IsPartyConfirmed((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Party_GetID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::Party_GetID((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Party_GetAcctCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::Party_GetAcctCount((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Party_GetAcctNameByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    intgo arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (int32_t *)&swig_a->arg3; 
  
  result = OTAPI_Wrap::Party_GetAcctNameByIndex((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Party_GetAcctID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::Party_GetAcctID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Party_GetAcctAssetID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::Party_GetAcctAssetID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Party_GetAcctAgentName(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::Party_GetAcctAgentName((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Party_GetAgentCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::Party_GetAgentCount((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Party_GetAgentNameByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    intgo arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (int32_t *)&swig_a->arg3; 
  
  result = OTAPI_Wrap::Party_GetAgentNameByIndex((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Party_GetAgentID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::Party_GetAgentID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_activateSmartContract(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::activateSmartContract((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_triggerClause(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int64_t *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long long arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (int64_t *)&swig_a->arg3; 
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (int32_t)OTAPI_Wrap::triggerClause((std::string const &)*arg1,(std::string const &)*arg2,(long long const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Msg_HarvestTransactionNumbers(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool *arg6 = 0 ;
  bool *arg7 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    bool arg3;
    bool arg4;
    bool arg5;
    bool arg6;
    bool arg7;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (bool *)&swig_a->arg3; 
  arg4 = (bool *)&swig_a->arg4; 
  arg5 = (bool *)&swig_a->arg5; 
  arg6 = (bool *)&swig_a->arg6; 
  arg7 = (bool *)&swig_a->arg7; 
  
  result = (bool)OTAPI_Wrap::Msg_HarvestTransactionNumbers((std::string const &)*arg1,(std::string const &)*arg2,(bool const &)*arg3,(bool const &)*arg4,(bool const &)*arg5,(bool const &)*arg6,(bool const &)*arg7);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_LoadUserPubkey_Encryption(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::LoadUserPubkey_Encryption((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadUserPubkey_Signing(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::LoadUserPubkey_Signing((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadPubkey_Encryption(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::LoadPubkey_Encryption((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadPubkey_Signing(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::LoadPubkey_Signing((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_VerifyUserPrivateKey(void *swig_v)
{
  std::string *arg1 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (bool)OTAPI_Wrap::VerifyUserPrivateKey((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_LoadPurse(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::LoadPurse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadMint(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::LoadMint((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadAssetContract(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::LoadAssetContract((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadServerContract(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::LoadServerContract((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Mint_IsStillGood(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (bool)OTAPI_Wrap::Mint_IsStillGood((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_IsBasketCurrency(void *swig_v)
{
  std::string *arg1 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (bool)OTAPI_Wrap::IsBasketCurrency((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Basket_GetMemberCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int32_t)OTAPI_Wrap::Basket_GetMemberCount((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Basket_GetMemberType(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::Basket_GetMemberType((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Basket_GetMinimumTransferAmount(void *swig_v)
{
  std::string *arg1 = 0 ;
  int64_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int64_t)OTAPI_Wrap::Basket_GetMinimumTransferAmount((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Basket_GetMemberMinimumTransferAmount(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t *arg2 = 0 ;
  int64_t result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int32_t *)&swig_a->arg2; 
  
  result = (int64_t)OTAPI_Wrap::Basket_GetMemberMinimumTransferAmount((std::string const &)*arg1,(int const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_LoadAssetAccount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::LoadAssetAccount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadInbox(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::LoadInbox((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadOutbox(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::LoadOutbox((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadInboxNoVerify(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::LoadInboxNoVerify((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadOutboxNoVerify(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::LoadOutboxNoVerify((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadPaymentInbox(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::LoadPaymentInbox((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadPaymentInboxNoVerify(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::LoadPaymentInboxNoVerify((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadRecordBox(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::LoadRecordBox((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadRecordBoxNoVerify(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::LoadRecordBoxNoVerify((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_ClearRecord(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    intgo arg4;
    bool arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = (int32_t *)&swig_a->arg4; 
  arg5 = (bool *)&swig_a->arg5; 
  
  result = (bool)OTAPI_Wrap::ClearRecord((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(int const &)*arg4,(bool const &)*arg5);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_LoadExpiredBox(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::LoadExpiredBox((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadExpiredBoxNoVerify(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::LoadExpiredBoxNoVerify((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_ClearExpired(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t *arg3 = 0 ;
  bool *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    intgo arg3;
    bool arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (int32_t *)&swig_a->arg3; 
  arg4 = (bool *)&swig_a->arg4; 
  
  result = (bool)OTAPI_Wrap::ClearExpired((std::string const &)*arg1,(std::string const &)*arg2,(int const &)*arg3,(bool const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Ledger_GetCount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (int32_t)OTAPI_Wrap::Ledger_GetCount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Ledger_CreateResponse(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = OTAPI_Wrap::Ledger_CreateResponse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Ledger_GetTransactionByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    intgo arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  arg5 = (int32_t *)&swig_a->arg5; 
  
  result = OTAPI_Wrap::Ledger_GetTransactionByIndex((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(int const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Ledger_GetTransactionByID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long long arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  arg5 = (int64_t *)&swig_a->arg5; 
  
  result = OTAPI_Wrap::Ledger_GetTransactionByID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(long long const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Ledger_GetTransactionIDByIndex(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t *arg5 = 0 ;
  int64_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    intgo arg5;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  arg5 = (int32_t *)&swig_a->arg5; 
  
  result = (int64_t)OTAPI_Wrap::Ledger_GetTransactionIDByIndex((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(int const &)*arg5);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Ledger_AddTransaction(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = OTAPI_Wrap::Ledger_AddTransaction((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Transaction_CreateResponse(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool *arg6 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    bool arg6;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  arg6 = (bool *)&swig_a->arg6; 
  
  result = OTAPI_Wrap::Transaction_CreateResponse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(bool const &)*arg6);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Ledger_FinalizeResponse(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = OTAPI_Wrap::Ledger_FinalizeResponse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Ledger_GetInstrument(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    intgo arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  arg5 = (int32_t *)&swig_a->arg5; 
  
  result = OTAPI_Wrap::Ledger_GetInstrument((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(int const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_RecordPayment(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool *arg3 = 0 ;
  int32_t *arg4 = 0 ;
  bool *arg5 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    bool arg3;
    intgo arg4;
    bool arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (bool *)&swig_a->arg3; 
  arg4 = (int32_t *)&swig_a->arg4; 
  arg5 = (bool *)&swig_a->arg5; 
  
  result = (bool)OTAPI_Wrap::RecordPayment((std::string const &)*arg1,(std::string const &)*arg2,(bool const &)*arg3,(int const &)*arg4,(bool const &)*arg5);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Transaction_GetType(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = OTAPI_Wrap::Transaction_GetType((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_ReplyNotice_GetRequestNum(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int64_t)OTAPI_Wrap::ReplyNotice_GetRequestNum((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Transaction_GetVoucher(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = OTAPI_Wrap::Transaction_GetVoucher((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Transaction_GetSuccess(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (int32_t)OTAPI_Wrap::Transaction_GetSuccess((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Transaction_IsCanceled(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (int32_t)OTAPI_Wrap::Transaction_IsCanceled((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Transaction_GetBalanceAgreementSuccess(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (int32_t)OTAPI_Wrap::Transaction_GetBalanceAgreementSuccess((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Transaction_GetDateSigned(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  WrapTimeT result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    WrapTimeT *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = OTAPI_Wrap::Transaction_GetDateSigned((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  *(WrapTimeT **)&swig_a->result = new WrapTimeT(result); 
}


void
_wrap_OTAPI_Wrap_Transaction_GetAmount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (int64_t)OTAPI_Wrap::Transaction_GetAmount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Pending_GetNote(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = OTAPI_Wrap::Pending_GetNote((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Transaction_GetSenderUserID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = OTAPI_Wrap::Transaction_GetSenderUserID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Transaction_GetSenderAcctID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = OTAPI_Wrap::Transaction_GetSenderAcctID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Transaction_GetRecipientUserID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = OTAPI_Wrap::Transaction_GetRecipientUserID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Transaction_GetRecipientAcctID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = OTAPI_Wrap::Transaction_GetRecipientAcctID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Transaction_GetDisplayReferenceToNum(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (int64_t)OTAPI_Wrap::Transaction_GetDisplayReferenceToNum((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_SavePurse(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (bool)OTAPI_Wrap::SavePurse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_CreatePurse(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = OTAPI_Wrap::CreatePurse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_CreatePurse_Passphrase(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::CreatePurse_Passphrase((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Purse_GetTotalValue(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int64_t)OTAPI_Wrap::Purse_GetTotalValue((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Purse_Count(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::Purse_Count((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Purse_HasPassword(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (bool)OTAPI_Wrap::Purse_HasPassword((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Purse_Peek(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = OTAPI_Wrap::Purse_Peek((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Purse_Pop(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = OTAPI_Wrap::Purse_Pop((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Purse_Push(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  result = OTAPI_Wrap::Purse_Push((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Purse_Empty(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = OTAPI_Wrap::Purse_Empty((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Wallet_ImportPurse(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (bool)OTAPI_Wrap::Wallet_ImportPurse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_exchangePurse(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (int32_t)OTAPI_Wrap::exchangePurse((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Token_ChangeOwner(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  result = OTAPI_Wrap::Token_ChangeOwner((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Token_GetID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::Token_GetID((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Token_GetDenomination(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int64_t)OTAPI_Wrap::Token_GetDenomination((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Token_GetSeries(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::Token_GetSeries((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Token_GetValidFrom(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  WrapTimeT result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    WrapTimeT *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::Token_GetValidFrom((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  *(WrapTimeT **)&swig_a->result = new WrapTimeT(result); 
}


void
_wrap_OTAPI_Wrap_Token_GetValidTo(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  WrapTimeT result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    WrapTimeT *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::Token_GetValidTo((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  *(WrapTimeT **)&swig_a->result = new WrapTimeT(result); 
}


void
_wrap_OTAPI_Wrap_Token_GetAssetID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Token_GetAssetID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Token_GetServerID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Token_GetServerID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Instrmnt_GetAmount(void *swig_v)
{
  std::string *arg1 = 0 ;
  int64_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int64_t)OTAPI_Wrap::Instrmnt_GetAmount((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Instrmnt_GetTransNum(void *swig_v)
{
  std::string *arg1 = 0 ;
  int64_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int64_t)OTAPI_Wrap::Instrmnt_GetTransNum((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Instrmnt_GetValidFrom(void *swig_v)
{
  std::string *arg1 = 0 ;
  WrapTimeT result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    WrapTimeT *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Instrmnt_GetValidFrom((std::string const &)*arg1);
  *(WrapTimeT **)&swig_a->result = new WrapTimeT(result); 
}


void
_wrap_OTAPI_Wrap_Instrmnt_GetValidTo(void *swig_v)
{
  std::string *arg1 = 0 ;
  WrapTimeT result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    WrapTimeT *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Instrmnt_GetValidTo((std::string const &)*arg1);
  *(WrapTimeT **)&swig_a->result = new WrapTimeT(result); 
}


void
_wrap_OTAPI_Wrap_Instrmnt_GetMemo(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Instrmnt_GetMemo((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Instrmnt_GetType(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Instrmnt_GetType((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Instrmnt_GetServerID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Instrmnt_GetServerID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Instrmnt_GetAssetID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Instrmnt_GetAssetID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Instrmnt_GetSenderUserID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Instrmnt_GetSenderUserID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Instrmnt_GetSenderAcctID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Instrmnt_GetSenderAcctID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Instrmnt_GetRemitterUserID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Instrmnt_GetRemitterUserID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Instrmnt_GetRemitterAcctID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Instrmnt_GetRemitterAcctID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Instrmnt_GetRecipientUserID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Instrmnt_GetRecipientUserID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Instrmnt_GetRecipientAcctID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Instrmnt_GetRecipientAcctID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_checkServerID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::checkServerID((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_createUserAccount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::createUserAccount((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_deleteUserAccount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::deleteUserAccount((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_deleteAssetAccount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::deleteAssetAccount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_usageCredits(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long long arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = (int64_t *)&swig_a->arg4; 
  
  result = (int32_t)OTAPI_Wrap::usageCredits((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(long long const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Message_GetUsageCredits(void *swig_v)
{
  std::string *arg1 = 0 ;
  int64_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int64_t)OTAPI_Wrap::Message_GetUsageCredits((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_checkUser(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::checkUser((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_sendUserMessage(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (int32_t)OTAPI_Wrap::sendUserMessage((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_sendUserInstrument(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  result = (int32_t)OTAPI_Wrap::sendUserInstrument((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_getRequest(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::getRequest((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_getTransactionNumber(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::getTransactionNumber((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_issueAssetType(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::issueAssetType((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_getContract(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::getContract((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_getMint(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::getMint((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_createAssetAccount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::createAssetAccount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_getAccount(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::getAccount((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_getAccountFiles(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::getAccountFiles((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GenerateBasketCreation(void *swig_v)
{
  std::string *arg1 = 0 ;
  int64_t *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long long arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  arg2 = (int64_t *)&swig_a->arg2; 
  
  result = OTAPI_Wrap::GenerateBasketCreation((std::string const &)*arg1,(long long const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_AddBasketCreationItem(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long long arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = (int64_t *)&swig_a->arg4; 
  
  result = OTAPI_Wrap::AddBasketCreationItem((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(long long const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_issueBasket(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::issueBasket((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_GenerateBasketExchange(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    intgo arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  arg5 = (int32_t *)&swig_a->arg5; 
  
  result = OTAPI_Wrap::GenerateBasketExchange((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(int const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_AddBasketExchangeItem(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = OTAPI_Wrap::AddBasketExchangeItem((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_exchangeBasket(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool *arg5 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    bool arg5;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  arg5 = (bool *)&swig_a->arg5; 
  
  result = (int32_t)OTAPI_Wrap::exchangeBasket((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(bool const &)*arg5);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_notarizeWithdrawal(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long long arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = (int64_t *)&swig_a->arg4; 
  
  result = (int32_t)OTAPI_Wrap::notarizeWithdrawal((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(long long const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_notarizeDeposit(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (int32_t)OTAPI_Wrap::notarizeDeposit((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_notarizeTransfer(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t *arg5 = 0 ;
  std::string *arg6 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long long arg5;
    _gostring_ arg6;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  arg5 = (int64_t *)&swig_a->arg5; 
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  result = (int32_t)OTAPI_Wrap::notarizeTransfer((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(long long const &)*arg5,(std::string const &)*arg6);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_getInbox(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::getInbox((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_getOutbox(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::getOutbox((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_getNymbox(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::getNymbox((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_LoadNymbox(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::LoadNymbox((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_LoadNymboxNoVerify(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = OTAPI_Wrap::LoadNymboxNoVerify((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Nymbox_GetReplyNotice(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int64_t *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long long arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (int64_t *)&swig_a->arg3; 
  
  result = OTAPI_Wrap::Nymbox_GetReplyNotice((std::string const &)*arg1,(std::string const &)*arg2,(long long const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_HaveAlreadySeenReply(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int64_t *arg3 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long long arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (int64_t *)&swig_a->arg3; 
  
  result = (bool)OTAPI_Wrap::HaveAlreadySeenReply((std::string const &)*arg1,(std::string const &)*arg2,(long long const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_getBoxReceipt(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t *arg4 = 0 ;
  int64_t *arg5 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    intgo arg4;
    long long arg5;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = (int32_t *)&swig_a->arg4; 
  arg5 = (int64_t *)&swig_a->arg5; 
  
  result = (int32_t)OTAPI_Wrap::getBoxReceipt((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(int const &)*arg4,(long long const &)*arg5);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_DoesBoxReceiptExist(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t *arg4 = 0 ;
  int64_t *arg5 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    intgo arg4;
    long long arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = (int32_t *)&swig_a->arg4; 
  arg5 = (int64_t *)&swig_a->arg5; 
  
  result = (bool)OTAPI_Wrap::DoesBoxReceiptExist((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(int const &)*arg4,(long long const &)*arg5);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_processInbox(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (int32_t)OTAPI_Wrap::processInbox((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_processNymbox(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::processNymbox((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_withdrawVoucher(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int64_t *arg6 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long long arg6;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  arg6 = (int64_t *)&swig_a->arg6; 
  
  result = (int32_t)OTAPI_Wrap::withdrawVoucher((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(long long const &)*arg6);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_payDividend(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int64_t *arg6 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long long arg6;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  arg6 = (int64_t *)&swig_a->arg6; 
  
  result = (int32_t)OTAPI_Wrap::payDividend((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(long long const &)*arg6);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_depositCheque(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (int32_t)OTAPI_Wrap::depositCheque((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_depositPaymentPlan(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::depositPaymentPlan((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_issueMarketOffer(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int64_t *arg3 = 0 ;
  int64_t *arg4 = 0 ;
  int64_t *arg5 = 0 ;
  int64_t *arg6 = 0 ;
  bool *arg7 = 0 ;
  WrapTimeT *arg8 = 0 ;
  std::string *arg9 = 0 ;
  int64_t *arg10 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long long arg3;
    long long arg4;
    long long arg5;
    long long arg6;
    bool arg7;
    WrapTimeT *arg8;
    _gostring_ arg9;
    long long arg10;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (int64_t *)&swig_a->arg3; 
  arg4 = (int64_t *)&swig_a->arg4; 
  arg5 = (int64_t *)&swig_a->arg5; 
  arg6 = (int64_t *)&swig_a->arg6; 
  arg7 = (bool *)&swig_a->arg7; 
  arg8 = *(WrapTimeT **)&swig_a->arg8; 
  
  std::string arg9_str(swig_a->arg9.p, swig_a->arg9.n);
  arg9 = &arg9_str;
  
  arg10 = (int64_t *)&swig_a->arg10; 
  
  result = (int32_t)OTAPI_Wrap::issueMarketOffer((std::string const &)*arg1,(std::string const &)*arg2,(long long const &)*arg3,(long long const &)*arg4,(long long const &)*arg5,(long long const &)*arg6,(bool const &)*arg7,(WrapTimeT const &)*arg8,(std::string const &)*arg9,(long long const &)*arg10);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_getMarketList(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::getMarketList((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_getMarketOffers(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long long arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = (int64_t *)&swig_a->arg4; 
  
  result = (int32_t)OTAPI_Wrap::getMarketOffers((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(long long const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_getMarketRecentTrades(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::getMarketRecentTrades((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_getNym_MarketOffers(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)OTAPI_Wrap::getNym_MarketOffers((std::string const &)*arg1,(std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_killMarketOffer(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long long arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = (int64_t *)&swig_a->arg4; 
  
  result = (int32_t)OTAPI_Wrap::killMarketOffer((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(long long const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_killPaymentPlan(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long long arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = (int64_t *)&swig_a->arg4; 
  
  result = (int32_t)OTAPI_Wrap::killPaymentPlan((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(long long const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_PopMessageBuffer(void *swig_v)
{
  int64_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    long long arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int64_t *)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::PopMessageBuffer((long long const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_FlushMessageBuffer(void *swig_v)
{
  struct swigargs {
    
  } *swig_a = (struct swigargs *) swig_v;
  
  
  OTAPI_Wrap::FlushMessageBuffer();
  
}


void
_wrap_OTAPI_Wrap_GetSentMessage(void *swig_v)
{
  int64_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    long long arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int64_t *)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = OTAPI_Wrap::GetSentMessage((long long const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_RemoveSentMessage(void *swig_v)
{
  int64_t *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  struct swigargs {
    long long arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int64_t *)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (bool)OTAPI_Wrap::RemoveSentMessage((long long const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_FlushSentMessages(void *swig_v)
{
  bool *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  struct swigargs {
    bool arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (bool *)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  OTAPI_Wrap::FlushSentMessages((bool const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  
}


void
_wrap_OTAPI_Wrap_Sleep(void *swig_v)
{
  int64_t *arg1 = 0 ;
  
  struct swigargs {
    long long arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (int64_t *)&swig_a->arg1; 
  
  OTAPI_Wrap::Sleep((long long const &)*arg1);
  
}


void
_wrap_OTAPI_Wrap_ResyncNymWithServer(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (bool)OTAPI_Wrap::ResyncNymWithServer((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Message_GetCommand(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Message_GetCommand((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Message_GetSuccess(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int32_t)OTAPI_Wrap::Message_GetSuccess((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_queryAssetTypes(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (int32_t)OTAPI_Wrap::queryAssetTypes((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Message_GetPayload(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Message_GetPayload((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Message_GetDepth(void *swig_v)
{
  std::string *arg1 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (int32_t)OTAPI_Wrap::Message_GetDepth((std::string const &)*arg1);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Message_GetTransactionSuccess(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (int32_t)OTAPI_Wrap::Message_GetTransactionSuccess((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Message_IsTransactionCanceled(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (int32_t)OTAPI_Wrap::Message_IsTransactionCanceled((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Message_GetBalanceAgreementSuccess(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (int32_t)OTAPI_Wrap::Message_GetBalanceAgreementSuccess((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_Message_GetLedger(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Message_GetLedger((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Message_GetNewAssetTypeID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Message_GetNewAssetTypeID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Message_GetNewIssuerAcctID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Message_GetNewIssuerAcctID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Message_GetNewAcctID(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Message_GetNewAcctID((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_Message_GetNymboxHash(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = OTAPI_Wrap::Message_GetNymboxHash((std::string const &)*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OTAPI_Wrap_ConnectServer(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (bool)OTAPI_Wrap::ConnectServer((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = result; 
}


void
_wrap_OTAPI_Wrap_ProcessSockets(void *swig_v)
{
  bool result;
  
  struct swigargs {
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (bool)OTAPI_Wrap::ProcessSockets();
  swig_a->result = result; 
}


void
_wrap_OT_CLI_GetArgsCount(void *swig_v)
{
  std::string arg1 ;
  int32_t result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  
  result = (int32_t)OT_CLI_GetArgsCount(arg1);
  swig_a->result = result; 
}


void
_wrap_OT_CLI_GetValueByKey(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = OT_CLI_GetValueByKey(arg1,arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_CLI_GetValueByIndex(void *swig_v)
{
  std::string arg1 ;
  int32_t arg2 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  arg2 = (int32_t)swig_a->arg2; 
  
  result = OT_CLI_GetValueByIndex(arg1,arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_CLI_GetKeyByIndex(void *swig_v)
{
  std::string arg1 ;
  int32_t arg2 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    intgo arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  arg2 = (int32_t)swig_a->arg2; 
  
  result = OT_CLI_GetKeyByIndex(arg1,arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_CLI_ReadLine(void *swig_v)
{
  std::string result;
  
  struct swigargs {
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OT_CLI_ReadLine();
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_CLI_ReadUntilEOF(void *swig_v)
{
  std::string result;
  
  struct swigargs {
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OT_CLI_ReadUntilEOF();
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_new_OT_ME(void *swig_v)
{
  OT_ME *result = 0 ;
  
  struct swigargs {
    long : 0;
    OT_ME *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (OT_ME *)new OT_ME();
  *(OT_ME **)&swig_a->result = result; 
}


void
_wrap_delete_OT_ME(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  
  struct swigargs {
    OT_ME *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_OT_ME_opentxs_main_loop(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  int32_t result;
  
  struct swigargs {
    OT_ME *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  result = (int32_t)(arg1)->opentxs_main_loop();
  swig_a->result = result; 
}


void
_wrap_OT_ME_make_sure_enough_trans_nums(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  int32_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    OT_ME *arg1;
    intgo arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  arg2 = (int32_t)swig_a->arg2; 
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (bool)(arg1)->make_sure_enough_trans_nums(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OT_ME_register_nym(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (arg1)->register_nym((std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_check_user(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (arg1)->check_user((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_create_pseudonym(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  int32_t arg2 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    intgo arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  arg2 = (int32_t)swig_a->arg2; 
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (arg1)->create_pseudonym(arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_issue_asset_type(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (arg1)->issue_asset_type((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_issue_basket_currency(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (arg1)->issue_basket_currency((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_exchange_basket_currency(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  bool arg7 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    bool arg7;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  arg7 = (bool)swig_a->arg7; 
  
  result = (arg1)->exchange_basket_currency((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,arg7);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_retrieve_contract(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (arg1)->retrieve_contract((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_load_or_retrieve_contract(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (arg1)->load_or_retrieve_contract((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_create_asset_acct(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (arg1)->create_asset_acct((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_stat_asset_account(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (arg1)->stat_asset_account((std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_retrieve_account__SWIG_0(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (bool)(arg1)->retrieve_account((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OT_ME_retrieve_account__SWIG_1(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    bool arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  arg5 = (bool)swig_a->arg5; 
  
  result = (bool)(arg1)->retrieve_account((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_OT_ME_retrieve_nym__SWIG_0(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (bool)(arg1)->retrieve_nym((std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = result; 
}


void
_wrap_OT_ME_retrieve_nym__SWIG_1(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    bool arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = (bool)swig_a->arg4; 
  
  result = (bool)(arg1)->retrieve_nym((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_OT_ME_send_transfer(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int64_t arg6 ;
  std::string *arg7 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long long arg6;
    _gostring_ arg7;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  arg6 = (int64_t)swig_a->arg6; 
  
  std::string arg7_str(swig_a->arg7.p, swig_a->arg7.n);
  arg7 = &arg7_str;
  
  
  result = (arg1)->send_transfer((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,arg6,(std::string const &)*arg7);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_process_inbox(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (arg1)->process_inbox((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_accept_inbox_items(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  int32_t arg3 ;
  std::string *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    intgo arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (int32_t)swig_a->arg3; 
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (bool)(arg1)->accept_inbox_items((std::string const &)*arg2,arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OT_ME_discard_incoming_payments(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (bool)(arg1)->discard_incoming_payments((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OT_ME_cancel_outgoing_payments(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (bool)(arg1)->cancel_outgoing_payments((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OT_ME_accept_from_paymentbox(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (int32_t)(arg1)->accept_from_paymentbox((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = result; 
}


void
_wrap_OT_ME_load_public_encryption_key(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (arg1)->load_public_encryption_key((std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_load_public_signing_key(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (arg1)->load_public_signing_key((std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_load_or_retrieve_encrypt_key(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (arg1)->load_or_retrieve_encrypt_key((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_load_or_retrieve_signing_key(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (arg1)->load_or_retrieve_signing_key((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_send_user_msg_pubkey(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  result = (arg1)->send_user_msg_pubkey((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_send_user_pmnt_pubkey(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  result = (arg1)->send_user_pmnt_pubkey((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_send_user_cash_pubkey(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    _gostring_ arg7;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  std::string arg7_str(swig_a->arg7.p, swig_a->arg7.n);
  arg7 = &arg7_str;
  
  
  result = (arg1)->send_user_cash_pubkey((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_send_user_msg(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (arg1)->send_user_msg((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_send_user_payment(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (arg1)->send_user_payment((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_send_user_cash(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  result = (arg1)->send_user_cash((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_withdraw_and_send_cash(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t arg5 ;
  bool result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long long arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  arg5 = (int64_t)swig_a->arg5; 
  
  result = (bool)(arg1)->withdraw_and_send_cash((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_OT_ME_get_payment_instrument__SWIG_0(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t arg4 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    intgo arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = (int32_t)swig_a->arg4; 
  
  result = (arg1)->get_payment_instrument((std::string const &)*arg2,(std::string const &)*arg3,arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_get_payment_instrument__SWIG_1(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int32_t arg4 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    intgo arg4;
    _gostring_ arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = (int32_t)swig_a->arg4; 
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (arg1)->get_payment_instrument((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_get_box_receipt(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int32_t arg5 ;
  int64_t arg6 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    intgo arg5;
    long long arg6;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  arg5 = (int32_t)swig_a->arg5; 
  arg6 = (int64_t)swig_a->arg6; 
  
  result = (arg1)->get_box_receipt((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5,arg6);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_retrieve_mint(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (arg1)->retrieve_mint((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_load_or_retrieve_mint(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (arg1)->load_or_retrieve_mint((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_query_asset_types(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (arg1)->query_asset_types((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_create_market_offer(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t arg4 ;
  int64_t arg5 ;
  int64_t arg6 ;
  int64_t arg7 ;
  bool arg8 ;
  int64_t arg9 ;
  std::string arg10 ;
  int64_t arg11 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long long arg4;
    long long arg5;
    long long arg6;
    long long arg7;
    bool arg8;
    long long arg9;
    _gostring_ arg10;
    long long arg11;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = (int64_t)swig_a->arg4; 
  arg5 = (int64_t)swig_a->arg5; 
  arg6 = (int64_t)swig_a->arg6; 
  arg7 = (int64_t)swig_a->arg7; 
  arg8 = (bool)swig_a->arg8; 
  arg9 = (int64_t)swig_a->arg9; 
  (&arg10)->assign(swig_a->arg10.p, swig_a->arg10.n); 
  arg11 = (int64_t)swig_a->arg11; 
  
  result = (arg1)->create_market_offer((std::string const &)*arg2,(std::string const &)*arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_kill_market_offer(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t arg5 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long long arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  arg5 = (int64_t)swig_a->arg5; 
  
  result = (arg1)->kill_market_offer((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_kill_payment_plan(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t arg5 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long long arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  arg5 = (int64_t)swig_a->arg5; 
  
  result = (arg1)->kill_payment_plan((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_cancel_payment_plan(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (arg1)->cancel_payment_plan((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_activate_smart_contract(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  result = (arg1)->activate_smart_contract((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_trigger_clause(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int64_t arg4 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long long arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  arg4 = (int64_t)swig_a->arg4; 
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  result = (arg1)->trigger_clause((std::string const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_withdraw_cash(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t arg5 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long long arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  arg5 = (int64_t)swig_a->arg5; 
  
  result = (arg1)->withdraw_cash((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_easy_withdraw_cash(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  int64_t arg3 ;
  int32_t result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    long long arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = (int64_t)swig_a->arg3; 
  
  result = (int32_t)(arg1)->easy_withdraw_cash((std::string const &)*arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_OT_ME_export_cash(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  bool arg7 ;
  std::string *arg8 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    bool arg7;
    std::string *arg8;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  arg7 = (bool)swig_a->arg7; 
  arg8 = *(std::string **)&swig_a->arg8; 
  
  result = (arg1)->export_cash((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,arg7,*arg8);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_withdraw_voucher(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  int64_t arg7 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long long arg7;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  arg7 = (int64_t)swig_a->arg7; 
  
  result = (arg1)->withdraw_voucher((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,arg7);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_pay_dividend(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  int64_t arg7 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long long arg7;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  arg7 = (int64_t)swig_a->arg7; 
  
  result = (arg1)->pay_dividend((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,arg7);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_deposit_cheque(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (arg1)->deposit_cheque((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_deposit_cash(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int32_t result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (int32_t)(arg1)->deposit_cash((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = result; 
}


void
_wrap_OT_ME_deposit_local_purse(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int32_t result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (int32_t)(arg1)->deposit_local_purse((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = result; 
}


void
_wrap_OT_ME_get_market_list(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (arg1)->get_market_list((std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_get_market_offers(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  int64_t arg5 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long long arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  arg5 = (int64_t)swig_a->arg5; 
  
  result = (arg1)->get_market_offers((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_get_nym_market_offers(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  result = (arg1)->get_nym_market_offers((std::string const &)*arg2,(std::string const &)*arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_get_market_recent_trades(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  result = (arg1)->get_market_recent_trades((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_adjust_usage_credits(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (arg1)->adjust_usage_credits((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_VerifyMessageSuccess(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)(arg1)->VerifyMessageSuccess((std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OT_ME_VerifyMsgBalanceAgrmntSuccess(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int32_t result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (int32_t)(arg1)->VerifyMsgBalanceAgrmntSuccess((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = result; 
}


void
_wrap_OT_ME_VerifyMsgTrnxSuccess(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  int32_t result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  result = (int32_t)(arg1)->VerifyMsgTrnxSuccess((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  swig_a->result = result; 
}


void
_wrap_OT_ME_InterpretTransactionMsgReply(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  int32_t result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  std::string arg4_str(swig_a->arg4.p, swig_a->arg4.n);
  arg4 = &arg4_str;
  
  
  std::string arg5_str(swig_a->arg5.p, swig_a->arg5.n);
  arg5 = &arg5_str;
  
  
  std::string arg6_str(swig_a->arg6.p, swig_a->arg6.n);
  arg6 = &arg6_str;
  
  
  result = (int32_t)(arg1)->InterpretTransactionMsgReply((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  swig_a->result = result; 
}


void
_wrap_OT_ME_ExecuteScript_ReturnString__SWIG_0(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (arg1)->ExecuteScript_ReturnString((std::string const &)*arg2,arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_ExecuteScript_ReturnString__SWIG_1(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (arg1)->ExecuteScript_ReturnString((std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_OT_ME_ExecuteScript_ReturnBool__SWIG_0(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  bool result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (bool)(arg1)->ExecuteScript_ReturnBool((std::string const &)*arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_OT_ME_ExecuteScript_ReturnBool__SWIG_1(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (bool)(arg1)->ExecuteScript_ReturnBool((std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OT_ME_ExecuteScript_ReturnInt__SWIG_0(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  int32_t result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (int32_t)(arg1)->ExecuteScript_ReturnInt((std::string const &)*arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_OT_ME_ExecuteScript_ReturnInt__SWIG_1(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  int32_t result;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (int32_t)(arg1)->ExecuteScript_ReturnInt((std::string const &)*arg2);
  swig_a->result = result; 
}


void
_wrap_OT_ME_ExecuteScript_ReturnVoid__SWIG_0(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  (arg1)->ExecuteScript_ReturnVoid((std::string const &)*arg2,arg3);
  
}


void
_wrap_OT_ME_ExecuteScript_ReturnVoid__SWIG_1(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  (arg1)->ExecuteScript_ReturnVoid((std::string const &)*arg2);
  
}


void
_wrap_OT_ME_AddVariable(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  OTVariable *arg3 = 0 ;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    OTVariable *arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  arg3 = *(OTVariable **)&swig_a->arg3; 
  
  (arg1)->AddVariable((std::string const &)*arg2,*arg3);
  
}


void
_wrap_OT_ME_FindVariable(void *swig_v)
{
  OT_ME *arg1 = (OT_ME *) 0 ;
  std::string *arg2 = 0 ;
  OTVariable *result = 0 ;
  
  struct swigargs {
    OT_ME *arg1;
    _gostring_ arg2;
    long : 0;
    OTVariable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OT_ME **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (OTVariable *)(arg1)->FindVariable((std::string const &)*arg2);
  *(OTVariable **)&swig_a->result = result; 
}


void
_wrap_OT_ME_FindVariable2(void *swig_v)
{
  std::string *arg1 = 0 ;
  OTVariable *result = 0 ;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    OTVariable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  std::string arg1_str(swig_a->arg1.p, swig_a->arg1.n);
  arg1 = &arg1_str;
  
  
  result = (OTVariable *)OT_ME::FindVariable2((std::string const &)*arg1);
  *(OTVariable **)&swig_a->result = result; 
}


void
_wrap_PACK_MESSAGE_PACK(void *swig_v)
{
  OTDB::PackType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::PACK_MESSAGE_PACK;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_PACK_PROTOCOL_BUFFERS(void *swig_v)
{
  OTDB::PackType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::PACK_PROTOCOL_BUFFERS;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_PACK_TYPE_ERROR(void *swig_v)
{
  OTDB::PackType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::PACK_TYPE_ERROR;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORE_FILESYSTEM(void *swig_v)
{
  OTDB::StorageType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORE_FILESYSTEM;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORE_TYPE_SUBCLASS(void *swig_v)
{
  OTDB::StorageType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORE_TYPE_SUBCLASS;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_STRING(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_STRING;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_BLOB(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_BLOB;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_STRING_MAP(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_STRING_MAP;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_WALLET_DATA(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_WALLET_DATA;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_BITCOIN_ACCT(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_BITCOIN_ACCT;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_BITCOIN_SERVER(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_BITCOIN_SERVER;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_RIPPLE_SERVER(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_RIPPLE_SERVER;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_LOOM_SERVER(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_LOOM_SERVER;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_SERVER_INFO(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_SERVER_INFO;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_CONTACT_NYM(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_CONTACT_NYM;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_CONTACT_ACCT(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_CONTACT_ACCT;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_CONTACT(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_CONTACT;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_ADDRESS_BOOK(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_ADDRESS_BOOK;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_MARKET_DATA(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_MARKET_DATA;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_MARKET_LIST(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_MARKET_LIST;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_BID_DATA(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_BID_DATA;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_ASK_DATA(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_ASK_DATA;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_OFFER_LIST_MARKET(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_OFFER_LIST_MARKET;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_TRADE_DATA_MARKET(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_TRADE_DATA_MARKET;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_TRADE_LIST_MARKET(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_TRADE_LIST_MARKET;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_OFFER_DATA_NYM(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_OFFER_DATA_NYM;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_OFFER_LIST_NYM(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_OFFER_LIST_NYM;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_TRADE_DATA_NYM(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_TRADE_DATA_NYM;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_TRADE_LIST_NYM(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_TRADE_LIST_NYM;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_STORED_OBJ_ERROR(void *swig_v)
{
  OTDB::StoredObjectType result;
  
  struct swigargs {
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = OTDB::STORED_OBJ_ERROR;
  
  swig_a->result = (intgo)result; 
}


void
_wrap_delete_Storable(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_Storable_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_Storable_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::Storable *)OTDB::Storable::ot_dynamic_cast(arg1);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_Storage_GetPacker__SWIG_0(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::PackType arg2 ;
  OTPacker *result = 0 ;
  
  struct swigargs {
    OTDB::Storage *arg1;
    intgo arg2;
    long : 0;
    OTPacker *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTPacker *)(arg1)->GetPacker(arg2);
  *(OTPacker **)&swig_a->result = result; 
}


void
_wrap_Storage_GetPacker__SWIG_1(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTPacker *result = 0 ;
  
  struct swigargs {
    OTDB::Storage *arg1;
    long : 0;
    OTPacker *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  
  result = (OTPacker *)(arg1)->GetPacker();
  *(OTPacker **)&swig_a->result = result; 
}


void
_wrap_Storage_Exists__SWIG_0(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  
  result = (bool)(arg1)->Exists(arg2,arg3,arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_Storage_Exists__SWIG_1(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (bool)(arg1)->Exists(arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_Storage_Exists__SWIG_2(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (bool)(arg1)->Exists(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_Storage_Exists__SWIG_3(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = (bool)(arg1)->Exists(arg2);
  swig_a->result = result; 
}


void
_wrap_Storage_FormPathString__SWIG_0(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  int64_t result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    std::string *arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = *(std::string **)&swig_a->arg2; 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  (&arg6)->assign(swig_a->arg6.p, swig_a->arg6.n); 
  
  result = (int64_t)(arg1)->FormPathString(*arg2,arg3,arg4,arg5,arg6);
  swig_a->result = result; 
}


void
_wrap_Storage_FormPathString__SWIG_1(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  int64_t result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    std::string *arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = *(std::string **)&swig_a->arg2; 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  
  result = (int64_t)(arg1)->FormPathString(*arg2,arg3,arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_Storage_FormPathString__SWIG_2(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  int64_t result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    std::string *arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = *(std::string **)&swig_a->arg2; 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (int64_t)(arg1)->FormPathString(*arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_Storage_FormPathString__SWIG_3(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string *arg2 = 0 ;
  std::string arg3 ;
  int64_t result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    std::string *arg2;
    _gostring_ arg3;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = *(std::string **)&swig_a->arg2; 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (int64_t)(arg1)->FormPathString(*arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_delete_Storage(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  
  struct swigargs {
    OTDB::Storage *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_Storage_StoreString__SWIG_0(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  (&arg6)->assign(swig_a->arg6.p, swig_a->arg6.n); 
  
  result = (bool)(arg1)->StoreString(arg2,arg3,arg4,arg5,arg6);
  swig_a->result = result; 
}


void
_wrap_Storage_StoreString__SWIG_1(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  
  result = (bool)(arg1)->StoreString(arg2,arg3,arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_Storage_StoreString__SWIG_2(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (bool)(arg1)->StoreString(arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_Storage_StoreString__SWIG_3(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (bool)(arg1)->StoreString(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_Storage_QueryString__SWIG_0(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  
  result = (arg1)->QueryString(arg2,arg3,arg4,arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_Storage_QueryString__SWIG_1(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (arg1)->QueryString(arg2,arg3,arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_Storage_QueryString__SWIG_2(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (arg1)->QueryString(arg2,arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_Storage_QueryString__SWIG_3(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = (arg1)->QueryString(arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_Storage_StorePlainString__SWIG_0(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  (&arg6)->assign(swig_a->arg6.p, swig_a->arg6.n); 
  
  result = (bool)(arg1)->StorePlainString(arg2,arg3,arg4,arg5,arg6);
  swig_a->result = result; 
}


void
_wrap_Storage_StorePlainString__SWIG_1(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  
  result = (bool)(arg1)->StorePlainString(arg2,arg3,arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_Storage_StorePlainString__SWIG_2(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (bool)(arg1)->StorePlainString(arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_Storage_StorePlainString__SWIG_3(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (bool)(arg1)->StorePlainString(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_Storage_QueryPlainString__SWIG_0(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  
  result = (arg1)->QueryPlainString(arg2,arg3,arg4,arg5);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_Storage_QueryPlainString__SWIG_1(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (arg1)->QueryPlainString(arg2,arg3,arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_Storage_QueryPlainString__SWIG_2(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (arg1)->QueryPlainString(arg2,arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_Storage_QueryPlainString__SWIG_3(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = (arg1)->QueryPlainString(arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_Storage_StoreObject__SWIG_0(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::Storable *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    OTDB::Storable *arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = *(OTDB::Storable **)&swig_a->arg2; 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  (&arg6)->assign(swig_a->arg6.p, swig_a->arg6.n); 
  
  result = (bool)(arg1)->StoreObject(*arg2,arg3,arg4,arg5,arg6);
  swig_a->result = result; 
}


void
_wrap_Storage_StoreObject__SWIG_1(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::Storable *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    OTDB::Storable *arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = *(OTDB::Storable **)&swig_a->arg2; 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  
  result = (bool)(arg1)->StoreObject(*arg2,arg3,arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_Storage_StoreObject__SWIG_2(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::Storable *arg2 = 0 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    OTDB::Storable *arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = *(OTDB::Storable **)&swig_a->arg2; 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (bool)(arg1)->StoreObject(*arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_Storage_StoreObject__SWIG_3(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::Storable *arg2 = 0 ;
  std::string arg3 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    OTDB::Storable *arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = *(OTDB::Storable **)&swig_a->arg2; 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (bool)(arg1)->StoreObject(*arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_Storage_QueryObject__SWIG_0(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  std::string arg6 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    OTDB::Storage *arg1;
    intgo arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    _gostring_ arg6;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = (OTDB::StoredObjectType)swig_a->arg2; 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  (&arg6)->assign(swig_a->arg6.p, swig_a->arg6.n); 
  
  result = (OTDB::Storable *)(arg1)->QueryObject(arg2,arg3,arg4,arg5,arg6);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_Storage_QueryObject__SWIG_1(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    OTDB::Storage *arg1;
    intgo arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = (OTDB::StoredObjectType)swig_a->arg2; 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  
  result = (OTDB::Storable *)(arg1)->QueryObject(arg2,arg3,arg4,arg5);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_Storage_QueryObject__SWIG_2(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    OTDB::Storage *arg1;
    intgo arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = (OTDB::StoredObjectType)swig_a->arg2; 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (OTDB::Storable *)(arg1)->QueryObject(arg2,arg3,arg4);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_Storage_QueryObject__SWIG_3(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  std::string arg3 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    OTDB::Storage *arg1;
    intgo arg2;
    _gostring_ arg3;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = (OTDB::StoredObjectType)swig_a->arg2; 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (OTDB::Storable *)(arg1)->QueryObject(arg2,arg3);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_Storage_EncodeObject(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::Storable *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    OTDB::Storable *arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = *(OTDB::Storable **)&swig_a->arg2; 
  
  result = (arg1)->EncodeObject(*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_Storage_DecodeObject(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  std::string arg3 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    OTDB::Storage *arg1;
    intgo arg2;
    _gostring_ arg3;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = (OTDB::StoredObjectType)swig_a->arg2; 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (OTDB::Storable *)(arg1)->DecodeObject(arg2,arg3);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_Storage_EraseValueByKey__SWIG_0(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  
  result = (bool)(arg1)->EraseValueByKey(arg2,arg3,arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_Storage_EraseValueByKey__SWIG_1(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (bool)(arg1)->EraseValueByKey(arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_Storage_EraseValueByKey__SWIG_2(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (bool)(arg1)->EraseValueByKey(arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_Storage_EraseValueByKey__SWIG_3(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  std::string arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = (bool)(arg1)->EraseValueByKey(arg2);
  swig_a->result = result; 
}


void
_wrap_Storage_CreateObject(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StoredObjectType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    OTDB::Storage *arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  arg2 = (OTDB::StoredObjectType)swig_a->arg2; 
  
  result = (OTDB::Storable *)(arg1)->CreateObject(arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_Storage_Create(void *swig_v)
{
  OTDB::StorageType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storage *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storage *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StorageType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storage *)OTDB::Storage::Create(arg1,arg2);
  *(OTDB::Storage **)&swig_a->result = result; 
}


void
_wrap_Storage_GetType(void *swig_v)
{
  OTDB::Storage *arg1 = (OTDB::Storage *) 0 ;
  OTDB::StorageType result;
  
  struct swigargs {
    OTDB::Storage *arg1;
    long : 0;
    intgo result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storage **)&swig_a->arg1; 
  
  result = (OTDB::StorageType)((OTDB::Storage const *)arg1)->GetType();
  swig_a->result = (intgo)result; 
}


void
_wrap_InitDefaultStorage(void *swig_v)
{
  OTDB::StorageType arg1 ;
  OTDB::PackType arg2 ;
  bool result;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StorageType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (bool)OTDB::InitDefaultStorage(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_GetDefaultStorage(void *swig_v)
{
  OTDB::Storage *result = 0 ;
  
  struct swigargs {
    long : 0;
    OTDB::Storage *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  
  result = (OTDB::Storage *)OTDB::GetDefaultStorage();
  *(OTDB::Storage **)&swig_a->result = result; 
}


void
_wrap_CreateStorageContext__SWIG_0(void *swig_v)
{
  OTDB::StorageType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storage *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storage *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StorageType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storage *)OTDB::CreateStorageContext(arg1,arg2);
  *(OTDB::Storage **)&swig_a->result = result; 
}


void
_wrap_CreateStorageContext__SWIG_1(void *swig_v)
{
  OTDB::StorageType arg1 ;
  OTDB::Storage *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    OTDB::Storage *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StorageType)swig_a->arg1; 
  
  result = (OTDB::Storage *)OTDB::CreateStorageContext(arg1);
  *(OTDB::Storage **)&swig_a->result = result; 
}


void
_wrap_CreateObject(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  
  result = (OTDB::Storable *)OTDB::CreateObject(arg1);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_CheckStringsExistInOrder__SWIG_0(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  struct swigargs {
    std::string *arg1;
    std::string *arg2;
    std::string *arg3;
    std::string *arg4;
    _gostring_ arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::string **)&swig_a->arg1; 
  arg2 = *(std::string **)&swig_a->arg2; 
  arg3 = *(std::string **)&swig_a->arg3; 
  arg4 = *(std::string **)&swig_a->arg4; 
  arg5 = (char *)swig_a->arg5.p; 
  
  result = (bool)OTDB::CheckStringsExistInOrder(*arg1,*arg2,*arg3,*arg4,(char const *)arg5);
  swig_a->result = result; 
}


void
_wrap_CheckStringsExistInOrder__SWIG_1(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  struct swigargs {
    std::string *arg1;
    std::string *arg2;
    std::string *arg3;
    std::string *arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::string **)&swig_a->arg1; 
  arg2 = *(std::string **)&swig_a->arg2; 
  arg3 = *(std::string **)&swig_a->arg3; 
  arg4 = *(std::string **)&swig_a->arg4; 
  
  result = (bool)OTDB::CheckStringsExistInOrder(*arg1,*arg2,*arg3,*arg4);
  swig_a->result = result; 
}


void
_wrap_Exists__SWIG_0(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (bool)OTDB::Exists(arg1,arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_Exists__SWIG_1(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (bool)OTDB::Exists(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_Exists__SWIG_2(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = (bool)OTDB::Exists(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_Exists__SWIG_3(void *swig_v)
{
  std::string arg1 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  
  result = (bool)OTDB::Exists(arg1);
  swig_a->result = result; 
}


void
_wrap_FormPathString__SWIG_0(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  int64_t result;
  
  struct swigargs {
    std::string *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::string **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  
  result = (int64_t)OTDB::FormPathString(*arg1,arg2,arg3,arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_FormPathString__SWIG_1(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int64_t result;
  
  struct swigargs {
    std::string *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::string **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (int64_t)OTDB::FormPathString(*arg1,arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_FormPathString__SWIG_2(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  int64_t result;
  
  struct swigargs {
    std::string *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::string **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (int64_t)OTDB::FormPathString(*arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_FormPathString__SWIG_3(void *swig_v)
{
  std::string *arg1 = 0 ;
  std::string arg2 ;
  int64_t result;
  
  struct swigargs {
    std::string *arg1;
    _gostring_ arg2;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(std::string **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = (int64_t)OTDB::FormPathString(*arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_StoreString__SWIG_0(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  
  result = (bool)OTDB::StoreString(arg1,arg2,arg3,arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_StoreString__SWIG_1(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (bool)OTDB::StoreString(arg1,arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_StoreString__SWIG_2(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (bool)OTDB::StoreString(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_StoreString__SWIG_3(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = (bool)OTDB::StoreString(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_QueryString__SWIG_0(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = OTDB::QueryString(arg1,arg2,arg3,arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_QueryString__SWIG_1(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = OTDB::QueryString(arg1,arg2,arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_QueryString__SWIG_2(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = OTDB::QueryString(arg1,arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_QueryString__SWIG_3(void *swig_v)
{
  std::string arg1 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  
  result = OTDB::QueryString(arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_StorePlainString__SWIG_0(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  
  result = (bool)OTDB::StorePlainString(arg1,arg2,arg3,arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_StorePlainString__SWIG_1(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (bool)OTDB::StorePlainString(arg1,arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_StorePlainString__SWIG_2(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (bool)OTDB::StorePlainString(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_StorePlainString__SWIG_3(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = (bool)OTDB::StorePlainString(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_QueryPlainString__SWIG_0(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = OTDB::QueryPlainString(arg1,arg2,arg3,arg4);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_QueryPlainString__SWIG_1(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = OTDB::QueryPlainString(arg1,arg2,arg3);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_QueryPlainString__SWIG_2(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = OTDB::QueryPlainString(arg1,arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_QueryPlainString__SWIG_3(void *swig_v)
{
  std::string arg1 ;
  std::string result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  
  result = OTDB::QueryPlainString(arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_StoreObject__SWIG_0(void *swig_v)
{
  OTDB::Storable *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  bool result;
  
  struct swigargs {
    OTDB::Storable *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  
  result = (bool)OTDB::StoreObject(*arg1,arg2,arg3,arg4,arg5);
  swig_a->result = result; 
}


void
_wrap_StoreObject__SWIG_1(void *swig_v)
{
  OTDB::Storable *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  struct swigargs {
    OTDB::Storable *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (bool)OTDB::StoreObject(*arg1,arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_StoreObject__SWIG_2(void *swig_v)
{
  OTDB::Storable *arg1 = 0 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  struct swigargs {
    OTDB::Storable *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (bool)OTDB::StoreObject(*arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_StoreObject__SWIG_3(void *swig_v)
{
  OTDB::Storable *arg1 = 0 ;
  std::string arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::Storable *arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = (bool)OTDB::StoreObject(*arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_QueryObject__SWIG_0(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  std::string arg5 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    _gostring_ arg5;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  (&arg5)->assign(swig_a->arg5.p, swig_a->arg5.n); 
  
  result = (OTDB::Storable *)OTDB::QueryObject(arg1,arg2,arg3,arg4,arg5);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_QueryObject__SWIG_1(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (OTDB::Storable *)OTDB::QueryObject(arg1,arg2,arg3,arg4);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_QueryObject__SWIG_2(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (OTDB::Storable *)OTDB::QueryObject(arg1,arg2,arg3);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_QueryObject__SWIG_3(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  std::string arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    _gostring_ arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = (OTDB::Storable *)OTDB::QueryObject(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_EncodeObject(void *swig_v)
{
  OTDB::Storable *arg1 = 0 ;
  std::string result;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = OTDB::EncodeObject(*arg1);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_DecodeObject(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  std::string arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    _gostring_ arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = (OTDB::Storable *)OTDB::DecodeObject(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_EraseValueByKey__SWIG_0(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    _gostring_ arg4;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  (&arg4)->assign(swig_a->arg4.p, swig_a->arg4.n); 
  
  result = (bool)OTDB::EraseValueByKey(arg1,arg2,arg3,arg4);
  swig_a->result = result; 
}


void
_wrap_EraseValueByKey__SWIG_1(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  std::string arg3 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    _gostring_ arg3;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  (&arg3)->assign(swig_a->arg3.p, swig_a->arg3.n); 
  
  result = (bool)OTDB::EraseValueByKey(arg1,arg2,arg3);
  swig_a->result = result; 
}


void
_wrap_EraseValueByKey__SWIG_2(void *swig_v)
{
  std::string arg1 ;
  std::string arg2 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    _gostring_ arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  (&arg2)->assign(swig_a->arg2.p, swig_a->arg2.n); 
  
  result = (bool)OTDB::EraseValueByKey(arg1,arg2);
  swig_a->result = result; 
}


void
_wrap_EraseValueByKey__SWIG_3(void *swig_v)
{
  std::string arg1 ;
  bool result;
  
  struct swigargs {
    _gostring_ arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  (&arg1)->assign(swig_a->arg1.p, swig_a->arg1.n); 
  
  result = (bool)OTDB::EraseValueByKey(arg1);
  swig_a->result = result; 
}


void
_wrap_delete_OTDBString(void *swig_v)
{
  OTDB::OTDBString *arg1 = (OTDB::OTDBString *) 0 ;
  
  struct swigargs {
    OTDB::OTDBString *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OTDBString **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_OTDBString_m_string_set(void *swig_v)
{
  OTDB::OTDBString *arg1 = (OTDB::OTDBString *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OTDBString *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OTDBString **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->m_string = *arg2;
  
}


void
_wrap_OTDBString_m_string_get(void *swig_v)
{
  OTDB::OTDBString *arg1 = (OTDB::OTDBString *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OTDBString *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OTDBString **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->m_string);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OTDBString_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::OTDBString *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::OTDBString *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::OTDBString *)OTDB::OTDBString::ot_dynamic_cast(arg1);
  *(OTDB::OTDBString **)&swig_a->result = result; 
}


void
_wrap_OTDBString_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_Blob(void *swig_v)
{
  OTDB::Blob *arg1 = (OTDB::Blob *) 0 ;
  
  struct swigargs {
    OTDB::Blob *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Blob **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_Blob_m_memBuffer_set(void *swig_v)
{
  OTDB::Blob *arg1 = (OTDB::Blob *) 0 ;
  std::vector< uint8_t > *arg2 = (std::vector< uint8_t > *) 0 ;
  
  struct swigargs {
    OTDB::Blob *arg1;
    std::vector< unsigned char > *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Blob **)&swig_a->arg1; 
  arg2 = *(std::vector< uint8_t > **)&swig_a->arg2; 
  
  if (arg1) (arg1)->m_memBuffer = *arg2;
  
}


void
_wrap_Blob_m_memBuffer_get(void *swig_v)
{
  OTDB::Blob *arg1 = (OTDB::Blob *) 0 ;
  std::vector< uint8_t > *result = 0 ;
  
  struct swigargs {
    OTDB::Blob *arg1;
    long : 0;
    std::vector< unsigned char > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Blob **)&swig_a->arg1; 
  
  result = (std::vector< uint8_t > *)& ((arg1)->m_memBuffer);
  *(std::vector< uint8_t > **)&swig_a->result = result; 
}


void
_wrap_Blob_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::Blob *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::Blob *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::Blob *)OTDB::Blob::ot_dynamic_cast(arg1);
  *(OTDB::Blob **)&swig_a->result = result; 
}


void
_wrap_Blob_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_StringMap(void *swig_v)
{
  OTDB::StringMap *arg1 = (OTDB::StringMap *) 0 ;
  
  struct swigargs {
    OTDB::StringMap *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::StringMap **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_StringMap_the_map_set(void *swig_v)
{
  OTDB::StringMap *arg1 = (OTDB::StringMap *) 0 ;
  std::map< std::string,std::string > *arg2 = (std::map< std::string,std::string > *) 0 ;
  
  struct swigargs {
    OTDB::StringMap *arg1;
    std::map< std::string,std::string > *arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::StringMap **)&swig_a->arg1; 
  arg2 = *(std::map< std::string,std::string > **)&swig_a->arg2; 
  
  if (arg1) (arg1)->the_map = *arg2;
  
}


void
_wrap_StringMap_the_map_get(void *swig_v)
{
  OTDB::StringMap *arg1 = (OTDB::StringMap *) 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  struct swigargs {
    OTDB::StringMap *arg1;
    long : 0;
    std::map< std::string,std::string > *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::StringMap **)&swig_a->arg1; 
  
  result = (std::map< std::string,std::string > *)& ((arg1)->the_map);
  *(std::map< std::string,std::string > **)&swig_a->result = result; 
}


void
_wrap_StringMap_SetValue(void *swig_v)
{
  OTDB::StringMap *arg1 = (OTDB::StringMap *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  struct swigargs {
    OTDB::StringMap *arg1;
    _gostring_ arg2;
    _gostring_ arg3;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::StringMap **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  std::string arg3_str(swig_a->arg3.p, swig_a->arg3.n);
  arg3 = &arg3_str;
  
  
  (arg1)->SetValue((std::string const &)*arg2,(std::string const &)*arg3);
  
}


void
_wrap_StringMap_GetValue(void *swig_v)
{
  OTDB::StringMap *arg1 = (OTDB::StringMap *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  struct swigargs {
    OTDB::StringMap *arg1;
    _gostring_ arg2;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::StringMap **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  result = (arg1)->GetValue((std::string const &)*arg2);
  swig_a->result = _swig_makegostring((&result)->data(), (&result)->length()); 
}


void
_wrap_StringMap_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::StringMap *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::StringMap *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::StringMap *)OTDB::StringMap::ot_dynamic_cast(arg1);
  *(OTDB::StringMap **)&swig_a->result = result; 
}


void
_wrap_StringMap_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_Displayable(void *swig_v)
{
  OTDB::Displayable *arg1 = (OTDB::Displayable *) 0 ;
  
  struct swigargs {
    OTDB::Displayable *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Displayable **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_Displayable_gui_label_set(void *swig_v)
{
  OTDB::Displayable *arg1 = (OTDB::Displayable *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::Displayable *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Displayable **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_Displayable_gui_label_get(void *swig_v)
{
  OTDB::Displayable *arg1 = (OTDB::Displayable *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::Displayable *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Displayable **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_Displayable_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::Displayable *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::Displayable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::Displayable *)OTDB::Displayable::ot_dynamic_cast(arg1);
  *(OTDB::Displayable **)&swig_a->result = result; 
}


void
_wrap_Displayable_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_MarketData(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_MarketData_gui_label_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_MarketData_gui_label_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_server_id_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_id = *arg2;
  
}


void
_wrap_MarketData_server_id_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_market_id_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->market_id = *arg2;
  
}


void
_wrap_MarketData_market_id_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->market_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_asset_type_id_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->asset_type_id = *arg2;
  
}


void
_wrap_MarketData_asset_type_id_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->asset_type_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_currency_type_id_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->currency_type_id = *arg2;
  
}


void
_wrap_MarketData_currency_type_id_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->currency_type_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_scale_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->scale = *arg2;
  
}


void
_wrap_MarketData_scale_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->scale);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_total_assets_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->total_assets = *arg2;
  
}


void
_wrap_MarketData_total_assets_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->total_assets);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_number_bids_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->number_bids = *arg2;
  
}


void
_wrap_MarketData_number_bids_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->number_bids);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_number_asks_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->number_asks = *arg2;
  
}


void
_wrap_MarketData_number_asks_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->number_asks);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_last_sale_price_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->last_sale_price = *arg2;
  
}


void
_wrap_MarketData_last_sale_price_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->last_sale_price);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_current_bid_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->current_bid = *arg2;
  
}


void
_wrap_MarketData_current_bid_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->current_bid);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_current_ask_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->current_ask = *arg2;
  
}


void
_wrap_MarketData_current_ask_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->current_ask);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_volume_trades_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->volume_trades = *arg2;
  
}


void
_wrap_MarketData_volume_trades_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->volume_trades);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_volume_assets_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->volume_assets = *arg2;
  
}


void
_wrap_MarketData_volume_assets_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->volume_assets);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_volume_currency_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->volume_currency = *arg2;
  
}


void
_wrap_MarketData_volume_currency_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->volume_currency);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_recent_highest_bid_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->recent_highest_bid = *arg2;
  
}


void
_wrap_MarketData_recent_highest_bid_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->recent_highest_bid);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_recent_lowest_ask_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->recent_lowest_ask = *arg2;
  
}


void
_wrap_MarketData_recent_lowest_ask_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->recent_lowest_ask);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_last_sale_date_set(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->last_sale_date = *arg2;
  
}


void
_wrap_MarketData_last_sale_date_get(void *swig_v)
{
  OTDB::MarketData *arg1 = (OTDB::MarketData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::MarketData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->last_sale_date);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_MarketData_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::MarketData *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::MarketData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::MarketData *)OTDB::MarketData::ot_dynamic_cast(arg1);
  *(OTDB::MarketData **)&swig_a->result = result; 
}


void
_wrap_MarketData_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_MarketList(void *swig_v)
{
  OTDB::MarketList *arg1 = (OTDB::MarketList *) 0 ;
  
  struct swigargs {
    OTDB::MarketList *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketList **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_MarketList_GetMarketDataCount(void *swig_v)
{
  OTDB::MarketList *arg1 = (OTDB::MarketList *) 0 ;
  size_t result;
  
  struct swigargs {
    OTDB::MarketList *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketList **)&swig_a->arg1; 
  
  result = (arg1)->GetMarketDataCount();
  swig_a->result = result; 
}


void
_wrap_MarketList_GetMarketData(void *swig_v)
{
  OTDB::MarketList *arg1 = (OTDB::MarketList *) 0 ;
  size_t arg2 ;
  OTDB::MarketData *result = 0 ;
  
  struct swigargs {
    OTDB::MarketList *arg1;
    long long arg2;
    long : 0;
    OTDB::MarketData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketList **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (OTDB::MarketData *)(arg1)->GetMarketData(arg2);
  *(OTDB::MarketData **)&swig_a->result = result; 
}


void
_wrap_MarketList_RemoveMarketData(void *swig_v)
{
  OTDB::MarketList *arg1 = (OTDB::MarketList *) 0 ;
  size_t arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::MarketList *arg1;
    long long arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketList **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (bool)(arg1)->RemoveMarketData(arg2);
  swig_a->result = result; 
}


void
_wrap_MarketList_AddMarketData(void *swig_v)
{
  OTDB::MarketList *arg1 = (OTDB::MarketList *) 0 ;
  OTDB::MarketData *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTDB::MarketList *arg1;
    OTDB::MarketData *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::MarketList **)&swig_a->arg1; 
  arg2 = *(OTDB::MarketData **)&swig_a->arg2; 
  
  result = (bool)(arg1)->AddMarketData(*arg2);
  swig_a->result = result; 
}


void
_wrap_MarketList_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::MarketList *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::MarketList *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::MarketList *)OTDB::MarketList::ot_dynamic_cast(arg1);
  *(OTDB::MarketList **)&swig_a->result = result; 
}


void
_wrap_MarketList_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_OfferDataMarket(void *swig_v)
{
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  
  struct swigargs {
    OTDB::OfferDataMarket *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataMarket **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_OfferDataMarket_gui_label_set(void *swig_v)
{
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataMarket *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataMarket **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_OfferDataMarket_gui_label_get(void *swig_v)
{
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataMarket *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataMarket **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataMarket_transaction_id_set(void *swig_v)
{
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataMarket *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataMarket **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->transaction_id = *arg2;
  
}


void
_wrap_OfferDataMarket_transaction_id_get(void *swig_v)
{
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataMarket *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataMarket **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->transaction_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataMarket_price_per_scale_set(void *swig_v)
{
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataMarket *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataMarket **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->price_per_scale = *arg2;
  
}


void
_wrap_OfferDataMarket_price_per_scale_get(void *swig_v)
{
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataMarket *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataMarket **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->price_per_scale);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataMarket_available_assets_set(void *swig_v)
{
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataMarket *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataMarket **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->available_assets = *arg2;
  
}


void
_wrap_OfferDataMarket_available_assets_get(void *swig_v)
{
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataMarket *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataMarket **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->available_assets);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataMarket_minimum_increment_set(void *swig_v)
{
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataMarket *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataMarket **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->minimum_increment = *arg2;
  
}


void
_wrap_OfferDataMarket_minimum_increment_get(void *swig_v)
{
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataMarket *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataMarket **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->minimum_increment);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataMarket_date_set(void *swig_v)
{
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataMarket *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataMarket **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->date = *arg2;
  
}


void
_wrap_OfferDataMarket_date_get(void *swig_v)
{
  OTDB::OfferDataMarket *arg1 = (OTDB::OfferDataMarket *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataMarket *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataMarket **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->date);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataMarket_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::OfferDataMarket *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::OfferDataMarket *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::OfferDataMarket *)OTDB::OfferDataMarket::ot_dynamic_cast(arg1);
  *(OTDB::OfferDataMarket **)&swig_a->result = result; 
}


void
_wrap_OfferDataMarket_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_BidData(void *swig_v)
{
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  
  struct swigargs {
    OTDB::BidData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BidData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_BidData_gui_label_set(void *swig_v)
{
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BidData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BidData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_BidData_gui_label_get(void *swig_v)
{
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BidData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BidData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BidData_transaction_id_set(void *swig_v)
{
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BidData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BidData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->transaction_id = *arg2;
  
}


void
_wrap_BidData_transaction_id_get(void *swig_v)
{
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BidData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BidData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->transaction_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BidData_price_per_scale_set(void *swig_v)
{
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BidData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BidData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->price_per_scale = *arg2;
  
}


void
_wrap_BidData_price_per_scale_get(void *swig_v)
{
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BidData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BidData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->price_per_scale);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BidData_available_assets_set(void *swig_v)
{
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BidData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BidData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->available_assets = *arg2;
  
}


void
_wrap_BidData_available_assets_get(void *swig_v)
{
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BidData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BidData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->available_assets);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BidData_minimum_increment_set(void *swig_v)
{
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BidData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BidData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->minimum_increment = *arg2;
  
}


void
_wrap_BidData_minimum_increment_get(void *swig_v)
{
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BidData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BidData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->minimum_increment);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BidData_date_set(void *swig_v)
{
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BidData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BidData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->date = *arg2;
  
}


void
_wrap_BidData_date_get(void *swig_v)
{
  OTDB::BidData *arg1 = (OTDB::BidData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BidData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BidData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->date);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BidData_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::BidData *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::BidData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::BidData *)OTDB::BidData::ot_dynamic_cast(arg1);
  *(OTDB::BidData **)&swig_a->result = result; 
}


void
_wrap_BidData_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_AskData(void *swig_v)
{
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  
  struct swigargs {
    OTDB::AskData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AskData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_AskData_gui_label_set(void *swig_v)
{
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::AskData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AskData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_AskData_gui_label_get(void *swig_v)
{
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::AskData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AskData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_AskData_transaction_id_set(void *swig_v)
{
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::AskData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AskData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->transaction_id = *arg2;
  
}


void
_wrap_AskData_transaction_id_get(void *swig_v)
{
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::AskData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AskData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->transaction_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_AskData_price_per_scale_set(void *swig_v)
{
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::AskData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AskData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->price_per_scale = *arg2;
  
}


void
_wrap_AskData_price_per_scale_get(void *swig_v)
{
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::AskData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AskData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->price_per_scale);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_AskData_available_assets_set(void *swig_v)
{
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::AskData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AskData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->available_assets = *arg2;
  
}


void
_wrap_AskData_available_assets_get(void *swig_v)
{
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::AskData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AskData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->available_assets);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_AskData_minimum_increment_set(void *swig_v)
{
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::AskData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AskData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->minimum_increment = *arg2;
  
}


void
_wrap_AskData_minimum_increment_get(void *swig_v)
{
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::AskData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AskData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->minimum_increment);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_AskData_date_set(void *swig_v)
{
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::AskData *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AskData **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->date = *arg2;
  
}


void
_wrap_AskData_date_get(void *swig_v)
{
  OTDB::AskData *arg1 = (OTDB::AskData *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::AskData *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AskData **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->date);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_AskData_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::AskData *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::AskData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::AskData *)OTDB::AskData::ot_dynamic_cast(arg1);
  *(OTDB::AskData **)&swig_a->result = result; 
}


void
_wrap_AskData_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_OfferListMarket(void *swig_v)
{
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  
  struct swigargs {
    OTDB::OfferListMarket *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferListMarket **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_OfferListMarket_GetBidDataCount(void *swig_v)
{
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t result;
  
  struct swigargs {
    OTDB::OfferListMarket *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferListMarket **)&swig_a->arg1; 
  
  result = (arg1)->GetBidDataCount();
  swig_a->result = result; 
}


void
_wrap_OfferListMarket_GetBidData(void *swig_v)
{
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t arg2 ;
  OTDB::BidData *result = 0 ;
  
  struct swigargs {
    OTDB::OfferListMarket *arg1;
    long long arg2;
    long : 0;
    OTDB::BidData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferListMarket **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (OTDB::BidData *)(arg1)->GetBidData(arg2);
  *(OTDB::BidData **)&swig_a->result = result; 
}


void
_wrap_OfferListMarket_RemoveBidData(void *swig_v)
{
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::OfferListMarket *arg1;
    long long arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferListMarket **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (bool)(arg1)->RemoveBidData(arg2);
  swig_a->result = result; 
}


void
_wrap_OfferListMarket_AddBidData(void *swig_v)
{
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  OTDB::BidData *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTDB::OfferListMarket *arg1;
    OTDB::BidData *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferListMarket **)&swig_a->arg1; 
  arg2 = *(OTDB::BidData **)&swig_a->arg2; 
  
  result = (bool)(arg1)->AddBidData(*arg2);
  swig_a->result = result; 
}


void
_wrap_OfferListMarket_GetAskDataCount(void *swig_v)
{
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t result;
  
  struct swigargs {
    OTDB::OfferListMarket *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferListMarket **)&swig_a->arg1; 
  
  result = (arg1)->GetAskDataCount();
  swig_a->result = result; 
}


void
_wrap_OfferListMarket_GetAskData(void *swig_v)
{
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t arg2 ;
  OTDB::AskData *result = 0 ;
  
  struct swigargs {
    OTDB::OfferListMarket *arg1;
    long long arg2;
    long : 0;
    OTDB::AskData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferListMarket **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (OTDB::AskData *)(arg1)->GetAskData(arg2);
  *(OTDB::AskData **)&swig_a->result = result; 
}


void
_wrap_OfferListMarket_RemoveAskData(void *swig_v)
{
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  size_t arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::OfferListMarket *arg1;
    long long arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferListMarket **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (bool)(arg1)->RemoveAskData(arg2);
  swig_a->result = result; 
}


void
_wrap_OfferListMarket_AddAskData(void *swig_v)
{
  OTDB::OfferListMarket *arg1 = (OTDB::OfferListMarket *) 0 ;
  OTDB::AskData *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTDB::OfferListMarket *arg1;
    OTDB::AskData *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferListMarket **)&swig_a->arg1; 
  arg2 = *(OTDB::AskData **)&swig_a->arg2; 
  
  result = (bool)(arg1)->AddAskData(*arg2);
  swig_a->result = result; 
}


void
_wrap_OfferListMarket_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::OfferListMarket *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::OfferListMarket *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::OfferListMarket *)OTDB::OfferListMarket::ot_dynamic_cast(arg1);
  *(OTDB::OfferListMarket **)&swig_a->result = result; 
}


void
_wrap_OfferListMarket_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_TradeDataMarket(void *swig_v)
{
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  
  struct swigargs {
    OTDB::TradeDataMarket *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataMarket **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_TradeDataMarket_gui_label_set(void *swig_v)
{
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataMarket *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataMarket **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_TradeDataMarket_gui_label_get(void *swig_v)
{
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataMarket *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataMarket **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataMarket_transaction_id_set(void *swig_v)
{
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataMarket *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataMarket **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->transaction_id = *arg2;
  
}


void
_wrap_TradeDataMarket_transaction_id_get(void *swig_v)
{
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataMarket *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataMarket **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->transaction_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataMarket_date_set(void *swig_v)
{
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataMarket *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataMarket **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->date = *arg2;
  
}


void
_wrap_TradeDataMarket_date_get(void *swig_v)
{
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataMarket *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataMarket **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->date);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataMarket_price_set(void *swig_v)
{
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataMarket *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataMarket **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->price = *arg2;
  
}


void
_wrap_TradeDataMarket_price_get(void *swig_v)
{
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataMarket *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataMarket **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->price);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataMarket_amount_sold_set(void *swig_v)
{
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataMarket *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataMarket **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->amount_sold = *arg2;
  
}


void
_wrap_TradeDataMarket_amount_sold_get(void *swig_v)
{
  OTDB::TradeDataMarket *arg1 = (OTDB::TradeDataMarket *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataMarket *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataMarket **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->amount_sold);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataMarket_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::TradeDataMarket *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::TradeDataMarket *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::TradeDataMarket *)OTDB::TradeDataMarket::ot_dynamic_cast(arg1);
  *(OTDB::TradeDataMarket **)&swig_a->result = result; 
}


void
_wrap_TradeDataMarket_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_TradeListMarket(void *swig_v)
{
  OTDB::TradeListMarket *arg1 = (OTDB::TradeListMarket *) 0 ;
  
  struct swigargs {
    OTDB::TradeListMarket *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeListMarket **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_TradeListMarket_GetTradeDataMarketCount(void *swig_v)
{
  OTDB::TradeListMarket *arg1 = (OTDB::TradeListMarket *) 0 ;
  size_t result;
  
  struct swigargs {
    OTDB::TradeListMarket *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeListMarket **)&swig_a->arg1; 
  
  result = (arg1)->GetTradeDataMarketCount();
  swig_a->result = result; 
}


void
_wrap_TradeListMarket_GetTradeDataMarket(void *swig_v)
{
  OTDB::TradeListMarket *arg1 = (OTDB::TradeListMarket *) 0 ;
  size_t arg2 ;
  OTDB::TradeDataMarket *result = 0 ;
  
  struct swigargs {
    OTDB::TradeListMarket *arg1;
    long long arg2;
    long : 0;
    OTDB::TradeDataMarket *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeListMarket **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (OTDB::TradeDataMarket *)(arg1)->GetTradeDataMarket(arg2);
  *(OTDB::TradeDataMarket **)&swig_a->result = result; 
}


void
_wrap_TradeListMarket_RemoveTradeDataMarket(void *swig_v)
{
  OTDB::TradeListMarket *arg1 = (OTDB::TradeListMarket *) 0 ;
  size_t arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::TradeListMarket *arg1;
    long long arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeListMarket **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (bool)(arg1)->RemoveTradeDataMarket(arg2);
  swig_a->result = result; 
}


void
_wrap_TradeListMarket_AddTradeDataMarket(void *swig_v)
{
  OTDB::TradeListMarket *arg1 = (OTDB::TradeListMarket *) 0 ;
  OTDB::TradeDataMarket *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTDB::TradeListMarket *arg1;
    OTDB::TradeDataMarket *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeListMarket **)&swig_a->arg1; 
  arg2 = *(OTDB::TradeDataMarket **)&swig_a->arg2; 
  
  result = (bool)(arg1)->AddTradeDataMarket(*arg2);
  swig_a->result = result; 
}


void
_wrap_TradeListMarket_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::TradeListMarket *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::TradeListMarket *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::TradeListMarket *)OTDB::TradeListMarket::ot_dynamic_cast(arg1);
  *(OTDB::TradeListMarket **)&swig_a->result = result; 
}


void
_wrap_TradeListMarket_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_OfferDataNym(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_OfferDataNym_gui_label_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_OfferDataNym_gui_label_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_valid_from_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->valid_from = *arg2;
  
}


void
_wrap_OfferDataNym_valid_from_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->valid_from);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_valid_to_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->valid_to = *arg2;
  
}


void
_wrap_OfferDataNym_valid_to_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->valid_to);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_server_id_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_id = *arg2;
  
}


void
_wrap_OfferDataNym_server_id_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_asset_type_id_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->asset_type_id = *arg2;
  
}


void
_wrap_OfferDataNym_asset_type_id_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->asset_type_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_asset_acct_id_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->asset_acct_id = *arg2;
  
}


void
_wrap_OfferDataNym_asset_acct_id_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->asset_acct_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_currency_type_id_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->currency_type_id = *arg2;
  
}


void
_wrap_OfferDataNym_currency_type_id_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->currency_type_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_currency_acct_id_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->currency_acct_id = *arg2;
  
}


void
_wrap_OfferDataNym_currency_acct_id_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->currency_acct_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_selling_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  bool arg2 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    bool arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  arg2 = (bool)swig_a->arg2; 
  
  if (arg1) (arg1)->selling = arg2;
  
}


void
_wrap_OfferDataNym_selling_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  bool result;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (bool) ((arg1)->selling);
  swig_a->result = result; 
}


void
_wrap_OfferDataNym_scale_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->scale = *arg2;
  
}


void
_wrap_OfferDataNym_scale_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->scale);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_price_per_scale_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->price_per_scale = *arg2;
  
}


void
_wrap_OfferDataNym_price_per_scale_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->price_per_scale);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_transaction_id_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->transaction_id = *arg2;
  
}


void
_wrap_OfferDataNym_transaction_id_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->transaction_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_total_assets_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->total_assets = *arg2;
  
}


void
_wrap_OfferDataNym_total_assets_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->total_assets);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_finished_so_far_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->finished_so_far = *arg2;
  
}


void
_wrap_OfferDataNym_finished_so_far_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->finished_so_far);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_minimum_increment_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->minimum_increment = *arg2;
  
}


void
_wrap_OfferDataNym_minimum_increment_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->minimum_increment);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_stop_sign_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->stop_sign = *arg2;
  
}


void
_wrap_OfferDataNym_stop_sign_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->stop_sign);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_stop_price_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->stop_price = *arg2;
  
}


void
_wrap_OfferDataNym_stop_price_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->stop_price);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_date_set(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->date = *arg2;
  
}


void
_wrap_OfferDataNym_date_get(void *swig_v)
{
  OTDB::OfferDataNym *arg1 = (OTDB::OfferDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::OfferDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->date);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_OfferDataNym_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::OfferDataNym *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::OfferDataNym *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::OfferDataNym *)OTDB::OfferDataNym::ot_dynamic_cast(arg1);
  *(OTDB::OfferDataNym **)&swig_a->result = result; 
}


void
_wrap_OfferDataNym_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_OfferListNym(void *swig_v)
{
  OTDB::OfferListNym *arg1 = (OTDB::OfferListNym *) 0 ;
  
  struct swigargs {
    OTDB::OfferListNym *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferListNym **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_OfferListNym_GetOfferDataNymCount(void *swig_v)
{
  OTDB::OfferListNym *arg1 = (OTDB::OfferListNym *) 0 ;
  size_t result;
  
  struct swigargs {
    OTDB::OfferListNym *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferListNym **)&swig_a->arg1; 
  
  result = (arg1)->GetOfferDataNymCount();
  swig_a->result = result; 
}


void
_wrap_OfferListNym_GetOfferDataNym(void *swig_v)
{
  OTDB::OfferListNym *arg1 = (OTDB::OfferListNym *) 0 ;
  size_t arg2 ;
  OTDB::OfferDataNym *result = 0 ;
  
  struct swigargs {
    OTDB::OfferListNym *arg1;
    long long arg2;
    long : 0;
    OTDB::OfferDataNym *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferListNym **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (OTDB::OfferDataNym *)(arg1)->GetOfferDataNym(arg2);
  *(OTDB::OfferDataNym **)&swig_a->result = result; 
}


void
_wrap_OfferListNym_RemoveOfferDataNym(void *swig_v)
{
  OTDB::OfferListNym *arg1 = (OTDB::OfferListNym *) 0 ;
  size_t arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::OfferListNym *arg1;
    long long arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferListNym **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (bool)(arg1)->RemoveOfferDataNym(arg2);
  swig_a->result = result; 
}


void
_wrap_OfferListNym_AddOfferDataNym(void *swig_v)
{
  OTDB::OfferListNym *arg1 = (OTDB::OfferListNym *) 0 ;
  OTDB::OfferDataNym *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTDB::OfferListNym *arg1;
    OTDB::OfferDataNym *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::OfferListNym **)&swig_a->arg1; 
  arg2 = *(OTDB::OfferDataNym **)&swig_a->arg2; 
  
  result = (bool)(arg1)->AddOfferDataNym(*arg2);
  swig_a->result = result; 
}


void
_wrap_OfferListNym_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::OfferListNym *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::OfferListNym *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::OfferListNym *)OTDB::OfferListNym::ot_dynamic_cast(arg1);
  *(OTDB::OfferListNym **)&swig_a->result = result; 
}


void
_wrap_OfferListNym_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_TradeDataNym(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_TradeDataNym_gui_label_set(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_TradeDataNym_gui_label_get(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataNym_transaction_id_set(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->transaction_id = *arg2;
  
}


void
_wrap_TradeDataNym_transaction_id_get(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->transaction_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataNym_completed_count_set(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->completed_count = *arg2;
  
}


void
_wrap_TradeDataNym_completed_count_get(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->completed_count);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataNym_date_set(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->date = *arg2;
  
}


void
_wrap_TradeDataNym_date_get(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->date);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataNym_price_set(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->price = *arg2;
  
}


void
_wrap_TradeDataNym_price_get(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->price);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataNym_amount_sold_set(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->amount_sold = *arg2;
  
}


void
_wrap_TradeDataNym_amount_sold_get(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->amount_sold);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataNym_updated_id_set(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->updated_id = *arg2;
  
}


void
_wrap_TradeDataNym_updated_id_get(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->updated_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataNym_offer_price_set(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->offer_price = *arg2;
  
}


void
_wrap_TradeDataNym_offer_price_get(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->offer_price);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataNym_finished_so_far_set(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->finished_so_far = *arg2;
  
}


void
_wrap_TradeDataNym_finished_so_far_get(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->finished_so_far);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataNym_asset_id_set(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->asset_id = *arg2;
  
}


void
_wrap_TradeDataNym_asset_id_get(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->asset_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataNym_currency_id_set(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->currency_id = *arg2;
  
}


void
_wrap_TradeDataNym_currency_id_get(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->currency_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataNym_currency_paid_set(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->currency_paid = *arg2;
  
}


void
_wrap_TradeDataNym_currency_paid_get(void *swig_v)
{
  OTDB::TradeDataNym *arg1 = (OTDB::TradeDataNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::TradeDataNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeDataNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->currency_paid);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_TradeDataNym_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::TradeDataNym *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::TradeDataNym *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::TradeDataNym *)OTDB::TradeDataNym::ot_dynamic_cast(arg1);
  *(OTDB::TradeDataNym **)&swig_a->result = result; 
}


void
_wrap_TradeDataNym_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_TradeListNym(void *swig_v)
{
  OTDB::TradeListNym *arg1 = (OTDB::TradeListNym *) 0 ;
  
  struct swigargs {
    OTDB::TradeListNym *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeListNym **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_TradeListNym_GetTradeDataNymCount(void *swig_v)
{
  OTDB::TradeListNym *arg1 = (OTDB::TradeListNym *) 0 ;
  size_t result;
  
  struct swigargs {
    OTDB::TradeListNym *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeListNym **)&swig_a->arg1; 
  
  result = (arg1)->GetTradeDataNymCount();
  swig_a->result = result; 
}


void
_wrap_TradeListNym_GetTradeDataNym(void *swig_v)
{
  OTDB::TradeListNym *arg1 = (OTDB::TradeListNym *) 0 ;
  size_t arg2 ;
  OTDB::TradeDataNym *result = 0 ;
  
  struct swigargs {
    OTDB::TradeListNym *arg1;
    long long arg2;
    long : 0;
    OTDB::TradeDataNym *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeListNym **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (OTDB::TradeDataNym *)(arg1)->GetTradeDataNym(arg2);
  *(OTDB::TradeDataNym **)&swig_a->result = result; 
}


void
_wrap_TradeListNym_RemoveTradeDataNym(void *swig_v)
{
  OTDB::TradeListNym *arg1 = (OTDB::TradeListNym *) 0 ;
  size_t arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::TradeListNym *arg1;
    long long arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeListNym **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (bool)(arg1)->RemoveTradeDataNym(arg2);
  swig_a->result = result; 
}


void
_wrap_TradeListNym_AddTradeDataNym(void *swig_v)
{
  OTDB::TradeListNym *arg1 = (OTDB::TradeListNym *) 0 ;
  OTDB::TradeDataNym *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTDB::TradeListNym *arg1;
    OTDB::TradeDataNym *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::TradeListNym **)&swig_a->arg1; 
  arg2 = *(OTDB::TradeDataNym **)&swig_a->arg2; 
  
  result = (bool)(arg1)->AddTradeDataNym(*arg2);
  swig_a->result = result; 
}


void
_wrap_TradeListNym_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::TradeListNym *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::TradeListNym *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::TradeListNym *)OTDB::TradeListNym::ot_dynamic_cast(arg1);
  *(OTDB::TradeListNym **)&swig_a->result = result; 
}


void
_wrap_TradeListNym_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_Acct(void *swig_v)
{
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  
  struct swigargs {
    OTDB::Acct *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Acct **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_Acct_gui_label_set(void *swig_v)
{
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::Acct *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Acct **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_Acct_gui_label_get(void *swig_v)
{
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::Acct *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Acct **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_Acct_acct_id_set(void *swig_v)
{
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::Acct *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Acct **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->acct_id = *arg2;
  
}


void
_wrap_Acct_acct_id_get(void *swig_v)
{
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::Acct *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Acct **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->acct_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_Acct_server_id_set(void *swig_v)
{
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::Acct *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Acct **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_id = *arg2;
  
}


void
_wrap_Acct_server_id_get(void *swig_v)
{
  OTDB::Acct *arg1 = (OTDB::Acct *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::Acct *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Acct **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_Acct_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::Acct *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::Acct *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::Acct *)OTDB::Acct::ot_dynamic_cast(arg1);
  *(OTDB::Acct **)&swig_a->result = result; 
}


void
_wrap_Acct_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_BitcoinAcct(void *swig_v)
{
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  
  struct swigargs {
    OTDB::BitcoinAcct *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinAcct **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_BitcoinAcct_gui_label_set(void *swig_v)
{
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BitcoinAcct *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinAcct **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_BitcoinAcct_gui_label_get(void *swig_v)
{
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BitcoinAcct *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinAcct **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BitcoinAcct_acct_id_set(void *swig_v)
{
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BitcoinAcct *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinAcct **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->acct_id = *arg2;
  
}


void
_wrap_BitcoinAcct_acct_id_get(void *swig_v)
{
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BitcoinAcct *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinAcct **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->acct_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BitcoinAcct_server_id_set(void *swig_v)
{
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BitcoinAcct *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinAcct **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_id = *arg2;
  
}


void
_wrap_BitcoinAcct_server_id_get(void *swig_v)
{
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BitcoinAcct *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinAcct **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BitcoinAcct_bitcoin_acct_name_set(void *swig_v)
{
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BitcoinAcct *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinAcct **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->bitcoin_acct_name = *arg2;
  
}


void
_wrap_BitcoinAcct_bitcoin_acct_name_get(void *swig_v)
{
  OTDB::BitcoinAcct *arg1 = (OTDB::BitcoinAcct *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BitcoinAcct *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinAcct **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->bitcoin_acct_name);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BitcoinAcct_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::BitcoinAcct *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::BitcoinAcct *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::BitcoinAcct *)OTDB::BitcoinAcct::ot_dynamic_cast(arg1);
  *(OTDB::BitcoinAcct **)&swig_a->result = result; 
}


void
_wrap_BitcoinAcct_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_ServerInfo(void *swig_v)
{
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  
  struct swigargs {
    OTDB::ServerInfo *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ServerInfo **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_ServerInfo_gui_label_set(void *swig_v)
{
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ServerInfo *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ServerInfo **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_ServerInfo_gui_label_get(void *swig_v)
{
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ServerInfo *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ServerInfo **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ServerInfo_server_id_set(void *swig_v)
{
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ServerInfo *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ServerInfo **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_id = *arg2;
  
}


void
_wrap_ServerInfo_server_id_get(void *swig_v)
{
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ServerInfo *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ServerInfo **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ServerInfo_server_type_set(void *swig_v)
{
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ServerInfo *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ServerInfo **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_type = *arg2;
  
}


void
_wrap_ServerInfo_server_type_get(void *swig_v)
{
  OTDB::ServerInfo *arg1 = (OTDB::ServerInfo *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ServerInfo *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ServerInfo **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_type);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ServerInfo_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::ServerInfo *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::ServerInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::ServerInfo *)OTDB::ServerInfo::ot_dynamic_cast(arg1);
  *(OTDB::ServerInfo **)&swig_a->result = result; 
}


void
_wrap_ServerInfo_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_Server(void *swig_v)
{
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  
  struct swigargs {
    OTDB::Server *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Server **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_Server_gui_label_set(void *swig_v)
{
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::Server *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Server **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_Server_gui_label_get(void *swig_v)
{
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::Server *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Server **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_Server_server_id_set(void *swig_v)
{
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::Server *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Server **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_id = *arg2;
  
}


void
_wrap_Server_server_id_get(void *swig_v)
{
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::Server *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Server **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_Server_server_type_set(void *swig_v)
{
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::Server *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Server **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_type = *arg2;
  
}


void
_wrap_Server_server_type_get(void *swig_v)
{
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::Server *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Server **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_type);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_Server_server_host_set(void *swig_v)
{
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::Server *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Server **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_host = *arg2;
  
}


void
_wrap_Server_server_host_get(void *swig_v)
{
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::Server *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Server **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_host);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_Server_server_port_set(void *swig_v)
{
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::Server *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Server **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_port = *arg2;
  
}


void
_wrap_Server_server_port_get(void *swig_v)
{
  OTDB::Server *arg1 = (OTDB::Server *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::Server *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Server **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_port);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_Server_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::Server *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::Server *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::Server *)OTDB::Server::ot_dynamic_cast(arg1);
  *(OTDB::Server **)&swig_a->result = result; 
}


void
_wrap_Server_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_BitcoinServer(void *swig_v)
{
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  
  struct swigargs {
    OTDB::BitcoinServer *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinServer **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_BitcoinServer_gui_label_set(void *swig_v)
{
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BitcoinServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_BitcoinServer_gui_label_get(void *swig_v)
{
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BitcoinServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BitcoinServer_server_id_set(void *swig_v)
{
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BitcoinServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_id = *arg2;
  
}


void
_wrap_BitcoinServer_server_id_get(void *swig_v)
{
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BitcoinServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BitcoinServer_server_type_set(void *swig_v)
{
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BitcoinServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_type = *arg2;
  
}


void
_wrap_BitcoinServer_server_type_get(void *swig_v)
{
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BitcoinServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_type);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BitcoinServer_server_host_set(void *swig_v)
{
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BitcoinServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_host = *arg2;
  
}


void
_wrap_BitcoinServer_server_host_get(void *swig_v)
{
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BitcoinServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_host);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BitcoinServer_server_port_set(void *swig_v)
{
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BitcoinServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_port = *arg2;
  
}


void
_wrap_BitcoinServer_server_port_get(void *swig_v)
{
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BitcoinServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_port);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BitcoinServer_bitcoin_username_set(void *swig_v)
{
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BitcoinServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->bitcoin_username = *arg2;
  
}


void
_wrap_BitcoinServer_bitcoin_username_get(void *swig_v)
{
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BitcoinServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->bitcoin_username);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BitcoinServer_bitcoin_password_set(void *swig_v)
{
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::BitcoinServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->bitcoin_password = *arg2;
  
}


void
_wrap_BitcoinServer_bitcoin_password_get(void *swig_v)
{
  OTDB::BitcoinServer *arg1 = (OTDB::BitcoinServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::BitcoinServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::BitcoinServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->bitcoin_password);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_BitcoinServer_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::BitcoinServer *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::BitcoinServer *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::BitcoinServer *)OTDB::BitcoinServer::ot_dynamic_cast(arg1);
  *(OTDB::BitcoinServer **)&swig_a->result = result; 
}


void
_wrap_BitcoinServer_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_RippleServer(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_RippleServer_gui_label_set(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_RippleServer_gui_label_get(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_RippleServer_server_id_set(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_id = *arg2;
  
}


void
_wrap_RippleServer_server_id_get(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_RippleServer_server_type_set(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_type = *arg2;
  
}


void
_wrap_RippleServer_server_type_get(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_type);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_RippleServer_server_host_set(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_host = *arg2;
  
}


void
_wrap_RippleServer_server_host_get(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_host);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_RippleServer_server_port_set(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_port = *arg2;
  
}


void
_wrap_RippleServer_server_port_get(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_port);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_RippleServer_ripple_username_set(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->ripple_username = *arg2;
  
}


void
_wrap_RippleServer_ripple_username_get(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->ripple_username);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_RippleServer_ripple_password_set(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->ripple_password = *arg2;
  
}


void
_wrap_RippleServer_ripple_password_get(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->ripple_password);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_RippleServer_namefield_id_set(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->namefield_id = *arg2;
  
}


void
_wrap_RippleServer_namefield_id_get(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->namefield_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_RippleServer_passfield_id_set(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->passfield_id = *arg2;
  
}


void
_wrap_RippleServer_passfield_id_get(void *swig_v)
{
  OTDB::RippleServer *arg1 = (OTDB::RippleServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::RippleServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::RippleServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->passfield_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_RippleServer_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::RippleServer *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::RippleServer *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::RippleServer *)OTDB::RippleServer::ot_dynamic_cast(arg1);
  *(OTDB::RippleServer **)&swig_a->result = result; 
}


void
_wrap_RippleServer_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_LoomServer(void *swig_v)
{
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  
  struct swigargs {
    OTDB::LoomServer *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::LoomServer **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_LoomServer_gui_label_set(void *swig_v)
{
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::LoomServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::LoomServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_LoomServer_gui_label_get(void *swig_v)
{
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::LoomServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::LoomServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_LoomServer_server_id_set(void *swig_v)
{
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::LoomServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::LoomServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_id = *arg2;
  
}


void
_wrap_LoomServer_server_id_get(void *swig_v)
{
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::LoomServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::LoomServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_LoomServer_server_type_set(void *swig_v)
{
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::LoomServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::LoomServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_type = *arg2;
  
}


void
_wrap_LoomServer_server_type_get(void *swig_v)
{
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::LoomServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::LoomServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_type);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_LoomServer_server_host_set(void *swig_v)
{
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::LoomServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::LoomServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_host = *arg2;
  
}


void
_wrap_LoomServer_server_host_get(void *swig_v)
{
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::LoomServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::LoomServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_host);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_LoomServer_server_port_set(void *swig_v)
{
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::LoomServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::LoomServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_port = *arg2;
  
}


void
_wrap_LoomServer_server_port_get(void *swig_v)
{
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::LoomServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::LoomServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_port);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_LoomServer_loom_username_set(void *swig_v)
{
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::LoomServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::LoomServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->loom_username = *arg2;
  
}


void
_wrap_LoomServer_loom_username_get(void *swig_v)
{
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::LoomServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::LoomServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->loom_username);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_LoomServer_namefield_id_set(void *swig_v)
{
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::LoomServer *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::LoomServer **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->namefield_id = *arg2;
  
}


void
_wrap_LoomServer_namefield_id_get(void *swig_v)
{
  OTDB::LoomServer *arg1 = (OTDB::LoomServer *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::LoomServer *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::LoomServer **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->namefield_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_LoomServer_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::LoomServer *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::LoomServer *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::LoomServer *)OTDB::LoomServer::ot_dynamic_cast(arg1);
  *(OTDB::LoomServer **)&swig_a->result = result; 
}


void
_wrap_LoomServer_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_ContactNym(void *swig_v)
{
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  
  struct swigargs {
    OTDB::ContactNym *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactNym **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_ContactNym_gui_label_set(void *swig_v)
{
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ContactNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_ContactNym_gui_label_get(void *swig_v)
{
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ContactNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ContactNym_nym_type_set(void *swig_v)
{
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ContactNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->nym_type = *arg2;
  
}


void
_wrap_ContactNym_nym_type_get(void *swig_v)
{
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ContactNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->nym_type);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ContactNym_nym_id_set(void *swig_v)
{
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ContactNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->nym_id = *arg2;
  
}


void
_wrap_ContactNym_nym_id_get(void *swig_v)
{
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ContactNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->nym_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ContactNym_public_key_set(void *swig_v)
{
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ContactNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->public_key = *arg2;
  
}


void
_wrap_ContactNym_public_key_get(void *swig_v)
{
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ContactNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->public_key);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ContactNym_memo_set(void *swig_v)
{
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ContactNym *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactNym **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->memo = *arg2;
  
}


void
_wrap_ContactNym_memo_get(void *swig_v)
{
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ContactNym *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactNym **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->memo);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ContactNym_GetServerInfoCount(void *swig_v)
{
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  size_t result;
  
  struct swigargs {
    OTDB::ContactNym *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactNym **)&swig_a->arg1; 
  
  result = (arg1)->GetServerInfoCount();
  swig_a->result = result; 
}


void
_wrap_ContactNym_GetServerInfo(void *swig_v)
{
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  size_t arg2 ;
  OTDB::ServerInfo *result = 0 ;
  
  struct swigargs {
    OTDB::ContactNym *arg1;
    long long arg2;
    long : 0;
    OTDB::ServerInfo *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactNym **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (OTDB::ServerInfo *)(arg1)->GetServerInfo(arg2);
  *(OTDB::ServerInfo **)&swig_a->result = result; 
}


void
_wrap_ContactNym_RemoveServerInfo(void *swig_v)
{
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  size_t arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::ContactNym *arg1;
    long long arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactNym **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (bool)(arg1)->RemoveServerInfo(arg2);
  swig_a->result = result; 
}


void
_wrap_ContactNym_AddServerInfo(void *swig_v)
{
  OTDB::ContactNym *arg1 = (OTDB::ContactNym *) 0 ;
  OTDB::ServerInfo *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTDB::ContactNym *arg1;
    OTDB::ServerInfo *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactNym **)&swig_a->arg1; 
  arg2 = *(OTDB::ServerInfo **)&swig_a->arg2; 
  
  result = (bool)(arg1)->AddServerInfo(*arg2);
  swig_a->result = result; 
}


void
_wrap_ContactNym_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::ContactNym *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::ContactNym *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::ContactNym *)OTDB::ContactNym::ot_dynamic_cast(arg1);
  *(OTDB::ContactNym **)&swig_a->result = result; 
}


void
_wrap_ContactNym_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_WalletData(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  
  struct swigargs {
    OTDB::WalletData *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_WalletData_GetBitcoinServerCount(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t result;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  
  result = (arg1)->GetBitcoinServerCount();
  swig_a->result = result; 
}


void
_wrap_WalletData_GetBitcoinServer(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  OTDB::BitcoinServer *result = 0 ;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    long long arg2;
    long : 0;
    OTDB::BitcoinServer *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (OTDB::BitcoinServer *)(arg1)->GetBitcoinServer(arg2);
  *(OTDB::BitcoinServer **)&swig_a->result = result; 
}


void
_wrap_WalletData_RemoveBitcoinServer(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    long long arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (bool)(arg1)->RemoveBitcoinServer(arg2);
  swig_a->result = result; 
}


void
_wrap_WalletData_AddBitcoinServer(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  OTDB::BitcoinServer *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    OTDB::BitcoinServer *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  arg2 = *(OTDB::BitcoinServer **)&swig_a->arg2; 
  
  result = (bool)(arg1)->AddBitcoinServer(*arg2);
  swig_a->result = result; 
}


void
_wrap_WalletData_GetBitcoinAcctCount(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t result;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  
  result = (arg1)->GetBitcoinAcctCount();
  swig_a->result = result; 
}


void
_wrap_WalletData_GetBitcoinAcct(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  OTDB::BitcoinAcct *result = 0 ;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    long long arg2;
    long : 0;
    OTDB::BitcoinAcct *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (OTDB::BitcoinAcct *)(arg1)->GetBitcoinAcct(arg2);
  *(OTDB::BitcoinAcct **)&swig_a->result = result; 
}


void
_wrap_WalletData_RemoveBitcoinAcct(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    long long arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (bool)(arg1)->RemoveBitcoinAcct(arg2);
  swig_a->result = result; 
}


void
_wrap_WalletData_AddBitcoinAcct(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  OTDB::BitcoinAcct *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    OTDB::BitcoinAcct *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  arg2 = *(OTDB::BitcoinAcct **)&swig_a->arg2; 
  
  result = (bool)(arg1)->AddBitcoinAcct(*arg2);
  swig_a->result = result; 
}


void
_wrap_WalletData_GetRippleServerCount(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t result;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  
  result = (arg1)->GetRippleServerCount();
  swig_a->result = result; 
}


void
_wrap_WalletData_GetRippleServer(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  OTDB::RippleServer *result = 0 ;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    long long arg2;
    long : 0;
    OTDB::RippleServer *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (OTDB::RippleServer *)(arg1)->GetRippleServer(arg2);
  *(OTDB::RippleServer **)&swig_a->result = result; 
}


void
_wrap_WalletData_RemoveRippleServer(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    long long arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (bool)(arg1)->RemoveRippleServer(arg2);
  swig_a->result = result; 
}


void
_wrap_WalletData_AddRippleServer(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  OTDB::RippleServer *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    OTDB::RippleServer *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  arg2 = *(OTDB::RippleServer **)&swig_a->arg2; 
  
  result = (bool)(arg1)->AddRippleServer(*arg2);
  swig_a->result = result; 
}


void
_wrap_WalletData_GetLoomServerCount(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t result;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  
  result = (arg1)->GetLoomServerCount();
  swig_a->result = result; 
}


void
_wrap_WalletData_GetLoomServer(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  OTDB::LoomServer *result = 0 ;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    long long arg2;
    long : 0;
    OTDB::LoomServer *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (OTDB::LoomServer *)(arg1)->GetLoomServer(arg2);
  *(OTDB::LoomServer **)&swig_a->result = result; 
}


void
_wrap_WalletData_RemoveLoomServer(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  size_t arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    long long arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (bool)(arg1)->RemoveLoomServer(arg2);
  swig_a->result = result; 
}


void
_wrap_WalletData_AddLoomServer(void *swig_v)
{
  OTDB::WalletData *arg1 = (OTDB::WalletData *) 0 ;
  OTDB::LoomServer *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTDB::WalletData *arg1;
    OTDB::LoomServer *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::WalletData **)&swig_a->arg1; 
  arg2 = *(OTDB::LoomServer **)&swig_a->arg2; 
  
  result = (bool)(arg1)->AddLoomServer(*arg2);
  swig_a->result = result; 
}


void
_wrap_WalletData_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::WalletData *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::WalletData *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::WalletData *)OTDB::WalletData::ot_dynamic_cast(arg1);
  *(OTDB::WalletData **)&swig_a->result = result; 
}


void
_wrap_WalletData_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_ContactAcct(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_ContactAcct_gui_label_set(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_ContactAcct_gui_label_get(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ContactAcct_server_type_set(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_type = *arg2;
  
}


void
_wrap_ContactAcct_server_type_get(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_type);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ContactAcct_server_id_set(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->server_id = *arg2;
  
}


void
_wrap_ContactAcct_server_id_get(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->server_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ContactAcct_asset_type_id_set(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->asset_type_id = *arg2;
  
}


void
_wrap_ContactAcct_asset_type_id_get(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->asset_type_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ContactAcct_acct_id_set(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->acct_id = *arg2;
  
}


void
_wrap_ContactAcct_acct_id_get(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->acct_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ContactAcct_nym_id_set(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->nym_id = *arg2;
  
}


void
_wrap_ContactAcct_nym_id_get(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->nym_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ContactAcct_memo_set(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->memo = *arg2;
  
}


void
_wrap_ContactAcct_memo_get(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->memo);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ContactAcct_public_key_set(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->public_key = *arg2;
  
}


void
_wrap_ContactAcct_public_key_get(void *swig_v)
{
  OTDB::ContactAcct *arg1 = (OTDB::ContactAcct *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::ContactAcct *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::ContactAcct **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->public_key);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_ContactAcct_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::ContactAcct *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::ContactAcct *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::ContactAcct *)OTDB::ContactAcct::ot_dynamic_cast(arg1);
  *(OTDB::ContactAcct **)&swig_a->result = result; 
}


void
_wrap_ContactAcct_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_Contact(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  
  struct swigargs {
    OTDB::Contact *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_Contact_gui_label_set(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::Contact *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->gui_label = *arg2;
  
}


void
_wrap_Contact_gui_label_get(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::Contact *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->gui_label);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_Contact_contact_id_set(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::Contact *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->contact_id = *arg2;
  
}


void
_wrap_Contact_contact_id_get(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::Contact *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->contact_id);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_Contact_email_set(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::Contact *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->email = *arg2;
  
}


void
_wrap_Contact_email_get(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::Contact *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->email);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_Contact_memo_set(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::Contact *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->memo = *arg2;
  
}


void
_wrap_Contact_memo_get(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::Contact *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->memo);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_Contact_public_key_set(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *arg2 = 0 ;
  
  struct swigargs {
    OTDB::Contact *arg1;
    _gostring_ arg2;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  
  std::string arg2_str(swig_a->arg2.p, swig_a->arg2.n);
  arg2 = &arg2_str;
  
  
  if (arg1) (arg1)->public_key = *arg2;
  
}


void
_wrap_Contact_public_key_get(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  std::string *result = 0 ;
  
  struct swigargs {
    OTDB::Contact *arg1;
    long : 0;
    _gostring_ result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  
  result = (std::string *) & ((arg1)->public_key);
  swig_a->result = _swig_makegostring((*result).data(), (*result).length()); 
}


void
_wrap_Contact_GetContactNymCount(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t result;
  
  struct swigargs {
    OTDB::Contact *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  
  result = (arg1)->GetContactNymCount();
  swig_a->result = result; 
}


void
_wrap_Contact_GetContactNym(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t arg2 ;
  OTDB::ContactNym *result = 0 ;
  
  struct swigargs {
    OTDB::Contact *arg1;
    long long arg2;
    long : 0;
    OTDB::ContactNym *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (OTDB::ContactNym *)(arg1)->GetContactNym(arg2);
  *(OTDB::ContactNym **)&swig_a->result = result; 
}


void
_wrap_Contact_RemoveContactNym(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::Contact *arg1;
    long long arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (bool)(arg1)->RemoveContactNym(arg2);
  swig_a->result = result; 
}


void
_wrap_Contact_AddContactNym(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  OTDB::ContactNym *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTDB::Contact *arg1;
    OTDB::ContactNym *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  arg2 = *(OTDB::ContactNym **)&swig_a->arg2; 
  
  result = (bool)(arg1)->AddContactNym(*arg2);
  swig_a->result = result; 
}


void
_wrap_Contact_GetContactAcctCount(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t result;
  
  struct swigargs {
    OTDB::Contact *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  
  result = (arg1)->GetContactAcctCount();
  swig_a->result = result; 
}


void
_wrap_Contact_GetContactAcct(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t arg2 ;
  OTDB::ContactAcct *result = 0 ;
  
  struct swigargs {
    OTDB::Contact *arg1;
    long long arg2;
    long : 0;
    OTDB::ContactAcct *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (OTDB::ContactAcct *)(arg1)->GetContactAcct(arg2);
  *(OTDB::ContactAcct **)&swig_a->result = result; 
}


void
_wrap_Contact_RemoveContactAcct(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  size_t arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::Contact *arg1;
    long long arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (bool)(arg1)->RemoveContactAcct(arg2);
  swig_a->result = result; 
}


void
_wrap_Contact_AddContactAcct(void *swig_v)
{
  OTDB::Contact *arg1 = (OTDB::Contact *) 0 ;
  OTDB::ContactAcct *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTDB::Contact *arg1;
    OTDB::ContactAcct *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Contact **)&swig_a->arg1; 
  arg2 = *(OTDB::ContactAcct **)&swig_a->arg2; 
  
  result = (bool)(arg1)->AddContactAcct(*arg2);
  swig_a->result = result; 
}


void
_wrap_Contact_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::Contact *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::Contact *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::Contact *)OTDB::Contact::ot_dynamic_cast(arg1);
  *(OTDB::Contact **)&swig_a->result = result; 
}


void
_wrap_Contact_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_delete_AddressBook(void *swig_v)
{
  OTDB::AddressBook *arg1 = (OTDB::AddressBook *) 0 ;
  
  struct swigargs {
    OTDB::AddressBook *arg1;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AddressBook **)&swig_a->arg1; 
  
  delete arg1;
  
}


void
_wrap_AddressBook_GetContactCount(void *swig_v)
{
  OTDB::AddressBook *arg1 = (OTDB::AddressBook *) 0 ;
  size_t result;
  
  struct swigargs {
    OTDB::AddressBook *arg1;
    long : 0;
    long long result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AddressBook **)&swig_a->arg1; 
  
  result = (arg1)->GetContactCount();
  swig_a->result = result; 
}


void
_wrap_AddressBook_GetContact(void *swig_v)
{
  OTDB::AddressBook *arg1 = (OTDB::AddressBook *) 0 ;
  size_t arg2 ;
  OTDB::Contact *result = 0 ;
  
  struct swigargs {
    OTDB::AddressBook *arg1;
    long long arg2;
    long : 0;
    OTDB::Contact *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AddressBook **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (OTDB::Contact *)(arg1)->GetContact(arg2);
  *(OTDB::Contact **)&swig_a->result = result; 
}


void
_wrap_AddressBook_RemoveContact(void *swig_v)
{
  OTDB::AddressBook *arg1 = (OTDB::AddressBook *) 0 ;
  size_t arg2 ;
  bool result;
  
  struct swigargs {
    OTDB::AddressBook *arg1;
    long long arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AddressBook **)&swig_a->arg1; 
  arg2 = (size_t)swig_a->arg2; 
  
  result = (bool)(arg1)->RemoveContact(arg2);
  swig_a->result = result; 
}


void
_wrap_AddressBook_AddContact(void *swig_v)
{
  OTDB::AddressBook *arg1 = (OTDB::AddressBook *) 0 ;
  OTDB::Contact *arg2 = 0 ;
  bool result;
  
  struct swigargs {
    OTDB::AddressBook *arg1;
    OTDB::Contact *arg2;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::AddressBook **)&swig_a->arg1; 
  arg2 = *(OTDB::Contact **)&swig_a->arg2; 
  
  result = (bool)(arg1)->AddContact(*arg2);
  swig_a->result = result; 
}


void
_wrap_AddressBook_ot_dynamic_cast(void *swig_v)
{
  OTDB::Storable *arg1 = (OTDB::Storable *) 0 ;
  OTDB::AddressBook *result = 0 ;
  
  struct swigargs {
    OTDB::Storable *arg1;
    long : 0;
    OTDB::AddressBook *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTDB::Storable **)&swig_a->arg1; 
  
  result = (OTDB::AddressBook *)OTDB::AddressBook::ot_dynamic_cast(arg1);
  *(OTDB::AddressBook **)&swig_a->result = result; 
}


void
_wrap_AddressBook_Create(void *swig_v)
{
  OTDB::StoredObjectType arg1 ;
  OTDB::PackType arg2 ;
  OTDB::Storable *result = 0 ;
  
  struct swigargs {
    intgo arg1;
    intgo arg2;
    long : 0;
    OTDB::Storable *result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = (OTDB::StoredObjectType)swig_a->arg1; 
  arg2 = (OTDB::PackType)swig_a->arg2; 
  
  result = (OTDB::Storable *)OTDB::Storable::Create(arg1,arg2);
  *(OTDB::Storable **)&swig_a->result = result; 
}


void
_wrap_OT_API_Set_PasswordCallback(void *swig_v)
{
  OTCaller *arg1 = 0 ;
  bool result;
  
  struct swigargs {
    OTCaller *arg1;
    long : 0;
    bool result;
  } *swig_a = (struct swigargs *) swig_v;
  
  arg1 = *(OTCaller **)&swig_a->arg1; 
  
  result = (bool)OT_API_Set_PasswordCallback(*arg1);
  swig_a->result = result; 
}


#ifdef __cplusplus
}
#endif

