# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_otapi', [dirname(__file__)])
        except ImportError:
            import _otapi
            return _otapi
        if fp is not None:
            try:
                _mod = imp.load_module('_otapi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _otapi = swig_import_helper()
    del swig_import_helper
else:
    import _otapi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class imaxdiv_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, imaxdiv_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, imaxdiv_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["quot"] = _otapi.imaxdiv_t_quot_set
    __swig_getmethods__["quot"] = _otapi.imaxdiv_t_quot_get
    if _newclass:quot = _swig_property(_otapi.imaxdiv_t_quot_get, _otapi.imaxdiv_t_quot_set)
    __swig_setmethods__["rem"] = _otapi.imaxdiv_t_rem_set
    __swig_getmethods__["rem"] = _otapi.imaxdiv_t_rem_get
    if _newclass:rem = _swig_property(_otapi.imaxdiv_t_rem_get, _otapi.imaxdiv_t_rem_set)
    def __init__(self): 
        this = _otapi.new_imaxdiv_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _otapi.delete_imaxdiv_t
    __del__ = lambda self : None;
imaxdiv_t_swigregister = _otapi.imaxdiv_t_swigregister
imaxdiv_t_swigregister(imaxdiv_t)


def imaxabs(*args):
  return _otapi.imaxabs(*args)
imaxabs = _otapi.imaxabs

def imaxdiv(*args):
  return _otapi.imaxdiv(*args)
imaxdiv = _otapi.imaxdiv

def wcstoimax(*args):
  return _otapi.wcstoimax(*args)
wcstoimax = _otapi.wcstoimax

def wcstoumax(*args):
  return _otapi.wcstoumax(*args)
wcstoumax = _otapi.wcstoumax
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _otapi.SwigPyIterator_value(self)
    def incr(self, n=1): return _otapi.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _otapi.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _otapi.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _otapi.SwigPyIterator_equal(self, *args)
    def copy(self): return _otapi.SwigPyIterator_copy(self)
    def next(self): return _otapi.SwigPyIterator_next(self)
    def __next__(self): return _otapi.SwigPyIterator___next__(self)
    def previous(self): return _otapi.SwigPyIterator_previous(self)
    def advance(self, *args): return _otapi.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _otapi.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _otapi.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _otapi.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _otapi.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _otapi.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _otapi.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _otapi.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class VectorUnsignedChar(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorUnsignedChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorUnsignedChar, name)
    __repr__ = _swig_repr
    def iterator(self): return _otapi.VectorUnsignedChar_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _otapi.VectorUnsignedChar___nonzero__(self)
    def __bool__(self): return _otapi.VectorUnsignedChar___bool__(self)
    def __len__(self): return _otapi.VectorUnsignedChar___len__(self)
    def pop(self): return _otapi.VectorUnsignedChar_pop(self)
    def __getslice__(self, *args): return _otapi.VectorUnsignedChar___getslice__(self, *args)
    def __setslice__(self, *args): return _otapi.VectorUnsignedChar___setslice__(self, *args)
    def __delslice__(self, *args): return _otapi.VectorUnsignedChar___delslice__(self, *args)
    def __delitem__(self, *args): return _otapi.VectorUnsignedChar___delitem__(self, *args)
    def __getitem__(self, *args): return _otapi.VectorUnsignedChar___getitem__(self, *args)
    def __setitem__(self, *args): return _otapi.VectorUnsignedChar___setitem__(self, *args)
    def append(self, *args): return _otapi.VectorUnsignedChar_append(self, *args)
    def empty(self): return _otapi.VectorUnsignedChar_empty(self)
    def size(self): return _otapi.VectorUnsignedChar_size(self)
    def clear(self): return _otapi.VectorUnsignedChar_clear(self)
    def swap(self, *args): return _otapi.VectorUnsignedChar_swap(self, *args)
    def get_allocator(self): return _otapi.VectorUnsignedChar_get_allocator(self)
    def begin(self): return _otapi.VectorUnsignedChar_begin(self)
    def end(self): return _otapi.VectorUnsignedChar_end(self)
    def rbegin(self): return _otapi.VectorUnsignedChar_rbegin(self)
    def rend(self): return _otapi.VectorUnsignedChar_rend(self)
    def pop_back(self): return _otapi.VectorUnsignedChar_pop_back(self)
    def erase(self, *args): return _otapi.VectorUnsignedChar_erase(self, *args)
    def __init__(self, *args): 
        this = _otapi.new_VectorUnsignedChar(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _otapi.VectorUnsignedChar_push_back(self, *args)
    def front(self): return _otapi.VectorUnsignedChar_front(self)
    def back(self): return _otapi.VectorUnsignedChar_back(self)
    def assign(self, *args): return _otapi.VectorUnsignedChar_assign(self, *args)
    def resize(self, *args): return _otapi.VectorUnsignedChar_resize(self, *args)
    def insert(self, *args): return _otapi.VectorUnsignedChar_insert(self, *args)
    def reserve(self, *args): return _otapi.VectorUnsignedChar_reserve(self, *args)
    def capacity(self): return _otapi.VectorUnsignedChar_capacity(self)
    __swig_destroy__ = _otapi.delete_VectorUnsignedChar
    __del__ = lambda self : None;
VectorUnsignedChar_swigregister = _otapi.VectorUnsignedChar_swigregister
VectorUnsignedChar_swigregister(VectorUnsignedChar)

class MapStringString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapStringString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapStringString, name)
    __repr__ = _swig_repr
    def iterator(self): return _otapi.MapStringString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _otapi.MapStringString___nonzero__(self)
    def __bool__(self): return _otapi.MapStringString___bool__(self)
    def __len__(self): return _otapi.MapStringString___len__(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __getitem__(self, *args): return _otapi.MapStringString___getitem__(self, *args)
    def __delitem__(self, *args): return _otapi.MapStringString___delitem__(self, *args)
    def has_key(self, *args): return _otapi.MapStringString_has_key(self, *args)
    def keys(self): return _otapi.MapStringString_keys(self)
    def values(self): return _otapi.MapStringString_values(self)
    def items(self): return _otapi.MapStringString_items(self)
    def __contains__(self, *args): return _otapi.MapStringString___contains__(self, *args)
    def key_iterator(self): return _otapi.MapStringString_key_iterator(self)
    def value_iterator(self): return _otapi.MapStringString_value_iterator(self)
    def __setitem__(self, *args): return _otapi.MapStringString___setitem__(self, *args)
    def asdict(self): return _otapi.MapStringString_asdict(self)
    def __init__(self, *args): 
        this = _otapi.new_MapStringString(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _otapi.MapStringString_empty(self)
    def size(self): return _otapi.MapStringString_size(self)
    def clear(self): return _otapi.MapStringString_clear(self)
    def swap(self, *args): return _otapi.MapStringString_swap(self, *args)
    def get_allocator(self): return _otapi.MapStringString_get_allocator(self)
    def begin(self): return _otapi.MapStringString_begin(self)
    def end(self): return _otapi.MapStringString_end(self)
    def rbegin(self): return _otapi.MapStringString_rbegin(self)
    def rend(self): return _otapi.MapStringString_rend(self)
    def count(self, *args): return _otapi.MapStringString_count(self, *args)
    def erase(self, *args): return _otapi.MapStringString_erase(self, *args)
    def find(self, *args): return _otapi.MapStringString_find(self, *args)
    def lower_bound(self, *args): return _otapi.MapStringString_lower_bound(self, *args)
    def upper_bound(self, *args): return _otapi.MapStringString_upper_bound(self, *args)
    __swig_destroy__ = _otapi.delete_MapStringString
    __del__ = lambda self : None;
MapStringString_swigregister = _otapi.MapStringString_swigregister
MapStringString_swigregister(MapStringString)

OT_PW_DISPLAY = _otapi.OT_PW_DISPLAY
OTPASSWORD_BLOCKSIZE = _otapi.OTPASSWORD_BLOCKSIZE
OTPASSWORD_MEMSIZE = _otapi.OTPASSWORD_MEMSIZE
OT_LARGE_BLOCKSIZE = _otapi.OT_LARGE_BLOCKSIZE
OT_LARGE_MEMSIZE = _otapi.OT_LARGE_MEMSIZE
OT_DEFAULT_BLOCKSIZE = _otapi.OT_DEFAULT_BLOCKSIZE
OT_DEFAULT_MEMSIZE = _otapi.OT_DEFAULT_MEMSIZE
class OTPassword(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTPassword, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OTPassword, name)
    __repr__ = _swig_repr
    DEFAULT_SIZE = _otapi.OTPassword_DEFAULT_SIZE
    LARGER_SIZE = _otapi.OTPassword_LARGER_SIZE
    __swig_getmethods__["m_theBlockSize"] = _otapi.OTPassword_m_theBlockSize_get
    if _newclass:m_theBlockSize = _swig_property(_otapi.OTPassword_m_theBlockSize_get)
    def isPassword(self): return _otapi.OTPassword_isPassword(self)
    def getPassword_uint8(self): return _otapi.OTPassword_getPassword_uint8(self)
    def getPassword(self): return _otapi.OTPassword_getPassword(self)
    def getPasswordWritable(self): return _otapi.OTPassword_getPasswordWritable(self)
    def getPasswordWritable_char(self): return _otapi.OTPassword_getPasswordWritable_char(self)
    def setPassword(self, *args): return _otapi.OTPassword_setPassword(self, *args)
    def setPassword_uint8(self, *args): return _otapi.OTPassword_setPassword_uint8(self, *args)
    def addChar(self, *args): return _otapi.OTPassword_addChar(self, *args)
    __swig_getmethods__["randomizePassword_uint8"] = lambda x: _otapi.OTPassword_randomizePassword_uint8
    if _newclass:randomizePassword_uint8 = staticmethod(_otapi.OTPassword_randomizePassword_uint8)
    __swig_getmethods__["randomizePassword"] = lambda x: _otapi.OTPassword_randomizePassword
    if _newclass:randomizePassword = staticmethod(_otapi.OTPassword_randomizePassword)
    def isMemory(self): return _otapi.OTPassword_isMemory(self)
    def getMemory(self): return _otapi.OTPassword_getMemory(self)
    def getMemory_uint8(self): return _otapi.OTPassword_getMemory_uint8(self)
    def getMemoryWritable(self): return _otapi.OTPassword_getMemoryWritable(self)
    def setMemory(self, *args): return _otapi.OTPassword_setMemory(self, *args)
    def addMemory(self, *args): return _otapi.OTPassword_addMemory(self, *args)
    __swig_getmethods__["randomizeMemory_uint8"] = lambda x: _otapi.OTPassword_randomizeMemory_uint8
    if _newclass:randomizeMemory_uint8 = staticmethod(_otapi.OTPassword_randomizeMemory_uint8)
    __swig_getmethods__["randomizeMemory"] = lambda x: _otapi.OTPassword_randomizeMemory
    if _newclass:randomizeMemory = staticmethod(_otapi.OTPassword_randomizeMemory)
    def getBlockSize(self): return _otapi.OTPassword_getBlockSize(self)
    def Compare(self, *args): return _otapi.OTPassword_Compare(self, *args)
    def getPasswordSize(self): return _otapi.OTPassword_getPasswordSize(self)
    def getMemorySize(self): return _otapi.OTPassword_getMemorySize(self)
    __swig_getmethods__["zeroMemory"] = lambda x: _otapi.OTPassword_zeroMemory
    if _newclass:zeroMemory = staticmethod(_otapi.OTPassword_zeroMemory)
    __swig_getmethods__["safe_memcpy"] = lambda x: _otapi.OTPassword_safe_memcpy
    if _newclass:safe_memcpy = staticmethod(_otapi.OTPassword_safe_memcpy)
    __swig_getmethods__["CreateTextBuffer"] = lambda x: _otapi.OTPassword_CreateTextBuffer
    if _newclass:CreateTextBuffer = staticmethod(_otapi.OTPassword_CreateTextBuffer)
    def SetSize(self, *args): return _otapi.OTPassword_SetSize(self, *args)
    def __init__(self, *args): 
        this = _otapi.new_OTPassword(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _otapi.delete_OTPassword
    __del__ = lambda self : None;
OTPassword_swigregister = _otapi.OTPassword_swigregister
OTPassword_swigregister(OTPassword)

def OTPassword_randomizePassword_uint8(*args):
  return _otapi.OTPassword_randomizePassword_uint8(*args)
OTPassword_randomizePassword_uint8 = _otapi.OTPassword_randomizePassword_uint8

def OTPassword_randomizePassword(*args):
  return _otapi.OTPassword_randomizePassword(*args)
OTPassword_randomizePassword = _otapi.OTPassword_randomizePassword

def OTPassword_randomizeMemory_uint8(*args):
  return _otapi.OTPassword_randomizeMemory_uint8(*args)
OTPassword_randomizeMemory_uint8 = _otapi.OTPassword_randomizeMemory_uint8

def OTPassword_randomizeMemory(*args):
  return _otapi.OTPassword_randomizeMemory(*args)
OTPassword_randomizeMemory = _otapi.OTPassword_randomizeMemory

def OTPassword_zeroMemory(*args):
  return _otapi.OTPassword_zeroMemory(*args)
OTPassword_zeroMemory = _otapi.OTPassword_zeroMemory

def OTPassword_safe_memcpy(*args):
  return _otapi.OTPassword_safe_memcpy(*args)
OTPassword_safe_memcpy = _otapi.OTPassword_safe_memcpy

def OTPassword_CreateTextBuffer():
  return _otapi.OTPassword_CreateTextBuffer()
OTPassword_CreateTextBuffer = _otapi.OTPassword_CreateTextBuffer

class OTCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OTCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == OTCallback:
            _self = None
        else:
            _self = self
        this = _otapi.new_OTCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _otapi.delete_OTCallback
    __del__ = lambda self : None;
    def runOne(self, *args): return _otapi.OTCallback_runOne(self, *args)
    def runTwo(self, *args): return _otapi.OTCallback_runTwo(self, *args)
    def __disown__(self):
        self.this.disown()
        _otapi.disown_OTCallback(self)
        return weakref_proxy(self)
OTCallback_swigregister = _otapi.OTCallback_swigregister
OTCallback_swigregister(OTCallback)

class OTCaller(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTCaller, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OTCaller, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _otapi.new_OTCaller()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _otapi.delete_OTCaller
    __del__ = lambda self : None;
    def GetPassword(self, *args): return _otapi.OTCaller_GetPassword(self, *args)
    def ZeroOutPassword(self): return _otapi.OTCaller_ZeroOutPassword(self)
    def GetDisplay(self): return _otapi.OTCaller_GetDisplay(self)
    def SetDisplay(self, *args): return _otapi.OTCaller_SetDisplay(self, *args)
    def delCallback(self): return _otapi.OTCaller_delCallback(self)
    def setCallback(self, *args): return _otapi.OTCaller_setCallback(self, *args)
    def isCallbackSet(self): return _otapi.OTCaller_isCallbackSet(self)
    def callOne(self): return _otapi.OTCaller_callOne(self)
    def callTwo(self): return _otapi.OTCaller_callTwo(self)
OTCaller_swigregister = _otapi.OTCaller_swigregister
OTCaller_swigregister(OTCaller)

class WrapTimeT(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrapTimeT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WrapTimeT, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _otapi.new_WrapTimeT()
        try: self.this.append(this)
        except: self.this = this
    def getTime(self): return _otapi.WrapTimeT_getTime(self)
    def setTime(self, *args): return _otapi.WrapTimeT_setTime(self, *args)
    __swig_destroy__ = _otapi.delete_WrapTimeT
    __del__ = lambda self : None;
WrapTimeT_swigregister = _otapi.WrapTimeT_swigregister
WrapTimeT_swigregister(WrapTimeT)

class OTAPI_Wrap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTAPI_Wrap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OTAPI_Wrap, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["SetExecutor"] = lambda x: _otapi.OTAPI_Wrap_SetExecutor
    if _newclass:SetExecutor = staticmethod(_otapi.OTAPI_Wrap_SetExecutor)
    __swig_getmethods__["Exec"] = lambda x: _otapi.OTAPI_Wrap_Exec
    if _newclass:Exec = staticmethod(_otapi.OTAPI_Wrap_Exec)
    __swig_getmethods__["It"] = lambda x: _otapi.OTAPI_Wrap_It
    if _newclass:It = staticmethod(_otapi.OTAPI_Wrap_It)
    __swig_getmethods__["OTAPI"] = lambda x: _otapi.OTAPI_Wrap_OTAPI
    if _newclass:OTAPI = staticmethod(_otapi.OTAPI_Wrap_OTAPI)
    __swig_getmethods__["StringToLong"] = lambda x: _otapi.OTAPI_Wrap_StringToLong
    if _newclass:StringToLong = staticmethod(_otapi.OTAPI_Wrap_StringToLong)
    __swig_getmethods__["LongToString"] = lambda x: _otapi.OTAPI_Wrap_LongToString
    if _newclass:LongToString = staticmethod(_otapi.OTAPI_Wrap_LongToString)
    __swig_getmethods__["StringToUlong"] = lambda x: _otapi.OTAPI_Wrap_StringToUlong
    if _newclass:StringToUlong = staticmethod(_otapi.OTAPI_Wrap_StringToUlong)
    __swig_getmethods__["UlongToString"] = lambda x: _otapi.OTAPI_Wrap_UlongToString
    if _newclass:UlongToString = staticmethod(_otapi.OTAPI_Wrap_UlongToString)
    __swig_getmethods__["AppInit"] = lambda x: _otapi.OTAPI_Wrap_AppInit
    if _newclass:AppInit = staticmethod(_otapi.OTAPI_Wrap_AppInit)
    __swig_getmethods__["AppCleanup"] = lambda x: _otapi.OTAPI_Wrap_AppCleanup
    if _newclass:AppCleanup = staticmethod(_otapi.OTAPI_Wrap_AppCleanup)
    __swig_getmethods__["SetAppBinaryFolder"] = lambda x: _otapi.OTAPI_Wrap_SetAppBinaryFolder
    if _newclass:SetAppBinaryFolder = staticmethod(_otapi.OTAPI_Wrap_SetAppBinaryFolder)
    __swig_getmethods__["SetHomeFolder"] = lambda x: _otapi.OTAPI_Wrap_SetHomeFolder
    if _newclass:SetHomeFolder = staticmethod(_otapi.OTAPI_Wrap_SetHomeFolder)
    __swig_getmethods__["SetWallet"] = lambda x: _otapi.OTAPI_Wrap_SetWallet
    if _newclass:SetWallet = staticmethod(_otapi.OTAPI_Wrap_SetWallet)
    __swig_getmethods__["WalletExists"] = lambda x: _otapi.OTAPI_Wrap_WalletExists
    if _newclass:WalletExists = staticmethod(_otapi.OTAPI_Wrap_WalletExists)
    __swig_getmethods__["LoadWallet"] = lambda x: _otapi.OTAPI_Wrap_LoadWallet
    if _newclass:LoadWallet = staticmethod(_otapi.OTAPI_Wrap_LoadWallet)
    __swig_getmethods__["SwitchWallet"] = lambda x: _otapi.OTAPI_Wrap_SwitchWallet
    if _newclass:SwitchWallet = staticmethod(_otapi.OTAPI_Wrap_SwitchWallet)
    __swig_getmethods__["Output"] = lambda x: _otapi.OTAPI_Wrap_Output
    if _newclass:Output = staticmethod(_otapi.OTAPI_Wrap_Output)
    __swig_getmethods__["GetTime"] = lambda x: _otapi.OTAPI_Wrap_GetTime
    if _newclass:GetTime = staticmethod(_otapi.OTAPI_Wrap_GetTime)
    __swig_getmethods__["NumList_Add"] = lambda x: _otapi.OTAPI_Wrap_NumList_Add
    if _newclass:NumList_Add = staticmethod(_otapi.OTAPI_Wrap_NumList_Add)
    __swig_getmethods__["NumList_Remove"] = lambda x: _otapi.OTAPI_Wrap_NumList_Remove
    if _newclass:NumList_Remove = staticmethod(_otapi.OTAPI_Wrap_NumList_Remove)
    __swig_getmethods__["NumList_VerifyQuery"] = lambda x: _otapi.OTAPI_Wrap_NumList_VerifyQuery
    if _newclass:NumList_VerifyQuery = staticmethod(_otapi.OTAPI_Wrap_NumList_VerifyQuery)
    __swig_getmethods__["NumList_VerifyAll"] = lambda x: _otapi.OTAPI_Wrap_NumList_VerifyAll
    if _newclass:NumList_VerifyAll = staticmethod(_otapi.OTAPI_Wrap_NumList_VerifyAll)
    __swig_getmethods__["NumList_Count"] = lambda x: _otapi.OTAPI_Wrap_NumList_Count
    if _newclass:NumList_Count = staticmethod(_otapi.OTAPI_Wrap_NumList_Count)
    __swig_getmethods__["Encode"] = lambda x: _otapi.OTAPI_Wrap_Encode
    if _newclass:Encode = staticmethod(_otapi.OTAPI_Wrap_Encode)
    __swig_getmethods__["Decode"] = lambda x: _otapi.OTAPI_Wrap_Decode
    if _newclass:Decode = staticmethod(_otapi.OTAPI_Wrap_Decode)
    __swig_getmethods__["Encrypt"] = lambda x: _otapi.OTAPI_Wrap_Encrypt
    if _newclass:Encrypt = staticmethod(_otapi.OTAPI_Wrap_Encrypt)
    __swig_getmethods__["Decrypt"] = lambda x: _otapi.OTAPI_Wrap_Decrypt
    if _newclass:Decrypt = staticmethod(_otapi.OTAPI_Wrap_Decrypt)
    __swig_getmethods__["CreateSymmetricKey"] = lambda x: _otapi.OTAPI_Wrap_CreateSymmetricKey
    if _newclass:CreateSymmetricKey = staticmethod(_otapi.OTAPI_Wrap_CreateSymmetricKey)
    __swig_getmethods__["SymmetricEncrypt"] = lambda x: _otapi.OTAPI_Wrap_SymmetricEncrypt
    if _newclass:SymmetricEncrypt = staticmethod(_otapi.OTAPI_Wrap_SymmetricEncrypt)
    __swig_getmethods__["SymmetricDecrypt"] = lambda x: _otapi.OTAPI_Wrap_SymmetricDecrypt
    if _newclass:SymmetricDecrypt = staticmethod(_otapi.OTAPI_Wrap_SymmetricDecrypt)
    __swig_getmethods__["SignContract"] = lambda x: _otapi.OTAPI_Wrap_SignContract
    if _newclass:SignContract = staticmethod(_otapi.OTAPI_Wrap_SignContract)
    __swig_getmethods__["FlatSign"] = lambda x: _otapi.OTAPI_Wrap_FlatSign
    if _newclass:FlatSign = staticmethod(_otapi.OTAPI_Wrap_FlatSign)
    __swig_getmethods__["AddSignature"] = lambda x: _otapi.OTAPI_Wrap_AddSignature
    if _newclass:AddSignature = staticmethod(_otapi.OTAPI_Wrap_AddSignature)
    __swig_getmethods__["VerifySignature"] = lambda x: _otapi.OTAPI_Wrap_VerifySignature
    if _newclass:VerifySignature = staticmethod(_otapi.OTAPI_Wrap_VerifySignature)
    __swig_getmethods__["VerifyAndRetrieveXMLContents"] = lambda x: _otapi.OTAPI_Wrap_VerifyAndRetrieveXMLContents
    if _newclass:VerifyAndRetrieveXMLContents = staticmethod(_otapi.OTAPI_Wrap_VerifyAndRetrieveXMLContents)
    __swig_getmethods__["GetMemlogSize"] = lambda x: _otapi.OTAPI_Wrap_GetMemlogSize
    if _newclass:GetMemlogSize = staticmethod(_otapi.OTAPI_Wrap_GetMemlogSize)
    __swig_getmethods__["GetMemlogAtIndex"] = lambda x: _otapi.OTAPI_Wrap_GetMemlogAtIndex
    if _newclass:GetMemlogAtIndex = staticmethod(_otapi.OTAPI_Wrap_GetMemlogAtIndex)
    __swig_getmethods__["PeekMemlogFront"] = lambda x: _otapi.OTAPI_Wrap_PeekMemlogFront
    if _newclass:PeekMemlogFront = staticmethod(_otapi.OTAPI_Wrap_PeekMemlogFront)
    __swig_getmethods__["PeekMemlogBack"] = lambda x: _otapi.OTAPI_Wrap_PeekMemlogBack
    if _newclass:PeekMemlogBack = staticmethod(_otapi.OTAPI_Wrap_PeekMemlogBack)
    __swig_getmethods__["PopMemlogFront"] = lambda x: _otapi.OTAPI_Wrap_PopMemlogFront
    if _newclass:PopMemlogFront = staticmethod(_otapi.OTAPI_Wrap_PopMemlogFront)
    __swig_getmethods__["PopMemlogBack"] = lambda x: _otapi.OTAPI_Wrap_PopMemlogBack
    if _newclass:PopMemlogBack = staticmethod(_otapi.OTAPI_Wrap_PopMemlogBack)
    __swig_getmethods__["CreateNym"] = lambda x: _otapi.OTAPI_Wrap_CreateNym
    if _newclass:CreateNym = staticmethod(_otapi.OTAPI_Wrap_CreateNym)
    __swig_getmethods__["GetNym_ActiveCronItemIDs"] = lambda x: _otapi.OTAPI_Wrap_GetNym_ActiveCronItemIDs
    if _newclass:GetNym_ActiveCronItemIDs = staticmethod(_otapi.OTAPI_Wrap_GetNym_ActiveCronItemIDs)
    __swig_getmethods__["GetActiveCronItem"] = lambda x: _otapi.OTAPI_Wrap_GetActiveCronItem
    if _newclass:GetActiveCronItem = staticmethod(_otapi.OTAPI_Wrap_GetActiveCronItem)
    __swig_getmethods__["GetNym_SourceForID"] = lambda x: _otapi.OTAPI_Wrap_GetNym_SourceForID
    if _newclass:GetNym_SourceForID = staticmethod(_otapi.OTAPI_Wrap_GetNym_SourceForID)
    __swig_getmethods__["GetNym_AltSourceLocation"] = lambda x: _otapi.OTAPI_Wrap_GetNym_AltSourceLocation
    if _newclass:GetNym_AltSourceLocation = staticmethod(_otapi.OTAPI_Wrap_GetNym_AltSourceLocation)
    __swig_getmethods__["GetNym_CredentialCount"] = lambda x: _otapi.OTAPI_Wrap_GetNym_CredentialCount
    if _newclass:GetNym_CredentialCount = staticmethod(_otapi.OTAPI_Wrap_GetNym_CredentialCount)
    __swig_getmethods__["GetNym_CredentialID"] = lambda x: _otapi.OTAPI_Wrap_GetNym_CredentialID
    if _newclass:GetNym_CredentialID = staticmethod(_otapi.OTAPI_Wrap_GetNym_CredentialID)
    __swig_getmethods__["GetNym_CredentialContents"] = lambda x: _otapi.OTAPI_Wrap_GetNym_CredentialContents
    if _newclass:GetNym_CredentialContents = staticmethod(_otapi.OTAPI_Wrap_GetNym_CredentialContents)
    __swig_getmethods__["GetNym_RevokedCredCount"] = lambda x: _otapi.OTAPI_Wrap_GetNym_RevokedCredCount
    if _newclass:GetNym_RevokedCredCount = staticmethod(_otapi.OTAPI_Wrap_GetNym_RevokedCredCount)
    __swig_getmethods__["GetNym_RevokedCredID"] = lambda x: _otapi.OTAPI_Wrap_GetNym_RevokedCredID
    if _newclass:GetNym_RevokedCredID = staticmethod(_otapi.OTAPI_Wrap_GetNym_RevokedCredID)
    __swig_getmethods__["GetNym_RevokedCredContents"] = lambda x: _otapi.OTAPI_Wrap_GetNym_RevokedCredContents
    if _newclass:GetNym_RevokedCredContents = staticmethod(_otapi.OTAPI_Wrap_GetNym_RevokedCredContents)
    __swig_getmethods__["GetNym_SubcredentialCount"] = lambda x: _otapi.OTAPI_Wrap_GetNym_SubcredentialCount
    if _newclass:GetNym_SubcredentialCount = staticmethod(_otapi.OTAPI_Wrap_GetNym_SubcredentialCount)
    __swig_getmethods__["GetNym_SubCredentialID"] = lambda x: _otapi.OTAPI_Wrap_GetNym_SubCredentialID
    if _newclass:GetNym_SubCredentialID = staticmethod(_otapi.OTAPI_Wrap_GetNym_SubCredentialID)
    __swig_getmethods__["GetNym_SubCredentialContents"] = lambda x: _otapi.OTAPI_Wrap_GetNym_SubCredentialContents
    if _newclass:GetNym_SubCredentialContents = staticmethod(_otapi.OTAPI_Wrap_GetNym_SubCredentialContents)
    __swig_getmethods__["AddSubcredential"] = lambda x: _otapi.OTAPI_Wrap_AddSubcredential
    if _newclass:AddSubcredential = staticmethod(_otapi.OTAPI_Wrap_AddSubcredential)
    __swig_getmethods__["RevokeSubcredential"] = lambda x: _otapi.OTAPI_Wrap_RevokeSubcredential
    if _newclass:RevokeSubcredential = staticmethod(_otapi.OTAPI_Wrap_RevokeSubcredential)
    __swig_getmethods__["CreateServerContract"] = lambda x: _otapi.OTAPI_Wrap_CreateServerContract
    if _newclass:CreateServerContract = staticmethod(_otapi.OTAPI_Wrap_CreateServerContract)
    __swig_getmethods__["CreateAssetContract"] = lambda x: _otapi.OTAPI_Wrap_CreateAssetContract
    if _newclass:CreateAssetContract = staticmethod(_otapi.OTAPI_Wrap_CreateAssetContract)
    __swig_getmethods__["CalculateAssetContractID"] = lambda x: _otapi.OTAPI_Wrap_CalculateAssetContractID
    if _newclass:CalculateAssetContractID = staticmethod(_otapi.OTAPI_Wrap_CalculateAssetContractID)
    __swig_getmethods__["CalculateServerContractID"] = lambda x: _otapi.OTAPI_Wrap_CalculateServerContractID
    if _newclass:CalculateServerContractID = staticmethod(_otapi.OTAPI_Wrap_CalculateServerContractID)
    __swig_getmethods__["AddServerContract"] = lambda x: _otapi.OTAPI_Wrap_AddServerContract
    if _newclass:AddServerContract = staticmethod(_otapi.OTAPI_Wrap_AddServerContract)
    __swig_getmethods__["AddAssetContract"] = lambda x: _otapi.OTAPI_Wrap_AddAssetContract
    if _newclass:AddAssetContract = staticmethod(_otapi.OTAPI_Wrap_AddAssetContract)
    __swig_getmethods__["GetServerCount"] = lambda x: _otapi.OTAPI_Wrap_GetServerCount
    if _newclass:GetServerCount = staticmethod(_otapi.OTAPI_Wrap_GetServerCount)
    __swig_getmethods__["GetAssetTypeCount"] = lambda x: _otapi.OTAPI_Wrap_GetAssetTypeCount
    if _newclass:GetAssetTypeCount = staticmethod(_otapi.OTAPI_Wrap_GetAssetTypeCount)
    __swig_getmethods__["GetAccountCount"] = lambda x: _otapi.OTAPI_Wrap_GetAccountCount
    if _newclass:GetAccountCount = staticmethod(_otapi.OTAPI_Wrap_GetAccountCount)
    __swig_getmethods__["GetNymCount"] = lambda x: _otapi.OTAPI_Wrap_GetNymCount
    if _newclass:GetNymCount = staticmethod(_otapi.OTAPI_Wrap_GetNymCount)
    __swig_getmethods__["GetServer_ID"] = lambda x: _otapi.OTAPI_Wrap_GetServer_ID
    if _newclass:GetServer_ID = staticmethod(_otapi.OTAPI_Wrap_GetServer_ID)
    __swig_getmethods__["GetServer_Name"] = lambda x: _otapi.OTAPI_Wrap_GetServer_Name
    if _newclass:GetServer_Name = staticmethod(_otapi.OTAPI_Wrap_GetServer_Name)
    __swig_getmethods__["GetServer_Contract"] = lambda x: _otapi.OTAPI_Wrap_GetServer_Contract
    if _newclass:GetServer_Contract = staticmethod(_otapi.OTAPI_Wrap_GetServer_Contract)
    __swig_getmethods__["FormatAmount"] = lambda x: _otapi.OTAPI_Wrap_FormatAmount
    if _newclass:FormatAmount = staticmethod(_otapi.OTAPI_Wrap_FormatAmount)
    __swig_getmethods__["StringToAmount"] = lambda x: _otapi.OTAPI_Wrap_StringToAmount
    if _newclass:StringToAmount = staticmethod(_otapi.OTAPI_Wrap_StringToAmount)
    __swig_getmethods__["GetAssetType_ID"] = lambda x: _otapi.OTAPI_Wrap_GetAssetType_ID
    if _newclass:GetAssetType_ID = staticmethod(_otapi.OTAPI_Wrap_GetAssetType_ID)
    __swig_getmethods__["GetAssetType_Name"] = lambda x: _otapi.OTAPI_Wrap_GetAssetType_Name
    if _newclass:GetAssetType_Name = staticmethod(_otapi.OTAPI_Wrap_GetAssetType_Name)
    __swig_getmethods__["GetAssetType_TLA"] = lambda x: _otapi.OTAPI_Wrap_GetAssetType_TLA
    if _newclass:GetAssetType_TLA = staticmethod(_otapi.OTAPI_Wrap_GetAssetType_TLA)
    __swig_getmethods__["GetAssetType_Contract"] = lambda x: _otapi.OTAPI_Wrap_GetAssetType_Contract
    if _newclass:GetAssetType_Contract = staticmethod(_otapi.OTAPI_Wrap_GetAssetType_Contract)
    __swig_getmethods__["GetAccountWallet_ID"] = lambda x: _otapi.OTAPI_Wrap_GetAccountWallet_ID
    if _newclass:GetAccountWallet_ID = staticmethod(_otapi.OTAPI_Wrap_GetAccountWallet_ID)
    __swig_getmethods__["GetAccountWallet_Name"] = lambda x: _otapi.OTAPI_Wrap_GetAccountWallet_Name
    if _newclass:GetAccountWallet_Name = staticmethod(_otapi.OTAPI_Wrap_GetAccountWallet_Name)
    __swig_getmethods__["GetAccountWallet_Balance"] = lambda x: _otapi.OTAPI_Wrap_GetAccountWallet_Balance
    if _newclass:GetAccountWallet_Balance = staticmethod(_otapi.OTAPI_Wrap_GetAccountWallet_Balance)
    __swig_getmethods__["GetAccountWallet_Type"] = lambda x: _otapi.OTAPI_Wrap_GetAccountWallet_Type
    if _newclass:GetAccountWallet_Type = staticmethod(_otapi.OTAPI_Wrap_GetAccountWallet_Type)
    __swig_getmethods__["GetAccountWallet_AssetTypeID"] = lambda x: _otapi.OTAPI_Wrap_GetAccountWallet_AssetTypeID
    if _newclass:GetAccountWallet_AssetTypeID = staticmethod(_otapi.OTAPI_Wrap_GetAccountWallet_AssetTypeID)
    __swig_getmethods__["GetAccountWallet_ServerID"] = lambda x: _otapi.OTAPI_Wrap_GetAccountWallet_ServerID
    if _newclass:GetAccountWallet_ServerID = staticmethod(_otapi.OTAPI_Wrap_GetAccountWallet_ServerID)
    __swig_getmethods__["GetAccountWallet_NymID"] = lambda x: _otapi.OTAPI_Wrap_GetAccountWallet_NymID
    if _newclass:GetAccountWallet_NymID = staticmethod(_otapi.OTAPI_Wrap_GetAccountWallet_NymID)
    __swig_getmethods__["GetAccountWallet_InboxHash"] = lambda x: _otapi.OTAPI_Wrap_GetAccountWallet_InboxHash
    if _newclass:GetAccountWallet_InboxHash = staticmethod(_otapi.OTAPI_Wrap_GetAccountWallet_InboxHash)
    __swig_getmethods__["GetAccountWallet_OutboxHash"] = lambda x: _otapi.OTAPI_Wrap_GetAccountWallet_OutboxHash
    if _newclass:GetAccountWallet_OutboxHash = staticmethod(_otapi.OTAPI_Wrap_GetAccountWallet_OutboxHash)
    __swig_getmethods__["VerifyAccountReceipt"] = lambda x: _otapi.OTAPI_Wrap_VerifyAccountReceipt
    if _newclass:VerifyAccountReceipt = staticmethod(_otapi.OTAPI_Wrap_VerifyAccountReceipt)
    __swig_getmethods__["GetNym_TransactionNumCount"] = lambda x: _otapi.OTAPI_Wrap_GetNym_TransactionNumCount
    if _newclass:GetNym_TransactionNumCount = staticmethod(_otapi.OTAPI_Wrap_GetNym_TransactionNumCount)
    __swig_getmethods__["GetNym_ID"] = lambda x: _otapi.OTAPI_Wrap_GetNym_ID
    if _newclass:GetNym_ID = staticmethod(_otapi.OTAPI_Wrap_GetNym_ID)
    __swig_getmethods__["GetNym_Name"] = lambda x: _otapi.OTAPI_Wrap_GetNym_Name
    if _newclass:GetNym_Name = staticmethod(_otapi.OTAPI_Wrap_GetNym_Name)
    __swig_getmethods__["GetNym_Stats"] = lambda x: _otapi.OTAPI_Wrap_GetNym_Stats
    if _newclass:GetNym_Stats = staticmethod(_otapi.OTAPI_Wrap_GetNym_Stats)
    __swig_getmethods__["GetNym_NymboxHash"] = lambda x: _otapi.OTAPI_Wrap_GetNym_NymboxHash
    if _newclass:GetNym_NymboxHash = staticmethod(_otapi.OTAPI_Wrap_GetNym_NymboxHash)
    __swig_getmethods__["GetNym_RecentHash"] = lambda x: _otapi.OTAPI_Wrap_GetNym_RecentHash
    if _newclass:GetNym_RecentHash = staticmethod(_otapi.OTAPI_Wrap_GetNym_RecentHash)
    __swig_getmethods__["GetNym_InboxHash"] = lambda x: _otapi.OTAPI_Wrap_GetNym_InboxHash
    if _newclass:GetNym_InboxHash = staticmethod(_otapi.OTAPI_Wrap_GetNym_InboxHash)
    __swig_getmethods__["GetNym_OutboxHash"] = lambda x: _otapi.OTAPI_Wrap_GetNym_OutboxHash
    if _newclass:GetNym_OutboxHash = staticmethod(_otapi.OTAPI_Wrap_GetNym_OutboxHash)
    __swig_getmethods__["IsNym_RegisteredAtServer"] = lambda x: _otapi.OTAPI_Wrap_IsNym_RegisteredAtServer
    if _newclass:IsNym_RegisteredAtServer = staticmethod(_otapi.OTAPI_Wrap_IsNym_RegisteredAtServer)
    __swig_getmethods__["GetNym_MailCount"] = lambda x: _otapi.OTAPI_Wrap_GetNym_MailCount
    if _newclass:GetNym_MailCount = staticmethod(_otapi.OTAPI_Wrap_GetNym_MailCount)
    __swig_getmethods__["GetNym_MailContentsByIndex"] = lambda x: _otapi.OTAPI_Wrap_GetNym_MailContentsByIndex
    if _newclass:GetNym_MailContentsByIndex = staticmethod(_otapi.OTAPI_Wrap_GetNym_MailContentsByIndex)
    __swig_getmethods__["GetNym_MailSenderIDByIndex"] = lambda x: _otapi.OTAPI_Wrap_GetNym_MailSenderIDByIndex
    if _newclass:GetNym_MailSenderIDByIndex = staticmethod(_otapi.OTAPI_Wrap_GetNym_MailSenderIDByIndex)
    __swig_getmethods__["GetNym_MailServerIDByIndex"] = lambda x: _otapi.OTAPI_Wrap_GetNym_MailServerIDByIndex
    if _newclass:GetNym_MailServerIDByIndex = staticmethod(_otapi.OTAPI_Wrap_GetNym_MailServerIDByIndex)
    __swig_getmethods__["Nym_RemoveMailByIndex"] = lambda x: _otapi.OTAPI_Wrap_Nym_RemoveMailByIndex
    if _newclass:Nym_RemoveMailByIndex = staticmethod(_otapi.OTAPI_Wrap_Nym_RemoveMailByIndex)
    __swig_getmethods__["Nym_VerifyMailByIndex"] = lambda x: _otapi.OTAPI_Wrap_Nym_VerifyMailByIndex
    if _newclass:Nym_VerifyMailByIndex = staticmethod(_otapi.OTAPI_Wrap_Nym_VerifyMailByIndex)
    __swig_getmethods__["GetNym_OutmailCount"] = lambda x: _otapi.OTAPI_Wrap_GetNym_OutmailCount
    if _newclass:GetNym_OutmailCount = staticmethod(_otapi.OTAPI_Wrap_GetNym_OutmailCount)
    __swig_getmethods__["GetNym_OutmailContentsByIndex"] = lambda x: _otapi.OTAPI_Wrap_GetNym_OutmailContentsByIndex
    if _newclass:GetNym_OutmailContentsByIndex = staticmethod(_otapi.OTAPI_Wrap_GetNym_OutmailContentsByIndex)
    __swig_getmethods__["GetNym_OutmailRecipientIDByIndex"] = lambda x: _otapi.OTAPI_Wrap_GetNym_OutmailRecipientIDByIndex
    if _newclass:GetNym_OutmailRecipientIDByIndex = staticmethod(_otapi.OTAPI_Wrap_GetNym_OutmailRecipientIDByIndex)
    __swig_getmethods__["GetNym_OutmailServerIDByIndex"] = lambda x: _otapi.OTAPI_Wrap_GetNym_OutmailServerIDByIndex
    if _newclass:GetNym_OutmailServerIDByIndex = staticmethod(_otapi.OTAPI_Wrap_GetNym_OutmailServerIDByIndex)
    __swig_getmethods__["Nym_RemoveOutmailByIndex"] = lambda x: _otapi.OTAPI_Wrap_Nym_RemoveOutmailByIndex
    if _newclass:Nym_RemoveOutmailByIndex = staticmethod(_otapi.OTAPI_Wrap_Nym_RemoveOutmailByIndex)
    __swig_getmethods__["Nym_VerifyOutmailByIndex"] = lambda x: _otapi.OTAPI_Wrap_Nym_VerifyOutmailByIndex
    if _newclass:Nym_VerifyOutmailByIndex = staticmethod(_otapi.OTAPI_Wrap_Nym_VerifyOutmailByIndex)
    __swig_getmethods__["GetNym_OutpaymentsCount"] = lambda x: _otapi.OTAPI_Wrap_GetNym_OutpaymentsCount
    if _newclass:GetNym_OutpaymentsCount = staticmethod(_otapi.OTAPI_Wrap_GetNym_OutpaymentsCount)
    __swig_getmethods__["GetNym_OutpaymentsContentsByIndex"] = lambda x: _otapi.OTAPI_Wrap_GetNym_OutpaymentsContentsByIndex
    if _newclass:GetNym_OutpaymentsContentsByIndex = staticmethod(_otapi.OTAPI_Wrap_GetNym_OutpaymentsContentsByIndex)
    __swig_getmethods__["GetNym_OutpaymentsRecipientIDByIndex"] = lambda x: _otapi.OTAPI_Wrap_GetNym_OutpaymentsRecipientIDByIndex
    if _newclass:GetNym_OutpaymentsRecipientIDByIndex = staticmethod(_otapi.OTAPI_Wrap_GetNym_OutpaymentsRecipientIDByIndex)
    __swig_getmethods__["GetNym_OutpaymentsServerIDByIndex"] = lambda x: _otapi.OTAPI_Wrap_GetNym_OutpaymentsServerIDByIndex
    if _newclass:GetNym_OutpaymentsServerIDByIndex = staticmethod(_otapi.OTAPI_Wrap_GetNym_OutpaymentsServerIDByIndex)
    __swig_getmethods__["Nym_RemoveOutpaymentsByIndex"] = lambda x: _otapi.OTAPI_Wrap_Nym_RemoveOutpaymentsByIndex
    if _newclass:Nym_RemoveOutpaymentsByIndex = staticmethod(_otapi.OTAPI_Wrap_Nym_RemoveOutpaymentsByIndex)
    __swig_getmethods__["Nym_VerifyOutpaymentsByIndex"] = lambda x: _otapi.OTAPI_Wrap_Nym_VerifyOutpaymentsByIndex
    if _newclass:Nym_VerifyOutpaymentsByIndex = staticmethod(_otapi.OTAPI_Wrap_Nym_VerifyOutpaymentsByIndex)
    __swig_getmethods__["Wallet_CanRemoveServer"] = lambda x: _otapi.OTAPI_Wrap_Wallet_CanRemoveServer
    if _newclass:Wallet_CanRemoveServer = staticmethod(_otapi.OTAPI_Wrap_Wallet_CanRemoveServer)
    __swig_getmethods__["Wallet_RemoveServer"] = lambda x: _otapi.OTAPI_Wrap_Wallet_RemoveServer
    if _newclass:Wallet_RemoveServer = staticmethod(_otapi.OTAPI_Wrap_Wallet_RemoveServer)
    __swig_getmethods__["Wallet_CanRemoveAssetType"] = lambda x: _otapi.OTAPI_Wrap_Wallet_CanRemoveAssetType
    if _newclass:Wallet_CanRemoveAssetType = staticmethod(_otapi.OTAPI_Wrap_Wallet_CanRemoveAssetType)
    __swig_getmethods__["Wallet_RemoveAssetType"] = lambda x: _otapi.OTAPI_Wrap_Wallet_RemoveAssetType
    if _newclass:Wallet_RemoveAssetType = staticmethod(_otapi.OTAPI_Wrap_Wallet_RemoveAssetType)
    __swig_getmethods__["Wallet_CanRemoveNym"] = lambda x: _otapi.OTAPI_Wrap_Wallet_CanRemoveNym
    if _newclass:Wallet_CanRemoveNym = staticmethod(_otapi.OTAPI_Wrap_Wallet_CanRemoveNym)
    __swig_getmethods__["Wallet_RemoveNym"] = lambda x: _otapi.OTAPI_Wrap_Wallet_RemoveNym
    if _newclass:Wallet_RemoveNym = staticmethod(_otapi.OTAPI_Wrap_Wallet_RemoveNym)
    __swig_getmethods__["Wallet_CanRemoveAccount"] = lambda x: _otapi.OTAPI_Wrap_Wallet_CanRemoveAccount
    if _newclass:Wallet_CanRemoveAccount = staticmethod(_otapi.OTAPI_Wrap_Wallet_CanRemoveAccount)
    __swig_getmethods__["Wallet_ChangePassphrase"] = lambda x: _otapi.OTAPI_Wrap_Wallet_ChangePassphrase
    if _newclass:Wallet_ChangePassphrase = staticmethod(_otapi.OTAPI_Wrap_Wallet_ChangePassphrase)
    __swig_getmethods__["Wallet_ExportNym"] = lambda x: _otapi.OTAPI_Wrap_Wallet_ExportNym
    if _newclass:Wallet_ExportNym = staticmethod(_otapi.OTAPI_Wrap_Wallet_ExportNym)
    __swig_getmethods__["Wallet_ImportNym"] = lambda x: _otapi.OTAPI_Wrap_Wallet_ImportNym
    if _newclass:Wallet_ImportNym = staticmethod(_otapi.OTAPI_Wrap_Wallet_ImportNym)
    __swig_getmethods__["Wallet_ImportCert"] = lambda x: _otapi.OTAPI_Wrap_Wallet_ImportCert
    if _newclass:Wallet_ImportCert = staticmethod(_otapi.OTAPI_Wrap_Wallet_ImportCert)
    __swig_getmethods__["Wallet_ExportCert"] = lambda x: _otapi.OTAPI_Wrap_Wallet_ExportCert
    if _newclass:Wallet_ExportCert = staticmethod(_otapi.OTAPI_Wrap_Wallet_ExportCert)
    __swig_getmethods__["Wallet_GetNymIDFromPartial"] = lambda x: _otapi.OTAPI_Wrap_Wallet_GetNymIDFromPartial
    if _newclass:Wallet_GetNymIDFromPartial = staticmethod(_otapi.OTAPI_Wrap_Wallet_GetNymIDFromPartial)
    __swig_getmethods__["Wallet_GetServerIDFromPartial"] = lambda x: _otapi.OTAPI_Wrap_Wallet_GetServerIDFromPartial
    if _newclass:Wallet_GetServerIDFromPartial = staticmethod(_otapi.OTAPI_Wrap_Wallet_GetServerIDFromPartial)
    __swig_getmethods__["Wallet_GetAssetIDFromPartial"] = lambda x: _otapi.OTAPI_Wrap_Wallet_GetAssetIDFromPartial
    if _newclass:Wallet_GetAssetIDFromPartial = staticmethod(_otapi.OTAPI_Wrap_Wallet_GetAssetIDFromPartial)
    __swig_getmethods__["Wallet_GetAccountIDFromPartial"] = lambda x: _otapi.OTAPI_Wrap_Wallet_GetAccountIDFromPartial
    if _newclass:Wallet_GetAccountIDFromPartial = staticmethod(_otapi.OTAPI_Wrap_Wallet_GetAccountIDFromPartial)
    __swig_getmethods__["SetNym_Name"] = lambda x: _otapi.OTAPI_Wrap_SetNym_Name
    if _newclass:SetNym_Name = staticmethod(_otapi.OTAPI_Wrap_SetNym_Name)
    __swig_getmethods__["SetAccountWallet_Name"] = lambda x: _otapi.OTAPI_Wrap_SetAccountWallet_Name
    if _newclass:SetAccountWallet_Name = staticmethod(_otapi.OTAPI_Wrap_SetAccountWallet_Name)
    __swig_getmethods__["SetAssetType_Name"] = lambda x: _otapi.OTAPI_Wrap_SetAssetType_Name
    if _newclass:SetAssetType_Name = staticmethod(_otapi.OTAPI_Wrap_SetAssetType_Name)
    __swig_getmethods__["SetServer_Name"] = lambda x: _otapi.OTAPI_Wrap_SetServer_Name
    if _newclass:SetServer_Name = staticmethod(_otapi.OTAPI_Wrap_SetServer_Name)
    __swig_getmethods__["WriteCheque"] = lambda x: _otapi.OTAPI_Wrap_WriteCheque
    if _newclass:WriteCheque = staticmethod(_otapi.OTAPI_Wrap_WriteCheque)
    __swig_getmethods__["DiscardCheque"] = lambda x: _otapi.OTAPI_Wrap_DiscardCheque
    if _newclass:DiscardCheque = staticmethod(_otapi.OTAPI_Wrap_DiscardCheque)
    __swig_getmethods__["ProposePaymentPlan"] = lambda x: _otapi.OTAPI_Wrap_ProposePaymentPlan
    if _newclass:ProposePaymentPlan = staticmethod(_otapi.OTAPI_Wrap_ProposePaymentPlan)
    __swig_getmethods__["EasyProposePlan"] = lambda x: _otapi.OTAPI_Wrap_EasyProposePlan
    if _newclass:EasyProposePlan = staticmethod(_otapi.OTAPI_Wrap_EasyProposePlan)
    __swig_getmethods__["ConfirmPaymentPlan"] = lambda x: _otapi.OTAPI_Wrap_ConfirmPaymentPlan
    if _newclass:ConfirmPaymentPlan = staticmethod(_otapi.OTAPI_Wrap_ConfirmPaymentPlan)
    __swig_getmethods__["Create_SmartContract"] = lambda x: _otapi.OTAPI_Wrap_Create_SmartContract
    if _newclass:Create_SmartContract = staticmethod(_otapi.OTAPI_Wrap_Create_SmartContract)
    __swig_getmethods__["SmartContract_AddBylaw"] = lambda x: _otapi.OTAPI_Wrap_SmartContract_AddBylaw
    if _newclass:SmartContract_AddBylaw = staticmethod(_otapi.OTAPI_Wrap_SmartContract_AddBylaw)
    __swig_getmethods__["SmartContract_AddClause"] = lambda x: _otapi.OTAPI_Wrap_SmartContract_AddClause
    if _newclass:SmartContract_AddClause = staticmethod(_otapi.OTAPI_Wrap_SmartContract_AddClause)
    __swig_getmethods__["SmartContract_AddVariable"] = lambda x: _otapi.OTAPI_Wrap_SmartContract_AddVariable
    if _newclass:SmartContract_AddVariable = staticmethod(_otapi.OTAPI_Wrap_SmartContract_AddVariable)
    __swig_getmethods__["SmartContract_AddCallback"] = lambda x: _otapi.OTAPI_Wrap_SmartContract_AddCallback
    if _newclass:SmartContract_AddCallback = staticmethod(_otapi.OTAPI_Wrap_SmartContract_AddCallback)
    __swig_getmethods__["SmartContract_AddHook"] = lambda x: _otapi.OTAPI_Wrap_SmartContract_AddHook
    if _newclass:SmartContract_AddHook = staticmethod(_otapi.OTAPI_Wrap_SmartContract_AddHook)
    __swig_getmethods__["SmartContract_AddParty"] = lambda x: _otapi.OTAPI_Wrap_SmartContract_AddParty
    if _newclass:SmartContract_AddParty = staticmethod(_otapi.OTAPI_Wrap_SmartContract_AddParty)
    __swig_getmethods__["SmartContract_AddAccount"] = lambda x: _otapi.OTAPI_Wrap_SmartContract_AddAccount
    if _newclass:SmartContract_AddAccount = staticmethod(_otapi.OTAPI_Wrap_SmartContract_AddAccount)
    __swig_getmethods__["SmartContract_CountNumsNeeded"] = lambda x: _otapi.OTAPI_Wrap_SmartContract_CountNumsNeeded
    if _newclass:SmartContract_CountNumsNeeded = staticmethod(_otapi.OTAPI_Wrap_SmartContract_CountNumsNeeded)
    __swig_getmethods__["SmartContract_ConfirmAccount"] = lambda x: _otapi.OTAPI_Wrap_SmartContract_ConfirmAccount
    if _newclass:SmartContract_ConfirmAccount = staticmethod(_otapi.OTAPI_Wrap_SmartContract_ConfirmAccount)
    __swig_getmethods__["SmartContract_ConfirmParty"] = lambda x: _otapi.OTAPI_Wrap_SmartContract_ConfirmParty
    if _newclass:SmartContract_ConfirmParty = staticmethod(_otapi.OTAPI_Wrap_SmartContract_ConfirmParty)
    __swig_getmethods__["Smart_AreAllPartiesConfirmed"] = lambda x: _otapi.OTAPI_Wrap_Smart_AreAllPartiesConfirmed
    if _newclass:Smart_AreAllPartiesConfirmed = staticmethod(_otapi.OTAPI_Wrap_Smart_AreAllPartiesConfirmed)
    __swig_getmethods__["Smart_GetBylawCount"] = lambda x: _otapi.OTAPI_Wrap_Smart_GetBylawCount
    if _newclass:Smart_GetBylawCount = staticmethod(_otapi.OTAPI_Wrap_Smart_GetBylawCount)
    __swig_getmethods__["Smart_GetBylawByIndex"] = lambda x: _otapi.OTAPI_Wrap_Smart_GetBylawByIndex
    if _newclass:Smart_GetBylawByIndex = staticmethod(_otapi.OTAPI_Wrap_Smart_GetBylawByIndex)
    __swig_getmethods__["Bylaw_GetLanguage"] = lambda x: _otapi.OTAPI_Wrap_Bylaw_GetLanguage
    if _newclass:Bylaw_GetLanguage = staticmethod(_otapi.OTAPI_Wrap_Bylaw_GetLanguage)
    __swig_getmethods__["Bylaw_GetClauseCount"] = lambda x: _otapi.OTAPI_Wrap_Bylaw_GetClauseCount
    if _newclass:Bylaw_GetClauseCount = staticmethod(_otapi.OTAPI_Wrap_Bylaw_GetClauseCount)
    __swig_getmethods__["Clause_GetNameByIndex"] = lambda x: _otapi.OTAPI_Wrap_Clause_GetNameByIndex
    if _newclass:Clause_GetNameByIndex = staticmethod(_otapi.OTAPI_Wrap_Clause_GetNameByIndex)
    __swig_getmethods__["Clause_GetContents"] = lambda x: _otapi.OTAPI_Wrap_Clause_GetContents
    if _newclass:Clause_GetContents = staticmethod(_otapi.OTAPI_Wrap_Clause_GetContents)
    __swig_getmethods__["Bylaw_GetVariableCount"] = lambda x: _otapi.OTAPI_Wrap_Bylaw_GetVariableCount
    if _newclass:Bylaw_GetVariableCount = staticmethod(_otapi.OTAPI_Wrap_Bylaw_GetVariableCount)
    __swig_getmethods__["Variable_GetNameByIndex"] = lambda x: _otapi.OTAPI_Wrap_Variable_GetNameByIndex
    if _newclass:Variable_GetNameByIndex = staticmethod(_otapi.OTAPI_Wrap_Variable_GetNameByIndex)
    __swig_getmethods__["Variable_GetType"] = lambda x: _otapi.OTAPI_Wrap_Variable_GetType
    if _newclass:Variable_GetType = staticmethod(_otapi.OTAPI_Wrap_Variable_GetType)
    __swig_getmethods__["Variable_GetAccess"] = lambda x: _otapi.OTAPI_Wrap_Variable_GetAccess
    if _newclass:Variable_GetAccess = staticmethod(_otapi.OTAPI_Wrap_Variable_GetAccess)
    __swig_getmethods__["Variable_GetContents"] = lambda x: _otapi.OTAPI_Wrap_Variable_GetContents
    if _newclass:Variable_GetContents = staticmethod(_otapi.OTAPI_Wrap_Variable_GetContents)
    __swig_getmethods__["Bylaw_GetHookCount"] = lambda x: _otapi.OTAPI_Wrap_Bylaw_GetHookCount
    if _newclass:Bylaw_GetHookCount = staticmethod(_otapi.OTAPI_Wrap_Bylaw_GetHookCount)
    __swig_getmethods__["Hook_GetNameByIndex"] = lambda x: _otapi.OTAPI_Wrap_Hook_GetNameByIndex
    if _newclass:Hook_GetNameByIndex = staticmethod(_otapi.OTAPI_Wrap_Hook_GetNameByIndex)
    __swig_getmethods__["Hook_GetClauseCount"] = lambda x: _otapi.OTAPI_Wrap_Hook_GetClauseCount
    if _newclass:Hook_GetClauseCount = staticmethod(_otapi.OTAPI_Wrap_Hook_GetClauseCount)
    __swig_getmethods__["Hook_GetClauseAtIndex"] = lambda x: _otapi.OTAPI_Wrap_Hook_GetClauseAtIndex
    if _newclass:Hook_GetClauseAtIndex = staticmethod(_otapi.OTAPI_Wrap_Hook_GetClauseAtIndex)
    __swig_getmethods__["Bylaw_GetCallbackCount"] = lambda x: _otapi.OTAPI_Wrap_Bylaw_GetCallbackCount
    if _newclass:Bylaw_GetCallbackCount = staticmethod(_otapi.OTAPI_Wrap_Bylaw_GetCallbackCount)
    __swig_getmethods__["Callback_GetNameByIndex"] = lambda x: _otapi.OTAPI_Wrap_Callback_GetNameByIndex
    if _newclass:Callback_GetNameByIndex = staticmethod(_otapi.OTAPI_Wrap_Callback_GetNameByIndex)
    __swig_getmethods__["Callback_GetClause"] = lambda x: _otapi.OTAPI_Wrap_Callback_GetClause
    if _newclass:Callback_GetClause = staticmethod(_otapi.OTAPI_Wrap_Callback_GetClause)
    __swig_getmethods__["Smart_GetPartyCount"] = lambda x: _otapi.OTAPI_Wrap_Smart_GetPartyCount
    if _newclass:Smart_GetPartyCount = staticmethod(_otapi.OTAPI_Wrap_Smart_GetPartyCount)
    __swig_getmethods__["Smart_GetPartyByIndex"] = lambda x: _otapi.OTAPI_Wrap_Smart_GetPartyByIndex
    if _newclass:Smart_GetPartyByIndex = staticmethod(_otapi.OTAPI_Wrap_Smart_GetPartyByIndex)
    __swig_getmethods__["Smart_IsPartyConfirmed"] = lambda x: _otapi.OTAPI_Wrap_Smart_IsPartyConfirmed
    if _newclass:Smart_IsPartyConfirmed = staticmethod(_otapi.OTAPI_Wrap_Smart_IsPartyConfirmed)
    __swig_getmethods__["Party_GetID"] = lambda x: _otapi.OTAPI_Wrap_Party_GetID
    if _newclass:Party_GetID = staticmethod(_otapi.OTAPI_Wrap_Party_GetID)
    __swig_getmethods__["Party_GetAcctCount"] = lambda x: _otapi.OTAPI_Wrap_Party_GetAcctCount
    if _newclass:Party_GetAcctCount = staticmethod(_otapi.OTAPI_Wrap_Party_GetAcctCount)
    __swig_getmethods__["Party_GetAcctNameByIndex"] = lambda x: _otapi.OTAPI_Wrap_Party_GetAcctNameByIndex
    if _newclass:Party_GetAcctNameByIndex = staticmethod(_otapi.OTAPI_Wrap_Party_GetAcctNameByIndex)
    __swig_getmethods__["Party_GetAcctID"] = lambda x: _otapi.OTAPI_Wrap_Party_GetAcctID
    if _newclass:Party_GetAcctID = staticmethod(_otapi.OTAPI_Wrap_Party_GetAcctID)
    __swig_getmethods__["Party_GetAcctAssetID"] = lambda x: _otapi.OTAPI_Wrap_Party_GetAcctAssetID
    if _newclass:Party_GetAcctAssetID = staticmethod(_otapi.OTAPI_Wrap_Party_GetAcctAssetID)
    __swig_getmethods__["Party_GetAcctAgentName"] = lambda x: _otapi.OTAPI_Wrap_Party_GetAcctAgentName
    if _newclass:Party_GetAcctAgentName = staticmethod(_otapi.OTAPI_Wrap_Party_GetAcctAgentName)
    __swig_getmethods__["Party_GetAgentCount"] = lambda x: _otapi.OTAPI_Wrap_Party_GetAgentCount
    if _newclass:Party_GetAgentCount = staticmethod(_otapi.OTAPI_Wrap_Party_GetAgentCount)
    __swig_getmethods__["Party_GetAgentNameByIndex"] = lambda x: _otapi.OTAPI_Wrap_Party_GetAgentNameByIndex
    if _newclass:Party_GetAgentNameByIndex = staticmethod(_otapi.OTAPI_Wrap_Party_GetAgentNameByIndex)
    __swig_getmethods__["Party_GetAgentID"] = lambda x: _otapi.OTAPI_Wrap_Party_GetAgentID
    if _newclass:Party_GetAgentID = staticmethod(_otapi.OTAPI_Wrap_Party_GetAgentID)
    __swig_getmethods__["activateSmartContract"] = lambda x: _otapi.OTAPI_Wrap_activateSmartContract
    if _newclass:activateSmartContract = staticmethod(_otapi.OTAPI_Wrap_activateSmartContract)
    __swig_getmethods__["triggerClause"] = lambda x: _otapi.OTAPI_Wrap_triggerClause
    if _newclass:triggerClause = staticmethod(_otapi.OTAPI_Wrap_triggerClause)
    __swig_getmethods__["Msg_HarvestTransactionNumbers"] = lambda x: _otapi.OTAPI_Wrap_Msg_HarvestTransactionNumbers
    if _newclass:Msg_HarvestTransactionNumbers = staticmethod(_otapi.OTAPI_Wrap_Msg_HarvestTransactionNumbers)
    __swig_getmethods__["LoadUserPubkey_Encryption"] = lambda x: _otapi.OTAPI_Wrap_LoadUserPubkey_Encryption
    if _newclass:LoadUserPubkey_Encryption = staticmethod(_otapi.OTAPI_Wrap_LoadUserPubkey_Encryption)
    __swig_getmethods__["LoadUserPubkey_Signing"] = lambda x: _otapi.OTAPI_Wrap_LoadUserPubkey_Signing
    if _newclass:LoadUserPubkey_Signing = staticmethod(_otapi.OTAPI_Wrap_LoadUserPubkey_Signing)
    __swig_getmethods__["LoadPubkey_Encryption"] = lambda x: _otapi.OTAPI_Wrap_LoadPubkey_Encryption
    if _newclass:LoadPubkey_Encryption = staticmethod(_otapi.OTAPI_Wrap_LoadPubkey_Encryption)
    __swig_getmethods__["LoadPubkey_Signing"] = lambda x: _otapi.OTAPI_Wrap_LoadPubkey_Signing
    if _newclass:LoadPubkey_Signing = staticmethod(_otapi.OTAPI_Wrap_LoadPubkey_Signing)
    __swig_getmethods__["VerifyUserPrivateKey"] = lambda x: _otapi.OTAPI_Wrap_VerifyUserPrivateKey
    if _newclass:VerifyUserPrivateKey = staticmethod(_otapi.OTAPI_Wrap_VerifyUserPrivateKey)
    __swig_getmethods__["LoadPurse"] = lambda x: _otapi.OTAPI_Wrap_LoadPurse
    if _newclass:LoadPurse = staticmethod(_otapi.OTAPI_Wrap_LoadPurse)
    __swig_getmethods__["LoadMint"] = lambda x: _otapi.OTAPI_Wrap_LoadMint
    if _newclass:LoadMint = staticmethod(_otapi.OTAPI_Wrap_LoadMint)
    __swig_getmethods__["LoadAssetContract"] = lambda x: _otapi.OTAPI_Wrap_LoadAssetContract
    if _newclass:LoadAssetContract = staticmethod(_otapi.OTAPI_Wrap_LoadAssetContract)
    __swig_getmethods__["LoadServerContract"] = lambda x: _otapi.OTAPI_Wrap_LoadServerContract
    if _newclass:LoadServerContract = staticmethod(_otapi.OTAPI_Wrap_LoadServerContract)
    __swig_getmethods__["Mint_IsStillGood"] = lambda x: _otapi.OTAPI_Wrap_Mint_IsStillGood
    if _newclass:Mint_IsStillGood = staticmethod(_otapi.OTAPI_Wrap_Mint_IsStillGood)
    __swig_getmethods__["IsBasketCurrency"] = lambda x: _otapi.OTAPI_Wrap_IsBasketCurrency
    if _newclass:IsBasketCurrency = staticmethod(_otapi.OTAPI_Wrap_IsBasketCurrency)
    __swig_getmethods__["Basket_GetMemberCount"] = lambda x: _otapi.OTAPI_Wrap_Basket_GetMemberCount
    if _newclass:Basket_GetMemberCount = staticmethod(_otapi.OTAPI_Wrap_Basket_GetMemberCount)
    __swig_getmethods__["Basket_GetMemberType"] = lambda x: _otapi.OTAPI_Wrap_Basket_GetMemberType
    if _newclass:Basket_GetMemberType = staticmethod(_otapi.OTAPI_Wrap_Basket_GetMemberType)
    __swig_getmethods__["Basket_GetMinimumTransferAmount"] = lambda x: _otapi.OTAPI_Wrap_Basket_GetMinimumTransferAmount
    if _newclass:Basket_GetMinimumTransferAmount = staticmethod(_otapi.OTAPI_Wrap_Basket_GetMinimumTransferAmount)
    __swig_getmethods__["Basket_GetMemberMinimumTransferAmount"] = lambda x: _otapi.OTAPI_Wrap_Basket_GetMemberMinimumTransferAmount
    if _newclass:Basket_GetMemberMinimumTransferAmount = staticmethod(_otapi.OTAPI_Wrap_Basket_GetMemberMinimumTransferAmount)
    __swig_getmethods__["LoadAssetAccount"] = lambda x: _otapi.OTAPI_Wrap_LoadAssetAccount
    if _newclass:LoadAssetAccount = staticmethod(_otapi.OTAPI_Wrap_LoadAssetAccount)
    __swig_getmethods__["LoadInbox"] = lambda x: _otapi.OTAPI_Wrap_LoadInbox
    if _newclass:LoadInbox = staticmethod(_otapi.OTAPI_Wrap_LoadInbox)
    __swig_getmethods__["LoadOutbox"] = lambda x: _otapi.OTAPI_Wrap_LoadOutbox
    if _newclass:LoadOutbox = staticmethod(_otapi.OTAPI_Wrap_LoadOutbox)
    __swig_getmethods__["LoadInboxNoVerify"] = lambda x: _otapi.OTAPI_Wrap_LoadInboxNoVerify
    if _newclass:LoadInboxNoVerify = staticmethod(_otapi.OTAPI_Wrap_LoadInboxNoVerify)
    __swig_getmethods__["LoadOutboxNoVerify"] = lambda x: _otapi.OTAPI_Wrap_LoadOutboxNoVerify
    if _newclass:LoadOutboxNoVerify = staticmethod(_otapi.OTAPI_Wrap_LoadOutboxNoVerify)
    __swig_getmethods__["LoadPaymentInbox"] = lambda x: _otapi.OTAPI_Wrap_LoadPaymentInbox
    if _newclass:LoadPaymentInbox = staticmethod(_otapi.OTAPI_Wrap_LoadPaymentInbox)
    __swig_getmethods__["LoadPaymentInboxNoVerify"] = lambda x: _otapi.OTAPI_Wrap_LoadPaymentInboxNoVerify
    if _newclass:LoadPaymentInboxNoVerify = staticmethod(_otapi.OTAPI_Wrap_LoadPaymentInboxNoVerify)
    __swig_getmethods__["LoadRecordBox"] = lambda x: _otapi.OTAPI_Wrap_LoadRecordBox
    if _newclass:LoadRecordBox = staticmethod(_otapi.OTAPI_Wrap_LoadRecordBox)
    __swig_getmethods__["LoadRecordBoxNoVerify"] = lambda x: _otapi.OTAPI_Wrap_LoadRecordBoxNoVerify
    if _newclass:LoadRecordBoxNoVerify = staticmethod(_otapi.OTAPI_Wrap_LoadRecordBoxNoVerify)
    __swig_getmethods__["ClearRecord"] = lambda x: _otapi.OTAPI_Wrap_ClearRecord
    if _newclass:ClearRecord = staticmethod(_otapi.OTAPI_Wrap_ClearRecord)
    __swig_getmethods__["LoadExpiredBox"] = lambda x: _otapi.OTAPI_Wrap_LoadExpiredBox
    if _newclass:LoadExpiredBox = staticmethod(_otapi.OTAPI_Wrap_LoadExpiredBox)
    __swig_getmethods__["LoadExpiredBoxNoVerify"] = lambda x: _otapi.OTAPI_Wrap_LoadExpiredBoxNoVerify
    if _newclass:LoadExpiredBoxNoVerify = staticmethod(_otapi.OTAPI_Wrap_LoadExpiredBoxNoVerify)
    __swig_getmethods__["ClearExpired"] = lambda x: _otapi.OTAPI_Wrap_ClearExpired
    if _newclass:ClearExpired = staticmethod(_otapi.OTAPI_Wrap_ClearExpired)
    __swig_getmethods__["Ledger_GetCount"] = lambda x: _otapi.OTAPI_Wrap_Ledger_GetCount
    if _newclass:Ledger_GetCount = staticmethod(_otapi.OTAPI_Wrap_Ledger_GetCount)
    __swig_getmethods__["Ledger_CreateResponse"] = lambda x: _otapi.OTAPI_Wrap_Ledger_CreateResponse
    if _newclass:Ledger_CreateResponse = staticmethod(_otapi.OTAPI_Wrap_Ledger_CreateResponse)
    __swig_getmethods__["Ledger_GetTransactionByIndex"] = lambda x: _otapi.OTAPI_Wrap_Ledger_GetTransactionByIndex
    if _newclass:Ledger_GetTransactionByIndex = staticmethod(_otapi.OTAPI_Wrap_Ledger_GetTransactionByIndex)
    __swig_getmethods__["Ledger_GetTransactionByID"] = lambda x: _otapi.OTAPI_Wrap_Ledger_GetTransactionByID
    if _newclass:Ledger_GetTransactionByID = staticmethod(_otapi.OTAPI_Wrap_Ledger_GetTransactionByID)
    __swig_getmethods__["Ledger_GetTransactionIDByIndex"] = lambda x: _otapi.OTAPI_Wrap_Ledger_GetTransactionIDByIndex
    if _newclass:Ledger_GetTransactionIDByIndex = staticmethod(_otapi.OTAPI_Wrap_Ledger_GetTransactionIDByIndex)
    __swig_getmethods__["Ledger_AddTransaction"] = lambda x: _otapi.OTAPI_Wrap_Ledger_AddTransaction
    if _newclass:Ledger_AddTransaction = staticmethod(_otapi.OTAPI_Wrap_Ledger_AddTransaction)
    __swig_getmethods__["Transaction_CreateResponse"] = lambda x: _otapi.OTAPI_Wrap_Transaction_CreateResponse
    if _newclass:Transaction_CreateResponse = staticmethod(_otapi.OTAPI_Wrap_Transaction_CreateResponse)
    __swig_getmethods__["Ledger_FinalizeResponse"] = lambda x: _otapi.OTAPI_Wrap_Ledger_FinalizeResponse
    if _newclass:Ledger_FinalizeResponse = staticmethod(_otapi.OTAPI_Wrap_Ledger_FinalizeResponse)
    __swig_getmethods__["Ledger_GetInstrument"] = lambda x: _otapi.OTAPI_Wrap_Ledger_GetInstrument
    if _newclass:Ledger_GetInstrument = staticmethod(_otapi.OTAPI_Wrap_Ledger_GetInstrument)
    __swig_getmethods__["RecordPayment"] = lambda x: _otapi.OTAPI_Wrap_RecordPayment
    if _newclass:RecordPayment = staticmethod(_otapi.OTAPI_Wrap_RecordPayment)
    __swig_getmethods__["Transaction_GetType"] = lambda x: _otapi.OTAPI_Wrap_Transaction_GetType
    if _newclass:Transaction_GetType = staticmethod(_otapi.OTAPI_Wrap_Transaction_GetType)
    __swig_getmethods__["ReplyNotice_GetRequestNum"] = lambda x: _otapi.OTAPI_Wrap_ReplyNotice_GetRequestNum
    if _newclass:ReplyNotice_GetRequestNum = staticmethod(_otapi.OTAPI_Wrap_ReplyNotice_GetRequestNum)
    __swig_getmethods__["Transaction_GetVoucher"] = lambda x: _otapi.OTAPI_Wrap_Transaction_GetVoucher
    if _newclass:Transaction_GetVoucher = staticmethod(_otapi.OTAPI_Wrap_Transaction_GetVoucher)
    __swig_getmethods__["Transaction_GetSuccess"] = lambda x: _otapi.OTAPI_Wrap_Transaction_GetSuccess
    if _newclass:Transaction_GetSuccess = staticmethod(_otapi.OTAPI_Wrap_Transaction_GetSuccess)
    __swig_getmethods__["Transaction_IsCanceled"] = lambda x: _otapi.OTAPI_Wrap_Transaction_IsCanceled
    if _newclass:Transaction_IsCanceled = staticmethod(_otapi.OTAPI_Wrap_Transaction_IsCanceled)
    __swig_getmethods__["Transaction_GetBalanceAgreementSuccess"] = lambda x: _otapi.OTAPI_Wrap_Transaction_GetBalanceAgreementSuccess
    if _newclass:Transaction_GetBalanceAgreementSuccess = staticmethod(_otapi.OTAPI_Wrap_Transaction_GetBalanceAgreementSuccess)
    __swig_getmethods__["Transaction_GetDateSigned"] = lambda x: _otapi.OTAPI_Wrap_Transaction_GetDateSigned
    if _newclass:Transaction_GetDateSigned = staticmethod(_otapi.OTAPI_Wrap_Transaction_GetDateSigned)
    __swig_getmethods__["Transaction_GetAmount"] = lambda x: _otapi.OTAPI_Wrap_Transaction_GetAmount
    if _newclass:Transaction_GetAmount = staticmethod(_otapi.OTAPI_Wrap_Transaction_GetAmount)
    __swig_getmethods__["Pending_GetNote"] = lambda x: _otapi.OTAPI_Wrap_Pending_GetNote
    if _newclass:Pending_GetNote = staticmethod(_otapi.OTAPI_Wrap_Pending_GetNote)
    __swig_getmethods__["Transaction_GetSenderUserID"] = lambda x: _otapi.OTAPI_Wrap_Transaction_GetSenderUserID
    if _newclass:Transaction_GetSenderUserID = staticmethod(_otapi.OTAPI_Wrap_Transaction_GetSenderUserID)
    __swig_getmethods__["Transaction_GetSenderAcctID"] = lambda x: _otapi.OTAPI_Wrap_Transaction_GetSenderAcctID
    if _newclass:Transaction_GetSenderAcctID = staticmethod(_otapi.OTAPI_Wrap_Transaction_GetSenderAcctID)
    __swig_getmethods__["Transaction_GetRecipientUserID"] = lambda x: _otapi.OTAPI_Wrap_Transaction_GetRecipientUserID
    if _newclass:Transaction_GetRecipientUserID = staticmethod(_otapi.OTAPI_Wrap_Transaction_GetRecipientUserID)
    __swig_getmethods__["Transaction_GetRecipientAcctID"] = lambda x: _otapi.OTAPI_Wrap_Transaction_GetRecipientAcctID
    if _newclass:Transaction_GetRecipientAcctID = staticmethod(_otapi.OTAPI_Wrap_Transaction_GetRecipientAcctID)
    __swig_getmethods__["Transaction_GetDisplayReferenceToNum"] = lambda x: _otapi.OTAPI_Wrap_Transaction_GetDisplayReferenceToNum
    if _newclass:Transaction_GetDisplayReferenceToNum = staticmethod(_otapi.OTAPI_Wrap_Transaction_GetDisplayReferenceToNum)
    __swig_getmethods__["SavePurse"] = lambda x: _otapi.OTAPI_Wrap_SavePurse
    if _newclass:SavePurse = staticmethod(_otapi.OTAPI_Wrap_SavePurse)
    __swig_getmethods__["CreatePurse"] = lambda x: _otapi.OTAPI_Wrap_CreatePurse
    if _newclass:CreatePurse = staticmethod(_otapi.OTAPI_Wrap_CreatePurse)
    __swig_getmethods__["CreatePurse_Passphrase"] = lambda x: _otapi.OTAPI_Wrap_CreatePurse_Passphrase
    if _newclass:CreatePurse_Passphrase = staticmethod(_otapi.OTAPI_Wrap_CreatePurse_Passphrase)
    __swig_getmethods__["Purse_GetTotalValue"] = lambda x: _otapi.OTAPI_Wrap_Purse_GetTotalValue
    if _newclass:Purse_GetTotalValue = staticmethod(_otapi.OTAPI_Wrap_Purse_GetTotalValue)
    __swig_getmethods__["Purse_Count"] = lambda x: _otapi.OTAPI_Wrap_Purse_Count
    if _newclass:Purse_Count = staticmethod(_otapi.OTAPI_Wrap_Purse_Count)
    __swig_getmethods__["Purse_HasPassword"] = lambda x: _otapi.OTAPI_Wrap_Purse_HasPassword
    if _newclass:Purse_HasPassword = staticmethod(_otapi.OTAPI_Wrap_Purse_HasPassword)
    __swig_getmethods__["Purse_Peek"] = lambda x: _otapi.OTAPI_Wrap_Purse_Peek
    if _newclass:Purse_Peek = staticmethod(_otapi.OTAPI_Wrap_Purse_Peek)
    __swig_getmethods__["Purse_Pop"] = lambda x: _otapi.OTAPI_Wrap_Purse_Pop
    if _newclass:Purse_Pop = staticmethod(_otapi.OTAPI_Wrap_Purse_Pop)
    __swig_getmethods__["Purse_Push"] = lambda x: _otapi.OTAPI_Wrap_Purse_Push
    if _newclass:Purse_Push = staticmethod(_otapi.OTAPI_Wrap_Purse_Push)
    __swig_getmethods__["Purse_Empty"] = lambda x: _otapi.OTAPI_Wrap_Purse_Empty
    if _newclass:Purse_Empty = staticmethod(_otapi.OTAPI_Wrap_Purse_Empty)
    __swig_getmethods__["Wallet_ImportPurse"] = lambda x: _otapi.OTAPI_Wrap_Wallet_ImportPurse
    if _newclass:Wallet_ImportPurse = staticmethod(_otapi.OTAPI_Wrap_Wallet_ImportPurse)
    __swig_getmethods__["exchangePurse"] = lambda x: _otapi.OTAPI_Wrap_exchangePurse
    if _newclass:exchangePurse = staticmethod(_otapi.OTAPI_Wrap_exchangePurse)
    __swig_getmethods__["Token_ChangeOwner"] = lambda x: _otapi.OTAPI_Wrap_Token_ChangeOwner
    if _newclass:Token_ChangeOwner = staticmethod(_otapi.OTAPI_Wrap_Token_ChangeOwner)
    __swig_getmethods__["Token_GetID"] = lambda x: _otapi.OTAPI_Wrap_Token_GetID
    if _newclass:Token_GetID = staticmethod(_otapi.OTAPI_Wrap_Token_GetID)
    __swig_getmethods__["Token_GetDenomination"] = lambda x: _otapi.OTAPI_Wrap_Token_GetDenomination
    if _newclass:Token_GetDenomination = staticmethod(_otapi.OTAPI_Wrap_Token_GetDenomination)
    __swig_getmethods__["Token_GetSeries"] = lambda x: _otapi.OTAPI_Wrap_Token_GetSeries
    if _newclass:Token_GetSeries = staticmethod(_otapi.OTAPI_Wrap_Token_GetSeries)
    __swig_getmethods__["Token_GetValidFrom"] = lambda x: _otapi.OTAPI_Wrap_Token_GetValidFrom
    if _newclass:Token_GetValidFrom = staticmethod(_otapi.OTAPI_Wrap_Token_GetValidFrom)
    __swig_getmethods__["Token_GetValidTo"] = lambda x: _otapi.OTAPI_Wrap_Token_GetValidTo
    if _newclass:Token_GetValidTo = staticmethod(_otapi.OTAPI_Wrap_Token_GetValidTo)
    __swig_getmethods__["Token_GetAssetID"] = lambda x: _otapi.OTAPI_Wrap_Token_GetAssetID
    if _newclass:Token_GetAssetID = staticmethod(_otapi.OTAPI_Wrap_Token_GetAssetID)
    __swig_getmethods__["Token_GetServerID"] = lambda x: _otapi.OTAPI_Wrap_Token_GetServerID
    if _newclass:Token_GetServerID = staticmethod(_otapi.OTAPI_Wrap_Token_GetServerID)
    __swig_getmethods__["Instrmnt_GetAmount"] = lambda x: _otapi.OTAPI_Wrap_Instrmnt_GetAmount
    if _newclass:Instrmnt_GetAmount = staticmethod(_otapi.OTAPI_Wrap_Instrmnt_GetAmount)
    __swig_getmethods__["Instrmnt_GetTransNum"] = lambda x: _otapi.OTAPI_Wrap_Instrmnt_GetTransNum
    if _newclass:Instrmnt_GetTransNum = staticmethod(_otapi.OTAPI_Wrap_Instrmnt_GetTransNum)
    __swig_getmethods__["Instrmnt_GetValidFrom"] = lambda x: _otapi.OTAPI_Wrap_Instrmnt_GetValidFrom
    if _newclass:Instrmnt_GetValidFrom = staticmethod(_otapi.OTAPI_Wrap_Instrmnt_GetValidFrom)
    __swig_getmethods__["Instrmnt_GetValidTo"] = lambda x: _otapi.OTAPI_Wrap_Instrmnt_GetValidTo
    if _newclass:Instrmnt_GetValidTo = staticmethod(_otapi.OTAPI_Wrap_Instrmnt_GetValidTo)
    __swig_getmethods__["Instrmnt_GetMemo"] = lambda x: _otapi.OTAPI_Wrap_Instrmnt_GetMemo
    if _newclass:Instrmnt_GetMemo = staticmethod(_otapi.OTAPI_Wrap_Instrmnt_GetMemo)
    __swig_getmethods__["Instrmnt_GetType"] = lambda x: _otapi.OTAPI_Wrap_Instrmnt_GetType
    if _newclass:Instrmnt_GetType = staticmethod(_otapi.OTAPI_Wrap_Instrmnt_GetType)
    __swig_getmethods__["Instrmnt_GetServerID"] = lambda x: _otapi.OTAPI_Wrap_Instrmnt_GetServerID
    if _newclass:Instrmnt_GetServerID = staticmethod(_otapi.OTAPI_Wrap_Instrmnt_GetServerID)
    __swig_getmethods__["Instrmnt_GetAssetID"] = lambda x: _otapi.OTAPI_Wrap_Instrmnt_GetAssetID
    if _newclass:Instrmnt_GetAssetID = staticmethod(_otapi.OTAPI_Wrap_Instrmnt_GetAssetID)
    __swig_getmethods__["Instrmnt_GetSenderUserID"] = lambda x: _otapi.OTAPI_Wrap_Instrmnt_GetSenderUserID
    if _newclass:Instrmnt_GetSenderUserID = staticmethod(_otapi.OTAPI_Wrap_Instrmnt_GetSenderUserID)
    __swig_getmethods__["Instrmnt_GetSenderAcctID"] = lambda x: _otapi.OTAPI_Wrap_Instrmnt_GetSenderAcctID
    if _newclass:Instrmnt_GetSenderAcctID = staticmethod(_otapi.OTAPI_Wrap_Instrmnt_GetSenderAcctID)
    __swig_getmethods__["Instrmnt_GetRemitterUserID"] = lambda x: _otapi.OTAPI_Wrap_Instrmnt_GetRemitterUserID
    if _newclass:Instrmnt_GetRemitterUserID = staticmethod(_otapi.OTAPI_Wrap_Instrmnt_GetRemitterUserID)
    __swig_getmethods__["Instrmnt_GetRemitterAcctID"] = lambda x: _otapi.OTAPI_Wrap_Instrmnt_GetRemitterAcctID
    if _newclass:Instrmnt_GetRemitterAcctID = staticmethod(_otapi.OTAPI_Wrap_Instrmnt_GetRemitterAcctID)
    __swig_getmethods__["Instrmnt_GetRecipientUserID"] = lambda x: _otapi.OTAPI_Wrap_Instrmnt_GetRecipientUserID
    if _newclass:Instrmnt_GetRecipientUserID = staticmethod(_otapi.OTAPI_Wrap_Instrmnt_GetRecipientUserID)
    __swig_getmethods__["Instrmnt_GetRecipientAcctID"] = lambda x: _otapi.OTAPI_Wrap_Instrmnt_GetRecipientAcctID
    if _newclass:Instrmnt_GetRecipientAcctID = staticmethod(_otapi.OTAPI_Wrap_Instrmnt_GetRecipientAcctID)
    __swig_getmethods__["checkServerID"] = lambda x: _otapi.OTAPI_Wrap_checkServerID
    if _newclass:checkServerID = staticmethod(_otapi.OTAPI_Wrap_checkServerID)
    __swig_getmethods__["createUserAccount"] = lambda x: _otapi.OTAPI_Wrap_createUserAccount
    if _newclass:createUserAccount = staticmethod(_otapi.OTAPI_Wrap_createUserAccount)
    __swig_getmethods__["deleteUserAccount"] = lambda x: _otapi.OTAPI_Wrap_deleteUserAccount
    if _newclass:deleteUserAccount = staticmethod(_otapi.OTAPI_Wrap_deleteUserAccount)
    __swig_getmethods__["deleteAssetAccount"] = lambda x: _otapi.OTAPI_Wrap_deleteAssetAccount
    if _newclass:deleteAssetAccount = staticmethod(_otapi.OTAPI_Wrap_deleteAssetAccount)
    __swig_getmethods__["usageCredits"] = lambda x: _otapi.OTAPI_Wrap_usageCredits
    if _newclass:usageCredits = staticmethod(_otapi.OTAPI_Wrap_usageCredits)
    __swig_getmethods__["Message_GetUsageCredits"] = lambda x: _otapi.OTAPI_Wrap_Message_GetUsageCredits
    if _newclass:Message_GetUsageCredits = staticmethod(_otapi.OTAPI_Wrap_Message_GetUsageCredits)
    __swig_getmethods__["checkUser"] = lambda x: _otapi.OTAPI_Wrap_checkUser
    if _newclass:checkUser = staticmethod(_otapi.OTAPI_Wrap_checkUser)
    __swig_getmethods__["sendUserMessage"] = lambda x: _otapi.OTAPI_Wrap_sendUserMessage
    if _newclass:sendUserMessage = staticmethod(_otapi.OTAPI_Wrap_sendUserMessage)
    __swig_getmethods__["sendUserInstrument"] = lambda x: _otapi.OTAPI_Wrap_sendUserInstrument
    if _newclass:sendUserInstrument = staticmethod(_otapi.OTAPI_Wrap_sendUserInstrument)
    __swig_getmethods__["getRequest"] = lambda x: _otapi.OTAPI_Wrap_getRequest
    if _newclass:getRequest = staticmethod(_otapi.OTAPI_Wrap_getRequest)
    __swig_getmethods__["getTransactionNumber"] = lambda x: _otapi.OTAPI_Wrap_getTransactionNumber
    if _newclass:getTransactionNumber = staticmethod(_otapi.OTAPI_Wrap_getTransactionNumber)
    __swig_getmethods__["issueAssetType"] = lambda x: _otapi.OTAPI_Wrap_issueAssetType
    if _newclass:issueAssetType = staticmethod(_otapi.OTAPI_Wrap_issueAssetType)
    __swig_getmethods__["getContract"] = lambda x: _otapi.OTAPI_Wrap_getContract
    if _newclass:getContract = staticmethod(_otapi.OTAPI_Wrap_getContract)
    __swig_getmethods__["getMint"] = lambda x: _otapi.OTAPI_Wrap_getMint
    if _newclass:getMint = staticmethod(_otapi.OTAPI_Wrap_getMint)
    __swig_getmethods__["createAssetAccount"] = lambda x: _otapi.OTAPI_Wrap_createAssetAccount
    if _newclass:createAssetAccount = staticmethod(_otapi.OTAPI_Wrap_createAssetAccount)
    __swig_getmethods__["getAccount"] = lambda x: _otapi.OTAPI_Wrap_getAccount
    if _newclass:getAccount = staticmethod(_otapi.OTAPI_Wrap_getAccount)
    __swig_getmethods__["getAccountFiles"] = lambda x: _otapi.OTAPI_Wrap_getAccountFiles
    if _newclass:getAccountFiles = staticmethod(_otapi.OTAPI_Wrap_getAccountFiles)
    __swig_getmethods__["GenerateBasketCreation"] = lambda x: _otapi.OTAPI_Wrap_GenerateBasketCreation
    if _newclass:GenerateBasketCreation = staticmethod(_otapi.OTAPI_Wrap_GenerateBasketCreation)
    __swig_getmethods__["AddBasketCreationItem"] = lambda x: _otapi.OTAPI_Wrap_AddBasketCreationItem
    if _newclass:AddBasketCreationItem = staticmethod(_otapi.OTAPI_Wrap_AddBasketCreationItem)
    __swig_getmethods__["issueBasket"] = lambda x: _otapi.OTAPI_Wrap_issueBasket
    if _newclass:issueBasket = staticmethod(_otapi.OTAPI_Wrap_issueBasket)
    __swig_getmethods__["GenerateBasketExchange"] = lambda x: _otapi.OTAPI_Wrap_GenerateBasketExchange
    if _newclass:GenerateBasketExchange = staticmethod(_otapi.OTAPI_Wrap_GenerateBasketExchange)
    __swig_getmethods__["AddBasketExchangeItem"] = lambda x: _otapi.OTAPI_Wrap_AddBasketExchangeItem
    if _newclass:AddBasketExchangeItem = staticmethod(_otapi.OTAPI_Wrap_AddBasketExchangeItem)
    __swig_getmethods__["exchangeBasket"] = lambda x: _otapi.OTAPI_Wrap_exchangeBasket
    if _newclass:exchangeBasket = staticmethod(_otapi.OTAPI_Wrap_exchangeBasket)
    __swig_getmethods__["notarizeWithdrawal"] = lambda x: _otapi.OTAPI_Wrap_notarizeWithdrawal
    if _newclass:notarizeWithdrawal = staticmethod(_otapi.OTAPI_Wrap_notarizeWithdrawal)
    __swig_getmethods__["notarizeDeposit"] = lambda x: _otapi.OTAPI_Wrap_notarizeDeposit
    if _newclass:notarizeDeposit = staticmethod(_otapi.OTAPI_Wrap_notarizeDeposit)
    __swig_getmethods__["notarizeTransfer"] = lambda x: _otapi.OTAPI_Wrap_notarizeTransfer
    if _newclass:notarizeTransfer = staticmethod(_otapi.OTAPI_Wrap_notarizeTransfer)
    __swig_getmethods__["getInbox"] = lambda x: _otapi.OTAPI_Wrap_getInbox
    if _newclass:getInbox = staticmethod(_otapi.OTAPI_Wrap_getInbox)
    __swig_getmethods__["getOutbox"] = lambda x: _otapi.OTAPI_Wrap_getOutbox
    if _newclass:getOutbox = staticmethod(_otapi.OTAPI_Wrap_getOutbox)
    __swig_getmethods__["getNymbox"] = lambda x: _otapi.OTAPI_Wrap_getNymbox
    if _newclass:getNymbox = staticmethod(_otapi.OTAPI_Wrap_getNymbox)
    __swig_getmethods__["LoadNymbox"] = lambda x: _otapi.OTAPI_Wrap_LoadNymbox
    if _newclass:LoadNymbox = staticmethod(_otapi.OTAPI_Wrap_LoadNymbox)
    __swig_getmethods__["LoadNymboxNoVerify"] = lambda x: _otapi.OTAPI_Wrap_LoadNymboxNoVerify
    if _newclass:LoadNymboxNoVerify = staticmethod(_otapi.OTAPI_Wrap_LoadNymboxNoVerify)
    __swig_getmethods__["Nymbox_GetReplyNotice"] = lambda x: _otapi.OTAPI_Wrap_Nymbox_GetReplyNotice
    if _newclass:Nymbox_GetReplyNotice = staticmethod(_otapi.OTAPI_Wrap_Nymbox_GetReplyNotice)
    __swig_getmethods__["HaveAlreadySeenReply"] = lambda x: _otapi.OTAPI_Wrap_HaveAlreadySeenReply
    if _newclass:HaveAlreadySeenReply = staticmethod(_otapi.OTAPI_Wrap_HaveAlreadySeenReply)
    __swig_getmethods__["getBoxReceipt"] = lambda x: _otapi.OTAPI_Wrap_getBoxReceipt
    if _newclass:getBoxReceipt = staticmethod(_otapi.OTAPI_Wrap_getBoxReceipt)
    __swig_getmethods__["DoesBoxReceiptExist"] = lambda x: _otapi.OTAPI_Wrap_DoesBoxReceiptExist
    if _newclass:DoesBoxReceiptExist = staticmethod(_otapi.OTAPI_Wrap_DoesBoxReceiptExist)
    __swig_getmethods__["processInbox"] = lambda x: _otapi.OTAPI_Wrap_processInbox
    if _newclass:processInbox = staticmethod(_otapi.OTAPI_Wrap_processInbox)
    __swig_getmethods__["processNymbox"] = lambda x: _otapi.OTAPI_Wrap_processNymbox
    if _newclass:processNymbox = staticmethod(_otapi.OTAPI_Wrap_processNymbox)
    __swig_getmethods__["withdrawVoucher"] = lambda x: _otapi.OTAPI_Wrap_withdrawVoucher
    if _newclass:withdrawVoucher = staticmethod(_otapi.OTAPI_Wrap_withdrawVoucher)
    __swig_getmethods__["payDividend"] = lambda x: _otapi.OTAPI_Wrap_payDividend
    if _newclass:payDividend = staticmethod(_otapi.OTAPI_Wrap_payDividend)
    __swig_getmethods__["depositCheque"] = lambda x: _otapi.OTAPI_Wrap_depositCheque
    if _newclass:depositCheque = staticmethod(_otapi.OTAPI_Wrap_depositCheque)
    __swig_getmethods__["depositPaymentPlan"] = lambda x: _otapi.OTAPI_Wrap_depositPaymentPlan
    if _newclass:depositPaymentPlan = staticmethod(_otapi.OTAPI_Wrap_depositPaymentPlan)
    __swig_getmethods__["issueMarketOffer"] = lambda x: _otapi.OTAPI_Wrap_issueMarketOffer
    if _newclass:issueMarketOffer = staticmethod(_otapi.OTAPI_Wrap_issueMarketOffer)
    __swig_getmethods__["getMarketList"] = lambda x: _otapi.OTAPI_Wrap_getMarketList
    if _newclass:getMarketList = staticmethod(_otapi.OTAPI_Wrap_getMarketList)
    __swig_getmethods__["getMarketOffers"] = lambda x: _otapi.OTAPI_Wrap_getMarketOffers
    if _newclass:getMarketOffers = staticmethod(_otapi.OTAPI_Wrap_getMarketOffers)
    __swig_getmethods__["getMarketRecentTrades"] = lambda x: _otapi.OTAPI_Wrap_getMarketRecentTrades
    if _newclass:getMarketRecentTrades = staticmethod(_otapi.OTAPI_Wrap_getMarketRecentTrades)
    __swig_getmethods__["getNym_MarketOffers"] = lambda x: _otapi.OTAPI_Wrap_getNym_MarketOffers
    if _newclass:getNym_MarketOffers = staticmethod(_otapi.OTAPI_Wrap_getNym_MarketOffers)
    __swig_getmethods__["killMarketOffer"] = lambda x: _otapi.OTAPI_Wrap_killMarketOffer
    if _newclass:killMarketOffer = staticmethod(_otapi.OTAPI_Wrap_killMarketOffer)
    __swig_getmethods__["killPaymentPlan"] = lambda x: _otapi.OTAPI_Wrap_killPaymentPlan
    if _newclass:killPaymentPlan = staticmethod(_otapi.OTAPI_Wrap_killPaymentPlan)
    __swig_getmethods__["PopMessageBuffer"] = lambda x: _otapi.OTAPI_Wrap_PopMessageBuffer
    if _newclass:PopMessageBuffer = staticmethod(_otapi.OTAPI_Wrap_PopMessageBuffer)
    __swig_getmethods__["FlushMessageBuffer"] = lambda x: _otapi.OTAPI_Wrap_FlushMessageBuffer
    if _newclass:FlushMessageBuffer = staticmethod(_otapi.OTAPI_Wrap_FlushMessageBuffer)
    __swig_getmethods__["GetSentMessage"] = lambda x: _otapi.OTAPI_Wrap_GetSentMessage
    if _newclass:GetSentMessage = staticmethod(_otapi.OTAPI_Wrap_GetSentMessage)
    __swig_getmethods__["RemoveSentMessage"] = lambda x: _otapi.OTAPI_Wrap_RemoveSentMessage
    if _newclass:RemoveSentMessage = staticmethod(_otapi.OTAPI_Wrap_RemoveSentMessage)
    __swig_getmethods__["FlushSentMessages"] = lambda x: _otapi.OTAPI_Wrap_FlushSentMessages
    if _newclass:FlushSentMessages = staticmethod(_otapi.OTAPI_Wrap_FlushSentMessages)
    __swig_getmethods__["Sleep"] = lambda x: _otapi.OTAPI_Wrap_Sleep
    if _newclass:Sleep = staticmethod(_otapi.OTAPI_Wrap_Sleep)
    __swig_getmethods__["ResyncNymWithServer"] = lambda x: _otapi.OTAPI_Wrap_ResyncNymWithServer
    if _newclass:ResyncNymWithServer = staticmethod(_otapi.OTAPI_Wrap_ResyncNymWithServer)
    __swig_getmethods__["Message_GetCommand"] = lambda x: _otapi.OTAPI_Wrap_Message_GetCommand
    if _newclass:Message_GetCommand = staticmethod(_otapi.OTAPI_Wrap_Message_GetCommand)
    __swig_getmethods__["Message_GetSuccess"] = lambda x: _otapi.OTAPI_Wrap_Message_GetSuccess
    if _newclass:Message_GetSuccess = staticmethod(_otapi.OTAPI_Wrap_Message_GetSuccess)
    __swig_getmethods__["queryAssetTypes"] = lambda x: _otapi.OTAPI_Wrap_queryAssetTypes
    if _newclass:queryAssetTypes = staticmethod(_otapi.OTAPI_Wrap_queryAssetTypes)
    __swig_getmethods__["Message_GetPayload"] = lambda x: _otapi.OTAPI_Wrap_Message_GetPayload
    if _newclass:Message_GetPayload = staticmethod(_otapi.OTAPI_Wrap_Message_GetPayload)
    __swig_getmethods__["Message_GetDepth"] = lambda x: _otapi.OTAPI_Wrap_Message_GetDepth
    if _newclass:Message_GetDepth = staticmethod(_otapi.OTAPI_Wrap_Message_GetDepth)
    __swig_getmethods__["Message_GetTransactionSuccess"] = lambda x: _otapi.OTAPI_Wrap_Message_GetTransactionSuccess
    if _newclass:Message_GetTransactionSuccess = staticmethod(_otapi.OTAPI_Wrap_Message_GetTransactionSuccess)
    __swig_getmethods__["Message_IsTransactionCanceled"] = lambda x: _otapi.OTAPI_Wrap_Message_IsTransactionCanceled
    if _newclass:Message_IsTransactionCanceled = staticmethod(_otapi.OTAPI_Wrap_Message_IsTransactionCanceled)
    __swig_getmethods__["Message_GetBalanceAgreementSuccess"] = lambda x: _otapi.OTAPI_Wrap_Message_GetBalanceAgreementSuccess
    if _newclass:Message_GetBalanceAgreementSuccess = staticmethod(_otapi.OTAPI_Wrap_Message_GetBalanceAgreementSuccess)
    __swig_getmethods__["Message_GetLedger"] = lambda x: _otapi.OTAPI_Wrap_Message_GetLedger
    if _newclass:Message_GetLedger = staticmethod(_otapi.OTAPI_Wrap_Message_GetLedger)
    __swig_getmethods__["Message_GetNewAssetTypeID"] = lambda x: _otapi.OTAPI_Wrap_Message_GetNewAssetTypeID
    if _newclass:Message_GetNewAssetTypeID = staticmethod(_otapi.OTAPI_Wrap_Message_GetNewAssetTypeID)
    __swig_getmethods__["Message_GetNewIssuerAcctID"] = lambda x: _otapi.OTAPI_Wrap_Message_GetNewIssuerAcctID
    if _newclass:Message_GetNewIssuerAcctID = staticmethod(_otapi.OTAPI_Wrap_Message_GetNewIssuerAcctID)
    __swig_getmethods__["Message_GetNewAcctID"] = lambda x: _otapi.OTAPI_Wrap_Message_GetNewAcctID
    if _newclass:Message_GetNewAcctID = staticmethod(_otapi.OTAPI_Wrap_Message_GetNewAcctID)
    __swig_getmethods__["Message_GetNymboxHash"] = lambda x: _otapi.OTAPI_Wrap_Message_GetNymboxHash
    if _newclass:Message_GetNymboxHash = staticmethod(_otapi.OTAPI_Wrap_Message_GetNymboxHash)
    __swig_getmethods__["ConnectServer"] = lambda x: _otapi.OTAPI_Wrap_ConnectServer
    if _newclass:ConnectServer = staticmethod(_otapi.OTAPI_Wrap_ConnectServer)
    __swig_getmethods__["ProcessSockets"] = lambda x: _otapi.OTAPI_Wrap_ProcessSockets
    if _newclass:ProcessSockets = staticmethod(_otapi.OTAPI_Wrap_ProcessSockets)
OTAPI_Wrap_swigregister = _otapi.OTAPI_Wrap_swigregister
OTAPI_Wrap_swigregister(OTAPI_Wrap)

def OTAPI_Wrap_SetExecutor(*args):
  return _otapi.OTAPI_Wrap_SetExecutor(*args)
OTAPI_Wrap_SetExecutor = _otapi.OTAPI_Wrap_SetExecutor

def OTAPI_Wrap_Exec():
  return _otapi.OTAPI_Wrap_Exec()
OTAPI_Wrap_Exec = _otapi.OTAPI_Wrap_Exec

def OTAPI_Wrap_It():
  return _otapi.OTAPI_Wrap_It()
OTAPI_Wrap_It = _otapi.OTAPI_Wrap_It

def OTAPI_Wrap_OTAPI():
  return _otapi.OTAPI_Wrap_OTAPI()
OTAPI_Wrap_OTAPI = _otapi.OTAPI_Wrap_OTAPI

def OTAPI_Wrap_StringToLong(*args):
  return _otapi.OTAPI_Wrap_StringToLong(*args)
OTAPI_Wrap_StringToLong = _otapi.OTAPI_Wrap_StringToLong

def OTAPI_Wrap_LongToString(*args):
  return _otapi.OTAPI_Wrap_LongToString(*args)
OTAPI_Wrap_LongToString = _otapi.OTAPI_Wrap_LongToString

def OTAPI_Wrap_StringToUlong(*args):
  return _otapi.OTAPI_Wrap_StringToUlong(*args)
OTAPI_Wrap_StringToUlong = _otapi.OTAPI_Wrap_StringToUlong

def OTAPI_Wrap_UlongToString(*args):
  return _otapi.OTAPI_Wrap_UlongToString(*args)
OTAPI_Wrap_UlongToString = _otapi.OTAPI_Wrap_UlongToString

def OTAPI_Wrap_AppInit():
  return _otapi.OTAPI_Wrap_AppInit()
OTAPI_Wrap_AppInit = _otapi.OTAPI_Wrap_AppInit

def OTAPI_Wrap_AppCleanup():
  return _otapi.OTAPI_Wrap_AppCleanup()
OTAPI_Wrap_AppCleanup = _otapi.OTAPI_Wrap_AppCleanup

def OTAPI_Wrap_SetAppBinaryFolder(*args):
  return _otapi.OTAPI_Wrap_SetAppBinaryFolder(*args)
OTAPI_Wrap_SetAppBinaryFolder = _otapi.OTAPI_Wrap_SetAppBinaryFolder

def OTAPI_Wrap_SetHomeFolder(*args):
  return _otapi.OTAPI_Wrap_SetHomeFolder(*args)
OTAPI_Wrap_SetHomeFolder = _otapi.OTAPI_Wrap_SetHomeFolder

def OTAPI_Wrap_SetWallet(*args):
  return _otapi.OTAPI_Wrap_SetWallet(*args)
OTAPI_Wrap_SetWallet = _otapi.OTAPI_Wrap_SetWallet

def OTAPI_Wrap_WalletExists():
  return _otapi.OTAPI_Wrap_WalletExists()
OTAPI_Wrap_WalletExists = _otapi.OTAPI_Wrap_WalletExists

def OTAPI_Wrap_LoadWallet():
  return _otapi.OTAPI_Wrap_LoadWallet()
OTAPI_Wrap_LoadWallet = _otapi.OTAPI_Wrap_LoadWallet

def OTAPI_Wrap_SwitchWallet():
  return _otapi.OTAPI_Wrap_SwitchWallet()
OTAPI_Wrap_SwitchWallet = _otapi.OTAPI_Wrap_SwitchWallet

def OTAPI_Wrap_Output(*args):
  return _otapi.OTAPI_Wrap_Output(*args)
OTAPI_Wrap_Output = _otapi.OTAPI_Wrap_Output

def OTAPI_Wrap_GetTime():
  return _otapi.OTAPI_Wrap_GetTime()
OTAPI_Wrap_GetTime = _otapi.OTAPI_Wrap_GetTime

def OTAPI_Wrap_NumList_Add(*args):
  return _otapi.OTAPI_Wrap_NumList_Add(*args)
OTAPI_Wrap_NumList_Add = _otapi.OTAPI_Wrap_NumList_Add

def OTAPI_Wrap_NumList_Remove(*args):
  return _otapi.OTAPI_Wrap_NumList_Remove(*args)
OTAPI_Wrap_NumList_Remove = _otapi.OTAPI_Wrap_NumList_Remove

def OTAPI_Wrap_NumList_VerifyQuery(*args):
  return _otapi.OTAPI_Wrap_NumList_VerifyQuery(*args)
OTAPI_Wrap_NumList_VerifyQuery = _otapi.OTAPI_Wrap_NumList_VerifyQuery

def OTAPI_Wrap_NumList_VerifyAll(*args):
  return _otapi.OTAPI_Wrap_NumList_VerifyAll(*args)
OTAPI_Wrap_NumList_VerifyAll = _otapi.OTAPI_Wrap_NumList_VerifyAll

def OTAPI_Wrap_NumList_Count(*args):
  return _otapi.OTAPI_Wrap_NumList_Count(*args)
OTAPI_Wrap_NumList_Count = _otapi.OTAPI_Wrap_NumList_Count

def OTAPI_Wrap_Encode(*args):
  return _otapi.OTAPI_Wrap_Encode(*args)
OTAPI_Wrap_Encode = _otapi.OTAPI_Wrap_Encode

def OTAPI_Wrap_Decode(*args):
  return _otapi.OTAPI_Wrap_Decode(*args)
OTAPI_Wrap_Decode = _otapi.OTAPI_Wrap_Decode

def OTAPI_Wrap_Encrypt(*args):
  return _otapi.OTAPI_Wrap_Encrypt(*args)
OTAPI_Wrap_Encrypt = _otapi.OTAPI_Wrap_Encrypt

def OTAPI_Wrap_Decrypt(*args):
  return _otapi.OTAPI_Wrap_Decrypt(*args)
OTAPI_Wrap_Decrypt = _otapi.OTAPI_Wrap_Decrypt

def OTAPI_Wrap_CreateSymmetricKey():
  return _otapi.OTAPI_Wrap_CreateSymmetricKey()
OTAPI_Wrap_CreateSymmetricKey = _otapi.OTAPI_Wrap_CreateSymmetricKey

def OTAPI_Wrap_SymmetricEncrypt(*args):
  return _otapi.OTAPI_Wrap_SymmetricEncrypt(*args)
OTAPI_Wrap_SymmetricEncrypt = _otapi.OTAPI_Wrap_SymmetricEncrypt

def OTAPI_Wrap_SymmetricDecrypt(*args):
  return _otapi.OTAPI_Wrap_SymmetricDecrypt(*args)
OTAPI_Wrap_SymmetricDecrypt = _otapi.OTAPI_Wrap_SymmetricDecrypt

def OTAPI_Wrap_SignContract(*args):
  return _otapi.OTAPI_Wrap_SignContract(*args)
OTAPI_Wrap_SignContract = _otapi.OTAPI_Wrap_SignContract

def OTAPI_Wrap_FlatSign(*args):
  return _otapi.OTAPI_Wrap_FlatSign(*args)
OTAPI_Wrap_FlatSign = _otapi.OTAPI_Wrap_FlatSign

def OTAPI_Wrap_AddSignature(*args):
  return _otapi.OTAPI_Wrap_AddSignature(*args)
OTAPI_Wrap_AddSignature = _otapi.OTAPI_Wrap_AddSignature

def OTAPI_Wrap_VerifySignature(*args):
  return _otapi.OTAPI_Wrap_VerifySignature(*args)
OTAPI_Wrap_VerifySignature = _otapi.OTAPI_Wrap_VerifySignature

def OTAPI_Wrap_VerifyAndRetrieveXMLContents(*args):
  return _otapi.OTAPI_Wrap_VerifyAndRetrieveXMLContents(*args)
OTAPI_Wrap_VerifyAndRetrieveXMLContents = _otapi.OTAPI_Wrap_VerifyAndRetrieveXMLContents

def OTAPI_Wrap_GetMemlogSize():
  return _otapi.OTAPI_Wrap_GetMemlogSize()
OTAPI_Wrap_GetMemlogSize = _otapi.OTAPI_Wrap_GetMemlogSize

def OTAPI_Wrap_GetMemlogAtIndex(*args):
  return _otapi.OTAPI_Wrap_GetMemlogAtIndex(*args)
OTAPI_Wrap_GetMemlogAtIndex = _otapi.OTAPI_Wrap_GetMemlogAtIndex

def OTAPI_Wrap_PeekMemlogFront():
  return _otapi.OTAPI_Wrap_PeekMemlogFront()
OTAPI_Wrap_PeekMemlogFront = _otapi.OTAPI_Wrap_PeekMemlogFront

def OTAPI_Wrap_PeekMemlogBack():
  return _otapi.OTAPI_Wrap_PeekMemlogBack()
OTAPI_Wrap_PeekMemlogBack = _otapi.OTAPI_Wrap_PeekMemlogBack

def OTAPI_Wrap_PopMemlogFront():
  return _otapi.OTAPI_Wrap_PopMemlogFront()
OTAPI_Wrap_PopMemlogFront = _otapi.OTAPI_Wrap_PopMemlogFront

def OTAPI_Wrap_PopMemlogBack():
  return _otapi.OTAPI_Wrap_PopMemlogBack()
OTAPI_Wrap_PopMemlogBack = _otapi.OTAPI_Wrap_PopMemlogBack

def OTAPI_Wrap_CreateNym(*args):
  return _otapi.OTAPI_Wrap_CreateNym(*args)
OTAPI_Wrap_CreateNym = _otapi.OTAPI_Wrap_CreateNym

def OTAPI_Wrap_GetNym_ActiveCronItemIDs(*args):
  return _otapi.OTAPI_Wrap_GetNym_ActiveCronItemIDs(*args)
OTAPI_Wrap_GetNym_ActiveCronItemIDs = _otapi.OTAPI_Wrap_GetNym_ActiveCronItemIDs

def OTAPI_Wrap_GetActiveCronItem(*args):
  return _otapi.OTAPI_Wrap_GetActiveCronItem(*args)
OTAPI_Wrap_GetActiveCronItem = _otapi.OTAPI_Wrap_GetActiveCronItem

def OTAPI_Wrap_GetNym_SourceForID(*args):
  return _otapi.OTAPI_Wrap_GetNym_SourceForID(*args)
OTAPI_Wrap_GetNym_SourceForID = _otapi.OTAPI_Wrap_GetNym_SourceForID

def OTAPI_Wrap_GetNym_AltSourceLocation(*args):
  return _otapi.OTAPI_Wrap_GetNym_AltSourceLocation(*args)
OTAPI_Wrap_GetNym_AltSourceLocation = _otapi.OTAPI_Wrap_GetNym_AltSourceLocation

def OTAPI_Wrap_GetNym_CredentialCount(*args):
  return _otapi.OTAPI_Wrap_GetNym_CredentialCount(*args)
OTAPI_Wrap_GetNym_CredentialCount = _otapi.OTAPI_Wrap_GetNym_CredentialCount

def OTAPI_Wrap_GetNym_CredentialID(*args):
  return _otapi.OTAPI_Wrap_GetNym_CredentialID(*args)
OTAPI_Wrap_GetNym_CredentialID = _otapi.OTAPI_Wrap_GetNym_CredentialID

def OTAPI_Wrap_GetNym_CredentialContents(*args):
  return _otapi.OTAPI_Wrap_GetNym_CredentialContents(*args)
OTAPI_Wrap_GetNym_CredentialContents = _otapi.OTAPI_Wrap_GetNym_CredentialContents

def OTAPI_Wrap_GetNym_RevokedCredCount(*args):
  return _otapi.OTAPI_Wrap_GetNym_RevokedCredCount(*args)
OTAPI_Wrap_GetNym_RevokedCredCount = _otapi.OTAPI_Wrap_GetNym_RevokedCredCount

def OTAPI_Wrap_GetNym_RevokedCredID(*args):
  return _otapi.OTAPI_Wrap_GetNym_RevokedCredID(*args)
OTAPI_Wrap_GetNym_RevokedCredID = _otapi.OTAPI_Wrap_GetNym_RevokedCredID

def OTAPI_Wrap_GetNym_RevokedCredContents(*args):
  return _otapi.OTAPI_Wrap_GetNym_RevokedCredContents(*args)
OTAPI_Wrap_GetNym_RevokedCredContents = _otapi.OTAPI_Wrap_GetNym_RevokedCredContents

def OTAPI_Wrap_GetNym_SubcredentialCount(*args):
  return _otapi.OTAPI_Wrap_GetNym_SubcredentialCount(*args)
OTAPI_Wrap_GetNym_SubcredentialCount = _otapi.OTAPI_Wrap_GetNym_SubcredentialCount

def OTAPI_Wrap_GetNym_SubCredentialID(*args):
  return _otapi.OTAPI_Wrap_GetNym_SubCredentialID(*args)
OTAPI_Wrap_GetNym_SubCredentialID = _otapi.OTAPI_Wrap_GetNym_SubCredentialID

def OTAPI_Wrap_GetNym_SubCredentialContents(*args):
  return _otapi.OTAPI_Wrap_GetNym_SubCredentialContents(*args)
OTAPI_Wrap_GetNym_SubCredentialContents = _otapi.OTAPI_Wrap_GetNym_SubCredentialContents

def OTAPI_Wrap_AddSubcredential(*args):
  return _otapi.OTAPI_Wrap_AddSubcredential(*args)
OTAPI_Wrap_AddSubcredential = _otapi.OTAPI_Wrap_AddSubcredential

def OTAPI_Wrap_RevokeSubcredential(*args):
  return _otapi.OTAPI_Wrap_RevokeSubcredential(*args)
OTAPI_Wrap_RevokeSubcredential = _otapi.OTAPI_Wrap_RevokeSubcredential

def OTAPI_Wrap_CreateServerContract(*args):
  return _otapi.OTAPI_Wrap_CreateServerContract(*args)
OTAPI_Wrap_CreateServerContract = _otapi.OTAPI_Wrap_CreateServerContract

def OTAPI_Wrap_CreateAssetContract(*args):
  return _otapi.OTAPI_Wrap_CreateAssetContract(*args)
OTAPI_Wrap_CreateAssetContract = _otapi.OTAPI_Wrap_CreateAssetContract

def OTAPI_Wrap_CalculateAssetContractID(*args):
  return _otapi.OTAPI_Wrap_CalculateAssetContractID(*args)
OTAPI_Wrap_CalculateAssetContractID = _otapi.OTAPI_Wrap_CalculateAssetContractID

def OTAPI_Wrap_CalculateServerContractID(*args):
  return _otapi.OTAPI_Wrap_CalculateServerContractID(*args)
OTAPI_Wrap_CalculateServerContractID = _otapi.OTAPI_Wrap_CalculateServerContractID

def OTAPI_Wrap_AddServerContract(*args):
  return _otapi.OTAPI_Wrap_AddServerContract(*args)
OTAPI_Wrap_AddServerContract = _otapi.OTAPI_Wrap_AddServerContract

def OTAPI_Wrap_AddAssetContract(*args):
  return _otapi.OTAPI_Wrap_AddAssetContract(*args)
OTAPI_Wrap_AddAssetContract = _otapi.OTAPI_Wrap_AddAssetContract

def OTAPI_Wrap_GetServerCount():
  return _otapi.OTAPI_Wrap_GetServerCount()
OTAPI_Wrap_GetServerCount = _otapi.OTAPI_Wrap_GetServerCount

def OTAPI_Wrap_GetAssetTypeCount():
  return _otapi.OTAPI_Wrap_GetAssetTypeCount()
OTAPI_Wrap_GetAssetTypeCount = _otapi.OTAPI_Wrap_GetAssetTypeCount

def OTAPI_Wrap_GetAccountCount():
  return _otapi.OTAPI_Wrap_GetAccountCount()
OTAPI_Wrap_GetAccountCount = _otapi.OTAPI_Wrap_GetAccountCount

def OTAPI_Wrap_GetNymCount():
  return _otapi.OTAPI_Wrap_GetNymCount()
OTAPI_Wrap_GetNymCount = _otapi.OTAPI_Wrap_GetNymCount

def OTAPI_Wrap_GetServer_ID(*args):
  return _otapi.OTAPI_Wrap_GetServer_ID(*args)
OTAPI_Wrap_GetServer_ID = _otapi.OTAPI_Wrap_GetServer_ID

def OTAPI_Wrap_GetServer_Name(*args):
  return _otapi.OTAPI_Wrap_GetServer_Name(*args)
OTAPI_Wrap_GetServer_Name = _otapi.OTAPI_Wrap_GetServer_Name

def OTAPI_Wrap_GetServer_Contract(*args):
  return _otapi.OTAPI_Wrap_GetServer_Contract(*args)
OTAPI_Wrap_GetServer_Contract = _otapi.OTAPI_Wrap_GetServer_Contract

def OTAPI_Wrap_FormatAmount(*args):
  return _otapi.OTAPI_Wrap_FormatAmount(*args)
OTAPI_Wrap_FormatAmount = _otapi.OTAPI_Wrap_FormatAmount

def OTAPI_Wrap_StringToAmount(*args):
  return _otapi.OTAPI_Wrap_StringToAmount(*args)
OTAPI_Wrap_StringToAmount = _otapi.OTAPI_Wrap_StringToAmount

def OTAPI_Wrap_GetAssetType_ID(*args):
  return _otapi.OTAPI_Wrap_GetAssetType_ID(*args)
OTAPI_Wrap_GetAssetType_ID = _otapi.OTAPI_Wrap_GetAssetType_ID

def OTAPI_Wrap_GetAssetType_Name(*args):
  return _otapi.OTAPI_Wrap_GetAssetType_Name(*args)
OTAPI_Wrap_GetAssetType_Name = _otapi.OTAPI_Wrap_GetAssetType_Name

def OTAPI_Wrap_GetAssetType_TLA(*args):
  return _otapi.OTAPI_Wrap_GetAssetType_TLA(*args)
OTAPI_Wrap_GetAssetType_TLA = _otapi.OTAPI_Wrap_GetAssetType_TLA

def OTAPI_Wrap_GetAssetType_Contract(*args):
  return _otapi.OTAPI_Wrap_GetAssetType_Contract(*args)
OTAPI_Wrap_GetAssetType_Contract = _otapi.OTAPI_Wrap_GetAssetType_Contract

def OTAPI_Wrap_GetAccountWallet_ID(*args):
  return _otapi.OTAPI_Wrap_GetAccountWallet_ID(*args)
OTAPI_Wrap_GetAccountWallet_ID = _otapi.OTAPI_Wrap_GetAccountWallet_ID

def OTAPI_Wrap_GetAccountWallet_Name(*args):
  return _otapi.OTAPI_Wrap_GetAccountWallet_Name(*args)
OTAPI_Wrap_GetAccountWallet_Name = _otapi.OTAPI_Wrap_GetAccountWallet_Name

def OTAPI_Wrap_GetAccountWallet_Balance(*args):
  return _otapi.OTAPI_Wrap_GetAccountWallet_Balance(*args)
OTAPI_Wrap_GetAccountWallet_Balance = _otapi.OTAPI_Wrap_GetAccountWallet_Balance

def OTAPI_Wrap_GetAccountWallet_Type(*args):
  return _otapi.OTAPI_Wrap_GetAccountWallet_Type(*args)
OTAPI_Wrap_GetAccountWallet_Type = _otapi.OTAPI_Wrap_GetAccountWallet_Type

def OTAPI_Wrap_GetAccountWallet_AssetTypeID(*args):
  return _otapi.OTAPI_Wrap_GetAccountWallet_AssetTypeID(*args)
OTAPI_Wrap_GetAccountWallet_AssetTypeID = _otapi.OTAPI_Wrap_GetAccountWallet_AssetTypeID

def OTAPI_Wrap_GetAccountWallet_ServerID(*args):
  return _otapi.OTAPI_Wrap_GetAccountWallet_ServerID(*args)
OTAPI_Wrap_GetAccountWallet_ServerID = _otapi.OTAPI_Wrap_GetAccountWallet_ServerID

def OTAPI_Wrap_GetAccountWallet_NymID(*args):
  return _otapi.OTAPI_Wrap_GetAccountWallet_NymID(*args)
OTAPI_Wrap_GetAccountWallet_NymID = _otapi.OTAPI_Wrap_GetAccountWallet_NymID

def OTAPI_Wrap_GetAccountWallet_InboxHash(*args):
  return _otapi.OTAPI_Wrap_GetAccountWallet_InboxHash(*args)
OTAPI_Wrap_GetAccountWallet_InboxHash = _otapi.OTAPI_Wrap_GetAccountWallet_InboxHash

def OTAPI_Wrap_GetAccountWallet_OutboxHash(*args):
  return _otapi.OTAPI_Wrap_GetAccountWallet_OutboxHash(*args)
OTAPI_Wrap_GetAccountWallet_OutboxHash = _otapi.OTAPI_Wrap_GetAccountWallet_OutboxHash

def OTAPI_Wrap_VerifyAccountReceipt(*args):
  return _otapi.OTAPI_Wrap_VerifyAccountReceipt(*args)
OTAPI_Wrap_VerifyAccountReceipt = _otapi.OTAPI_Wrap_VerifyAccountReceipt

def OTAPI_Wrap_GetNym_TransactionNumCount(*args):
  return _otapi.OTAPI_Wrap_GetNym_TransactionNumCount(*args)
OTAPI_Wrap_GetNym_TransactionNumCount = _otapi.OTAPI_Wrap_GetNym_TransactionNumCount

def OTAPI_Wrap_GetNym_ID(*args):
  return _otapi.OTAPI_Wrap_GetNym_ID(*args)
OTAPI_Wrap_GetNym_ID = _otapi.OTAPI_Wrap_GetNym_ID

def OTAPI_Wrap_GetNym_Name(*args):
  return _otapi.OTAPI_Wrap_GetNym_Name(*args)
OTAPI_Wrap_GetNym_Name = _otapi.OTAPI_Wrap_GetNym_Name

def OTAPI_Wrap_GetNym_Stats(*args):
  return _otapi.OTAPI_Wrap_GetNym_Stats(*args)
OTAPI_Wrap_GetNym_Stats = _otapi.OTAPI_Wrap_GetNym_Stats

def OTAPI_Wrap_GetNym_NymboxHash(*args):
  return _otapi.OTAPI_Wrap_GetNym_NymboxHash(*args)
OTAPI_Wrap_GetNym_NymboxHash = _otapi.OTAPI_Wrap_GetNym_NymboxHash

def OTAPI_Wrap_GetNym_RecentHash(*args):
  return _otapi.OTAPI_Wrap_GetNym_RecentHash(*args)
OTAPI_Wrap_GetNym_RecentHash = _otapi.OTAPI_Wrap_GetNym_RecentHash

def OTAPI_Wrap_GetNym_InboxHash(*args):
  return _otapi.OTAPI_Wrap_GetNym_InboxHash(*args)
OTAPI_Wrap_GetNym_InboxHash = _otapi.OTAPI_Wrap_GetNym_InboxHash

def OTAPI_Wrap_GetNym_OutboxHash(*args):
  return _otapi.OTAPI_Wrap_GetNym_OutboxHash(*args)
OTAPI_Wrap_GetNym_OutboxHash = _otapi.OTAPI_Wrap_GetNym_OutboxHash

def OTAPI_Wrap_IsNym_RegisteredAtServer(*args):
  return _otapi.OTAPI_Wrap_IsNym_RegisteredAtServer(*args)
OTAPI_Wrap_IsNym_RegisteredAtServer = _otapi.OTAPI_Wrap_IsNym_RegisteredAtServer

def OTAPI_Wrap_GetNym_MailCount(*args):
  return _otapi.OTAPI_Wrap_GetNym_MailCount(*args)
OTAPI_Wrap_GetNym_MailCount = _otapi.OTAPI_Wrap_GetNym_MailCount

def OTAPI_Wrap_GetNym_MailContentsByIndex(*args):
  return _otapi.OTAPI_Wrap_GetNym_MailContentsByIndex(*args)
OTAPI_Wrap_GetNym_MailContentsByIndex = _otapi.OTAPI_Wrap_GetNym_MailContentsByIndex

def OTAPI_Wrap_GetNym_MailSenderIDByIndex(*args):
  return _otapi.OTAPI_Wrap_GetNym_MailSenderIDByIndex(*args)
OTAPI_Wrap_GetNym_MailSenderIDByIndex = _otapi.OTAPI_Wrap_GetNym_MailSenderIDByIndex

def OTAPI_Wrap_GetNym_MailServerIDByIndex(*args):
  return _otapi.OTAPI_Wrap_GetNym_MailServerIDByIndex(*args)
OTAPI_Wrap_GetNym_MailServerIDByIndex = _otapi.OTAPI_Wrap_GetNym_MailServerIDByIndex

def OTAPI_Wrap_Nym_RemoveMailByIndex(*args):
  return _otapi.OTAPI_Wrap_Nym_RemoveMailByIndex(*args)
OTAPI_Wrap_Nym_RemoveMailByIndex = _otapi.OTAPI_Wrap_Nym_RemoveMailByIndex

def OTAPI_Wrap_Nym_VerifyMailByIndex(*args):
  return _otapi.OTAPI_Wrap_Nym_VerifyMailByIndex(*args)
OTAPI_Wrap_Nym_VerifyMailByIndex = _otapi.OTAPI_Wrap_Nym_VerifyMailByIndex

def OTAPI_Wrap_GetNym_OutmailCount(*args):
  return _otapi.OTAPI_Wrap_GetNym_OutmailCount(*args)
OTAPI_Wrap_GetNym_OutmailCount = _otapi.OTAPI_Wrap_GetNym_OutmailCount

def OTAPI_Wrap_GetNym_OutmailContentsByIndex(*args):
  return _otapi.OTAPI_Wrap_GetNym_OutmailContentsByIndex(*args)
OTAPI_Wrap_GetNym_OutmailContentsByIndex = _otapi.OTAPI_Wrap_GetNym_OutmailContentsByIndex

def OTAPI_Wrap_GetNym_OutmailRecipientIDByIndex(*args):
  return _otapi.OTAPI_Wrap_GetNym_OutmailRecipientIDByIndex(*args)
OTAPI_Wrap_GetNym_OutmailRecipientIDByIndex = _otapi.OTAPI_Wrap_GetNym_OutmailRecipientIDByIndex

def OTAPI_Wrap_GetNym_OutmailServerIDByIndex(*args):
  return _otapi.OTAPI_Wrap_GetNym_OutmailServerIDByIndex(*args)
OTAPI_Wrap_GetNym_OutmailServerIDByIndex = _otapi.OTAPI_Wrap_GetNym_OutmailServerIDByIndex

def OTAPI_Wrap_Nym_RemoveOutmailByIndex(*args):
  return _otapi.OTAPI_Wrap_Nym_RemoveOutmailByIndex(*args)
OTAPI_Wrap_Nym_RemoveOutmailByIndex = _otapi.OTAPI_Wrap_Nym_RemoveOutmailByIndex

def OTAPI_Wrap_Nym_VerifyOutmailByIndex(*args):
  return _otapi.OTAPI_Wrap_Nym_VerifyOutmailByIndex(*args)
OTAPI_Wrap_Nym_VerifyOutmailByIndex = _otapi.OTAPI_Wrap_Nym_VerifyOutmailByIndex

def OTAPI_Wrap_GetNym_OutpaymentsCount(*args):
  return _otapi.OTAPI_Wrap_GetNym_OutpaymentsCount(*args)
OTAPI_Wrap_GetNym_OutpaymentsCount = _otapi.OTAPI_Wrap_GetNym_OutpaymentsCount

def OTAPI_Wrap_GetNym_OutpaymentsContentsByIndex(*args):
  return _otapi.OTAPI_Wrap_GetNym_OutpaymentsContentsByIndex(*args)
OTAPI_Wrap_GetNym_OutpaymentsContentsByIndex = _otapi.OTAPI_Wrap_GetNym_OutpaymentsContentsByIndex

def OTAPI_Wrap_GetNym_OutpaymentsRecipientIDByIndex(*args):
  return _otapi.OTAPI_Wrap_GetNym_OutpaymentsRecipientIDByIndex(*args)
OTAPI_Wrap_GetNym_OutpaymentsRecipientIDByIndex = _otapi.OTAPI_Wrap_GetNym_OutpaymentsRecipientIDByIndex

def OTAPI_Wrap_GetNym_OutpaymentsServerIDByIndex(*args):
  return _otapi.OTAPI_Wrap_GetNym_OutpaymentsServerIDByIndex(*args)
OTAPI_Wrap_GetNym_OutpaymentsServerIDByIndex = _otapi.OTAPI_Wrap_GetNym_OutpaymentsServerIDByIndex

def OTAPI_Wrap_Nym_RemoveOutpaymentsByIndex(*args):
  return _otapi.OTAPI_Wrap_Nym_RemoveOutpaymentsByIndex(*args)
OTAPI_Wrap_Nym_RemoveOutpaymentsByIndex = _otapi.OTAPI_Wrap_Nym_RemoveOutpaymentsByIndex

def OTAPI_Wrap_Nym_VerifyOutpaymentsByIndex(*args):
  return _otapi.OTAPI_Wrap_Nym_VerifyOutpaymentsByIndex(*args)
OTAPI_Wrap_Nym_VerifyOutpaymentsByIndex = _otapi.OTAPI_Wrap_Nym_VerifyOutpaymentsByIndex

def OTAPI_Wrap_Wallet_CanRemoveServer(*args):
  return _otapi.OTAPI_Wrap_Wallet_CanRemoveServer(*args)
OTAPI_Wrap_Wallet_CanRemoveServer = _otapi.OTAPI_Wrap_Wallet_CanRemoveServer

def OTAPI_Wrap_Wallet_RemoveServer(*args):
  return _otapi.OTAPI_Wrap_Wallet_RemoveServer(*args)
OTAPI_Wrap_Wallet_RemoveServer = _otapi.OTAPI_Wrap_Wallet_RemoveServer

def OTAPI_Wrap_Wallet_CanRemoveAssetType(*args):
  return _otapi.OTAPI_Wrap_Wallet_CanRemoveAssetType(*args)
OTAPI_Wrap_Wallet_CanRemoveAssetType = _otapi.OTAPI_Wrap_Wallet_CanRemoveAssetType

def OTAPI_Wrap_Wallet_RemoveAssetType(*args):
  return _otapi.OTAPI_Wrap_Wallet_RemoveAssetType(*args)
OTAPI_Wrap_Wallet_RemoveAssetType = _otapi.OTAPI_Wrap_Wallet_RemoveAssetType

def OTAPI_Wrap_Wallet_CanRemoveNym(*args):
  return _otapi.OTAPI_Wrap_Wallet_CanRemoveNym(*args)
OTAPI_Wrap_Wallet_CanRemoveNym = _otapi.OTAPI_Wrap_Wallet_CanRemoveNym

def OTAPI_Wrap_Wallet_RemoveNym(*args):
  return _otapi.OTAPI_Wrap_Wallet_RemoveNym(*args)
OTAPI_Wrap_Wallet_RemoveNym = _otapi.OTAPI_Wrap_Wallet_RemoveNym

def OTAPI_Wrap_Wallet_CanRemoveAccount(*args):
  return _otapi.OTAPI_Wrap_Wallet_CanRemoveAccount(*args)
OTAPI_Wrap_Wallet_CanRemoveAccount = _otapi.OTAPI_Wrap_Wallet_CanRemoveAccount

def OTAPI_Wrap_Wallet_ChangePassphrase():
  return _otapi.OTAPI_Wrap_Wallet_ChangePassphrase()
OTAPI_Wrap_Wallet_ChangePassphrase = _otapi.OTAPI_Wrap_Wallet_ChangePassphrase

def OTAPI_Wrap_Wallet_ExportNym(*args):
  return _otapi.OTAPI_Wrap_Wallet_ExportNym(*args)
OTAPI_Wrap_Wallet_ExportNym = _otapi.OTAPI_Wrap_Wallet_ExportNym

def OTAPI_Wrap_Wallet_ImportNym(*args):
  return _otapi.OTAPI_Wrap_Wallet_ImportNym(*args)
OTAPI_Wrap_Wallet_ImportNym = _otapi.OTAPI_Wrap_Wallet_ImportNym

def OTAPI_Wrap_Wallet_ImportCert(*args):
  return _otapi.OTAPI_Wrap_Wallet_ImportCert(*args)
OTAPI_Wrap_Wallet_ImportCert = _otapi.OTAPI_Wrap_Wallet_ImportCert

def OTAPI_Wrap_Wallet_ExportCert(*args):
  return _otapi.OTAPI_Wrap_Wallet_ExportCert(*args)
OTAPI_Wrap_Wallet_ExportCert = _otapi.OTAPI_Wrap_Wallet_ExportCert

def OTAPI_Wrap_Wallet_GetNymIDFromPartial(*args):
  return _otapi.OTAPI_Wrap_Wallet_GetNymIDFromPartial(*args)
OTAPI_Wrap_Wallet_GetNymIDFromPartial = _otapi.OTAPI_Wrap_Wallet_GetNymIDFromPartial

def OTAPI_Wrap_Wallet_GetServerIDFromPartial(*args):
  return _otapi.OTAPI_Wrap_Wallet_GetServerIDFromPartial(*args)
OTAPI_Wrap_Wallet_GetServerIDFromPartial = _otapi.OTAPI_Wrap_Wallet_GetServerIDFromPartial

def OTAPI_Wrap_Wallet_GetAssetIDFromPartial(*args):
  return _otapi.OTAPI_Wrap_Wallet_GetAssetIDFromPartial(*args)
OTAPI_Wrap_Wallet_GetAssetIDFromPartial = _otapi.OTAPI_Wrap_Wallet_GetAssetIDFromPartial

def OTAPI_Wrap_Wallet_GetAccountIDFromPartial(*args):
  return _otapi.OTAPI_Wrap_Wallet_GetAccountIDFromPartial(*args)
OTAPI_Wrap_Wallet_GetAccountIDFromPartial = _otapi.OTAPI_Wrap_Wallet_GetAccountIDFromPartial

def OTAPI_Wrap_SetNym_Name(*args):
  return _otapi.OTAPI_Wrap_SetNym_Name(*args)
OTAPI_Wrap_SetNym_Name = _otapi.OTAPI_Wrap_SetNym_Name

def OTAPI_Wrap_SetAccountWallet_Name(*args):
  return _otapi.OTAPI_Wrap_SetAccountWallet_Name(*args)
OTAPI_Wrap_SetAccountWallet_Name = _otapi.OTAPI_Wrap_SetAccountWallet_Name

def OTAPI_Wrap_SetAssetType_Name(*args):
  return _otapi.OTAPI_Wrap_SetAssetType_Name(*args)
OTAPI_Wrap_SetAssetType_Name = _otapi.OTAPI_Wrap_SetAssetType_Name

def OTAPI_Wrap_SetServer_Name(*args):
  return _otapi.OTAPI_Wrap_SetServer_Name(*args)
OTAPI_Wrap_SetServer_Name = _otapi.OTAPI_Wrap_SetServer_Name

def OTAPI_Wrap_WriteCheque(*args):
  return _otapi.OTAPI_Wrap_WriteCheque(*args)
OTAPI_Wrap_WriteCheque = _otapi.OTAPI_Wrap_WriteCheque

def OTAPI_Wrap_DiscardCheque(*args):
  return _otapi.OTAPI_Wrap_DiscardCheque(*args)
OTAPI_Wrap_DiscardCheque = _otapi.OTAPI_Wrap_DiscardCheque

def OTAPI_Wrap_ProposePaymentPlan(*args):
  return _otapi.OTAPI_Wrap_ProposePaymentPlan(*args)
OTAPI_Wrap_ProposePaymentPlan = _otapi.OTAPI_Wrap_ProposePaymentPlan

def OTAPI_Wrap_EasyProposePlan(*args):
  return _otapi.OTAPI_Wrap_EasyProposePlan(*args)
OTAPI_Wrap_EasyProposePlan = _otapi.OTAPI_Wrap_EasyProposePlan

def OTAPI_Wrap_ConfirmPaymentPlan(*args):
  return _otapi.OTAPI_Wrap_ConfirmPaymentPlan(*args)
OTAPI_Wrap_ConfirmPaymentPlan = _otapi.OTAPI_Wrap_ConfirmPaymentPlan

def OTAPI_Wrap_Create_SmartContract(*args):
  return _otapi.OTAPI_Wrap_Create_SmartContract(*args)
OTAPI_Wrap_Create_SmartContract = _otapi.OTAPI_Wrap_Create_SmartContract

def OTAPI_Wrap_SmartContract_AddBylaw(*args):
  return _otapi.OTAPI_Wrap_SmartContract_AddBylaw(*args)
OTAPI_Wrap_SmartContract_AddBylaw = _otapi.OTAPI_Wrap_SmartContract_AddBylaw

def OTAPI_Wrap_SmartContract_AddClause(*args):
  return _otapi.OTAPI_Wrap_SmartContract_AddClause(*args)
OTAPI_Wrap_SmartContract_AddClause = _otapi.OTAPI_Wrap_SmartContract_AddClause

def OTAPI_Wrap_SmartContract_AddVariable(*args):
  return _otapi.OTAPI_Wrap_SmartContract_AddVariable(*args)
OTAPI_Wrap_SmartContract_AddVariable = _otapi.OTAPI_Wrap_SmartContract_AddVariable

def OTAPI_Wrap_SmartContract_AddCallback(*args):
  return _otapi.OTAPI_Wrap_SmartContract_AddCallback(*args)
OTAPI_Wrap_SmartContract_AddCallback = _otapi.OTAPI_Wrap_SmartContract_AddCallback

def OTAPI_Wrap_SmartContract_AddHook(*args):
  return _otapi.OTAPI_Wrap_SmartContract_AddHook(*args)
OTAPI_Wrap_SmartContract_AddHook = _otapi.OTAPI_Wrap_SmartContract_AddHook

def OTAPI_Wrap_SmartContract_AddParty(*args):
  return _otapi.OTAPI_Wrap_SmartContract_AddParty(*args)
OTAPI_Wrap_SmartContract_AddParty = _otapi.OTAPI_Wrap_SmartContract_AddParty

def OTAPI_Wrap_SmartContract_AddAccount(*args):
  return _otapi.OTAPI_Wrap_SmartContract_AddAccount(*args)
OTAPI_Wrap_SmartContract_AddAccount = _otapi.OTAPI_Wrap_SmartContract_AddAccount

def OTAPI_Wrap_SmartContract_CountNumsNeeded(*args):
  return _otapi.OTAPI_Wrap_SmartContract_CountNumsNeeded(*args)
OTAPI_Wrap_SmartContract_CountNumsNeeded = _otapi.OTAPI_Wrap_SmartContract_CountNumsNeeded

def OTAPI_Wrap_SmartContract_ConfirmAccount(*args):
  return _otapi.OTAPI_Wrap_SmartContract_ConfirmAccount(*args)
OTAPI_Wrap_SmartContract_ConfirmAccount = _otapi.OTAPI_Wrap_SmartContract_ConfirmAccount

def OTAPI_Wrap_SmartContract_ConfirmParty(*args):
  return _otapi.OTAPI_Wrap_SmartContract_ConfirmParty(*args)
OTAPI_Wrap_SmartContract_ConfirmParty = _otapi.OTAPI_Wrap_SmartContract_ConfirmParty

def OTAPI_Wrap_Smart_AreAllPartiesConfirmed(*args):
  return _otapi.OTAPI_Wrap_Smart_AreAllPartiesConfirmed(*args)
OTAPI_Wrap_Smart_AreAllPartiesConfirmed = _otapi.OTAPI_Wrap_Smart_AreAllPartiesConfirmed

def OTAPI_Wrap_Smart_GetBylawCount(*args):
  return _otapi.OTAPI_Wrap_Smart_GetBylawCount(*args)
OTAPI_Wrap_Smart_GetBylawCount = _otapi.OTAPI_Wrap_Smart_GetBylawCount

def OTAPI_Wrap_Smart_GetBylawByIndex(*args):
  return _otapi.OTAPI_Wrap_Smart_GetBylawByIndex(*args)
OTAPI_Wrap_Smart_GetBylawByIndex = _otapi.OTAPI_Wrap_Smart_GetBylawByIndex

def OTAPI_Wrap_Bylaw_GetLanguage(*args):
  return _otapi.OTAPI_Wrap_Bylaw_GetLanguage(*args)
OTAPI_Wrap_Bylaw_GetLanguage = _otapi.OTAPI_Wrap_Bylaw_GetLanguage

def OTAPI_Wrap_Bylaw_GetClauseCount(*args):
  return _otapi.OTAPI_Wrap_Bylaw_GetClauseCount(*args)
OTAPI_Wrap_Bylaw_GetClauseCount = _otapi.OTAPI_Wrap_Bylaw_GetClauseCount

def OTAPI_Wrap_Clause_GetNameByIndex(*args):
  return _otapi.OTAPI_Wrap_Clause_GetNameByIndex(*args)
OTAPI_Wrap_Clause_GetNameByIndex = _otapi.OTAPI_Wrap_Clause_GetNameByIndex

def OTAPI_Wrap_Clause_GetContents(*args):
  return _otapi.OTAPI_Wrap_Clause_GetContents(*args)
OTAPI_Wrap_Clause_GetContents = _otapi.OTAPI_Wrap_Clause_GetContents

def OTAPI_Wrap_Bylaw_GetVariableCount(*args):
  return _otapi.OTAPI_Wrap_Bylaw_GetVariableCount(*args)
OTAPI_Wrap_Bylaw_GetVariableCount = _otapi.OTAPI_Wrap_Bylaw_GetVariableCount

def OTAPI_Wrap_Variable_GetNameByIndex(*args):
  return _otapi.OTAPI_Wrap_Variable_GetNameByIndex(*args)
OTAPI_Wrap_Variable_GetNameByIndex = _otapi.OTAPI_Wrap_Variable_GetNameByIndex

def OTAPI_Wrap_Variable_GetType(*args):
  return _otapi.OTAPI_Wrap_Variable_GetType(*args)
OTAPI_Wrap_Variable_GetType = _otapi.OTAPI_Wrap_Variable_GetType

def OTAPI_Wrap_Variable_GetAccess(*args):
  return _otapi.OTAPI_Wrap_Variable_GetAccess(*args)
OTAPI_Wrap_Variable_GetAccess = _otapi.OTAPI_Wrap_Variable_GetAccess

def OTAPI_Wrap_Variable_GetContents(*args):
  return _otapi.OTAPI_Wrap_Variable_GetContents(*args)
OTAPI_Wrap_Variable_GetContents = _otapi.OTAPI_Wrap_Variable_GetContents

def OTAPI_Wrap_Bylaw_GetHookCount(*args):
  return _otapi.OTAPI_Wrap_Bylaw_GetHookCount(*args)
OTAPI_Wrap_Bylaw_GetHookCount = _otapi.OTAPI_Wrap_Bylaw_GetHookCount

def OTAPI_Wrap_Hook_GetNameByIndex(*args):
  return _otapi.OTAPI_Wrap_Hook_GetNameByIndex(*args)
OTAPI_Wrap_Hook_GetNameByIndex = _otapi.OTAPI_Wrap_Hook_GetNameByIndex

def OTAPI_Wrap_Hook_GetClauseCount(*args):
  return _otapi.OTAPI_Wrap_Hook_GetClauseCount(*args)
OTAPI_Wrap_Hook_GetClauseCount = _otapi.OTAPI_Wrap_Hook_GetClauseCount

def OTAPI_Wrap_Hook_GetClauseAtIndex(*args):
  return _otapi.OTAPI_Wrap_Hook_GetClauseAtIndex(*args)
OTAPI_Wrap_Hook_GetClauseAtIndex = _otapi.OTAPI_Wrap_Hook_GetClauseAtIndex

def OTAPI_Wrap_Bylaw_GetCallbackCount(*args):
  return _otapi.OTAPI_Wrap_Bylaw_GetCallbackCount(*args)
OTAPI_Wrap_Bylaw_GetCallbackCount = _otapi.OTAPI_Wrap_Bylaw_GetCallbackCount

def OTAPI_Wrap_Callback_GetNameByIndex(*args):
  return _otapi.OTAPI_Wrap_Callback_GetNameByIndex(*args)
OTAPI_Wrap_Callback_GetNameByIndex = _otapi.OTAPI_Wrap_Callback_GetNameByIndex

def OTAPI_Wrap_Callback_GetClause(*args):
  return _otapi.OTAPI_Wrap_Callback_GetClause(*args)
OTAPI_Wrap_Callback_GetClause = _otapi.OTAPI_Wrap_Callback_GetClause

def OTAPI_Wrap_Smart_GetPartyCount(*args):
  return _otapi.OTAPI_Wrap_Smart_GetPartyCount(*args)
OTAPI_Wrap_Smart_GetPartyCount = _otapi.OTAPI_Wrap_Smart_GetPartyCount

def OTAPI_Wrap_Smart_GetPartyByIndex(*args):
  return _otapi.OTAPI_Wrap_Smart_GetPartyByIndex(*args)
OTAPI_Wrap_Smart_GetPartyByIndex = _otapi.OTAPI_Wrap_Smart_GetPartyByIndex

def OTAPI_Wrap_Smart_IsPartyConfirmed(*args):
  return _otapi.OTAPI_Wrap_Smart_IsPartyConfirmed(*args)
OTAPI_Wrap_Smart_IsPartyConfirmed = _otapi.OTAPI_Wrap_Smart_IsPartyConfirmed

def OTAPI_Wrap_Party_GetID(*args):
  return _otapi.OTAPI_Wrap_Party_GetID(*args)
OTAPI_Wrap_Party_GetID = _otapi.OTAPI_Wrap_Party_GetID

def OTAPI_Wrap_Party_GetAcctCount(*args):
  return _otapi.OTAPI_Wrap_Party_GetAcctCount(*args)
OTAPI_Wrap_Party_GetAcctCount = _otapi.OTAPI_Wrap_Party_GetAcctCount

def OTAPI_Wrap_Party_GetAcctNameByIndex(*args):
  return _otapi.OTAPI_Wrap_Party_GetAcctNameByIndex(*args)
OTAPI_Wrap_Party_GetAcctNameByIndex = _otapi.OTAPI_Wrap_Party_GetAcctNameByIndex

def OTAPI_Wrap_Party_GetAcctID(*args):
  return _otapi.OTAPI_Wrap_Party_GetAcctID(*args)
OTAPI_Wrap_Party_GetAcctID = _otapi.OTAPI_Wrap_Party_GetAcctID

def OTAPI_Wrap_Party_GetAcctAssetID(*args):
  return _otapi.OTAPI_Wrap_Party_GetAcctAssetID(*args)
OTAPI_Wrap_Party_GetAcctAssetID = _otapi.OTAPI_Wrap_Party_GetAcctAssetID

def OTAPI_Wrap_Party_GetAcctAgentName(*args):
  return _otapi.OTAPI_Wrap_Party_GetAcctAgentName(*args)
OTAPI_Wrap_Party_GetAcctAgentName = _otapi.OTAPI_Wrap_Party_GetAcctAgentName

def OTAPI_Wrap_Party_GetAgentCount(*args):
  return _otapi.OTAPI_Wrap_Party_GetAgentCount(*args)
OTAPI_Wrap_Party_GetAgentCount = _otapi.OTAPI_Wrap_Party_GetAgentCount

def OTAPI_Wrap_Party_GetAgentNameByIndex(*args):
  return _otapi.OTAPI_Wrap_Party_GetAgentNameByIndex(*args)
OTAPI_Wrap_Party_GetAgentNameByIndex = _otapi.OTAPI_Wrap_Party_GetAgentNameByIndex

def OTAPI_Wrap_Party_GetAgentID(*args):
  return _otapi.OTAPI_Wrap_Party_GetAgentID(*args)
OTAPI_Wrap_Party_GetAgentID = _otapi.OTAPI_Wrap_Party_GetAgentID

def OTAPI_Wrap_activateSmartContract(*args):
  return _otapi.OTAPI_Wrap_activateSmartContract(*args)
OTAPI_Wrap_activateSmartContract = _otapi.OTAPI_Wrap_activateSmartContract

def OTAPI_Wrap_triggerClause(*args):
  return _otapi.OTAPI_Wrap_triggerClause(*args)
OTAPI_Wrap_triggerClause = _otapi.OTAPI_Wrap_triggerClause

def OTAPI_Wrap_Msg_HarvestTransactionNumbers(*args):
  return _otapi.OTAPI_Wrap_Msg_HarvestTransactionNumbers(*args)
OTAPI_Wrap_Msg_HarvestTransactionNumbers = _otapi.OTAPI_Wrap_Msg_HarvestTransactionNumbers

def OTAPI_Wrap_LoadUserPubkey_Encryption(*args):
  return _otapi.OTAPI_Wrap_LoadUserPubkey_Encryption(*args)
OTAPI_Wrap_LoadUserPubkey_Encryption = _otapi.OTAPI_Wrap_LoadUserPubkey_Encryption

def OTAPI_Wrap_LoadUserPubkey_Signing(*args):
  return _otapi.OTAPI_Wrap_LoadUserPubkey_Signing(*args)
OTAPI_Wrap_LoadUserPubkey_Signing = _otapi.OTAPI_Wrap_LoadUserPubkey_Signing

def OTAPI_Wrap_LoadPubkey_Encryption(*args):
  return _otapi.OTAPI_Wrap_LoadPubkey_Encryption(*args)
OTAPI_Wrap_LoadPubkey_Encryption = _otapi.OTAPI_Wrap_LoadPubkey_Encryption

def OTAPI_Wrap_LoadPubkey_Signing(*args):
  return _otapi.OTAPI_Wrap_LoadPubkey_Signing(*args)
OTAPI_Wrap_LoadPubkey_Signing = _otapi.OTAPI_Wrap_LoadPubkey_Signing

def OTAPI_Wrap_VerifyUserPrivateKey(*args):
  return _otapi.OTAPI_Wrap_VerifyUserPrivateKey(*args)
OTAPI_Wrap_VerifyUserPrivateKey = _otapi.OTAPI_Wrap_VerifyUserPrivateKey

def OTAPI_Wrap_LoadPurse(*args):
  return _otapi.OTAPI_Wrap_LoadPurse(*args)
OTAPI_Wrap_LoadPurse = _otapi.OTAPI_Wrap_LoadPurse

def OTAPI_Wrap_LoadMint(*args):
  return _otapi.OTAPI_Wrap_LoadMint(*args)
OTAPI_Wrap_LoadMint = _otapi.OTAPI_Wrap_LoadMint

def OTAPI_Wrap_LoadAssetContract(*args):
  return _otapi.OTAPI_Wrap_LoadAssetContract(*args)
OTAPI_Wrap_LoadAssetContract = _otapi.OTAPI_Wrap_LoadAssetContract

def OTAPI_Wrap_LoadServerContract(*args):
  return _otapi.OTAPI_Wrap_LoadServerContract(*args)
OTAPI_Wrap_LoadServerContract = _otapi.OTAPI_Wrap_LoadServerContract

def OTAPI_Wrap_Mint_IsStillGood(*args):
  return _otapi.OTAPI_Wrap_Mint_IsStillGood(*args)
OTAPI_Wrap_Mint_IsStillGood = _otapi.OTAPI_Wrap_Mint_IsStillGood

def OTAPI_Wrap_IsBasketCurrency(*args):
  return _otapi.OTAPI_Wrap_IsBasketCurrency(*args)
OTAPI_Wrap_IsBasketCurrency = _otapi.OTAPI_Wrap_IsBasketCurrency

def OTAPI_Wrap_Basket_GetMemberCount(*args):
  return _otapi.OTAPI_Wrap_Basket_GetMemberCount(*args)
OTAPI_Wrap_Basket_GetMemberCount = _otapi.OTAPI_Wrap_Basket_GetMemberCount

def OTAPI_Wrap_Basket_GetMemberType(*args):
  return _otapi.OTAPI_Wrap_Basket_GetMemberType(*args)
OTAPI_Wrap_Basket_GetMemberType = _otapi.OTAPI_Wrap_Basket_GetMemberType

def OTAPI_Wrap_Basket_GetMinimumTransferAmount(*args):
  return _otapi.OTAPI_Wrap_Basket_GetMinimumTransferAmount(*args)
OTAPI_Wrap_Basket_GetMinimumTransferAmount = _otapi.OTAPI_Wrap_Basket_GetMinimumTransferAmount

def OTAPI_Wrap_Basket_GetMemberMinimumTransferAmount(*args):
  return _otapi.OTAPI_Wrap_Basket_GetMemberMinimumTransferAmount(*args)
OTAPI_Wrap_Basket_GetMemberMinimumTransferAmount = _otapi.OTAPI_Wrap_Basket_GetMemberMinimumTransferAmount

def OTAPI_Wrap_LoadAssetAccount(*args):
  return _otapi.OTAPI_Wrap_LoadAssetAccount(*args)
OTAPI_Wrap_LoadAssetAccount = _otapi.OTAPI_Wrap_LoadAssetAccount

def OTAPI_Wrap_LoadInbox(*args):
  return _otapi.OTAPI_Wrap_LoadInbox(*args)
OTAPI_Wrap_LoadInbox = _otapi.OTAPI_Wrap_LoadInbox

def OTAPI_Wrap_LoadOutbox(*args):
  return _otapi.OTAPI_Wrap_LoadOutbox(*args)
OTAPI_Wrap_LoadOutbox = _otapi.OTAPI_Wrap_LoadOutbox

def OTAPI_Wrap_LoadInboxNoVerify(*args):
  return _otapi.OTAPI_Wrap_LoadInboxNoVerify(*args)
OTAPI_Wrap_LoadInboxNoVerify = _otapi.OTAPI_Wrap_LoadInboxNoVerify

def OTAPI_Wrap_LoadOutboxNoVerify(*args):
  return _otapi.OTAPI_Wrap_LoadOutboxNoVerify(*args)
OTAPI_Wrap_LoadOutboxNoVerify = _otapi.OTAPI_Wrap_LoadOutboxNoVerify

def OTAPI_Wrap_LoadPaymentInbox(*args):
  return _otapi.OTAPI_Wrap_LoadPaymentInbox(*args)
OTAPI_Wrap_LoadPaymentInbox = _otapi.OTAPI_Wrap_LoadPaymentInbox

def OTAPI_Wrap_LoadPaymentInboxNoVerify(*args):
  return _otapi.OTAPI_Wrap_LoadPaymentInboxNoVerify(*args)
OTAPI_Wrap_LoadPaymentInboxNoVerify = _otapi.OTAPI_Wrap_LoadPaymentInboxNoVerify

def OTAPI_Wrap_LoadRecordBox(*args):
  return _otapi.OTAPI_Wrap_LoadRecordBox(*args)
OTAPI_Wrap_LoadRecordBox = _otapi.OTAPI_Wrap_LoadRecordBox

def OTAPI_Wrap_LoadRecordBoxNoVerify(*args):
  return _otapi.OTAPI_Wrap_LoadRecordBoxNoVerify(*args)
OTAPI_Wrap_LoadRecordBoxNoVerify = _otapi.OTAPI_Wrap_LoadRecordBoxNoVerify

def OTAPI_Wrap_ClearRecord(*args):
  return _otapi.OTAPI_Wrap_ClearRecord(*args)
OTAPI_Wrap_ClearRecord = _otapi.OTAPI_Wrap_ClearRecord

def OTAPI_Wrap_LoadExpiredBox(*args):
  return _otapi.OTAPI_Wrap_LoadExpiredBox(*args)
OTAPI_Wrap_LoadExpiredBox = _otapi.OTAPI_Wrap_LoadExpiredBox

def OTAPI_Wrap_LoadExpiredBoxNoVerify(*args):
  return _otapi.OTAPI_Wrap_LoadExpiredBoxNoVerify(*args)
OTAPI_Wrap_LoadExpiredBoxNoVerify = _otapi.OTAPI_Wrap_LoadExpiredBoxNoVerify

def OTAPI_Wrap_ClearExpired(*args):
  return _otapi.OTAPI_Wrap_ClearExpired(*args)
OTAPI_Wrap_ClearExpired = _otapi.OTAPI_Wrap_ClearExpired

def OTAPI_Wrap_Ledger_GetCount(*args):
  return _otapi.OTAPI_Wrap_Ledger_GetCount(*args)
OTAPI_Wrap_Ledger_GetCount = _otapi.OTAPI_Wrap_Ledger_GetCount

def OTAPI_Wrap_Ledger_CreateResponse(*args):
  return _otapi.OTAPI_Wrap_Ledger_CreateResponse(*args)
OTAPI_Wrap_Ledger_CreateResponse = _otapi.OTAPI_Wrap_Ledger_CreateResponse

def OTAPI_Wrap_Ledger_GetTransactionByIndex(*args):
  return _otapi.OTAPI_Wrap_Ledger_GetTransactionByIndex(*args)
OTAPI_Wrap_Ledger_GetTransactionByIndex = _otapi.OTAPI_Wrap_Ledger_GetTransactionByIndex

def OTAPI_Wrap_Ledger_GetTransactionByID(*args):
  return _otapi.OTAPI_Wrap_Ledger_GetTransactionByID(*args)
OTAPI_Wrap_Ledger_GetTransactionByID = _otapi.OTAPI_Wrap_Ledger_GetTransactionByID

def OTAPI_Wrap_Ledger_GetTransactionIDByIndex(*args):
  return _otapi.OTAPI_Wrap_Ledger_GetTransactionIDByIndex(*args)
OTAPI_Wrap_Ledger_GetTransactionIDByIndex = _otapi.OTAPI_Wrap_Ledger_GetTransactionIDByIndex

def OTAPI_Wrap_Ledger_AddTransaction(*args):
  return _otapi.OTAPI_Wrap_Ledger_AddTransaction(*args)
OTAPI_Wrap_Ledger_AddTransaction = _otapi.OTAPI_Wrap_Ledger_AddTransaction

def OTAPI_Wrap_Transaction_CreateResponse(*args):
  return _otapi.OTAPI_Wrap_Transaction_CreateResponse(*args)
OTAPI_Wrap_Transaction_CreateResponse = _otapi.OTAPI_Wrap_Transaction_CreateResponse

def OTAPI_Wrap_Ledger_FinalizeResponse(*args):
  return _otapi.OTAPI_Wrap_Ledger_FinalizeResponse(*args)
OTAPI_Wrap_Ledger_FinalizeResponse = _otapi.OTAPI_Wrap_Ledger_FinalizeResponse

def OTAPI_Wrap_Ledger_GetInstrument(*args):
  return _otapi.OTAPI_Wrap_Ledger_GetInstrument(*args)
OTAPI_Wrap_Ledger_GetInstrument = _otapi.OTAPI_Wrap_Ledger_GetInstrument

def OTAPI_Wrap_RecordPayment(*args):
  return _otapi.OTAPI_Wrap_RecordPayment(*args)
OTAPI_Wrap_RecordPayment = _otapi.OTAPI_Wrap_RecordPayment

def OTAPI_Wrap_Transaction_GetType(*args):
  return _otapi.OTAPI_Wrap_Transaction_GetType(*args)
OTAPI_Wrap_Transaction_GetType = _otapi.OTAPI_Wrap_Transaction_GetType

def OTAPI_Wrap_ReplyNotice_GetRequestNum(*args):
  return _otapi.OTAPI_Wrap_ReplyNotice_GetRequestNum(*args)
OTAPI_Wrap_ReplyNotice_GetRequestNum = _otapi.OTAPI_Wrap_ReplyNotice_GetRequestNum

def OTAPI_Wrap_Transaction_GetVoucher(*args):
  return _otapi.OTAPI_Wrap_Transaction_GetVoucher(*args)
OTAPI_Wrap_Transaction_GetVoucher = _otapi.OTAPI_Wrap_Transaction_GetVoucher

def OTAPI_Wrap_Transaction_GetSuccess(*args):
  return _otapi.OTAPI_Wrap_Transaction_GetSuccess(*args)
OTAPI_Wrap_Transaction_GetSuccess = _otapi.OTAPI_Wrap_Transaction_GetSuccess

def OTAPI_Wrap_Transaction_IsCanceled(*args):
  return _otapi.OTAPI_Wrap_Transaction_IsCanceled(*args)
OTAPI_Wrap_Transaction_IsCanceled = _otapi.OTAPI_Wrap_Transaction_IsCanceled

def OTAPI_Wrap_Transaction_GetBalanceAgreementSuccess(*args):
  return _otapi.OTAPI_Wrap_Transaction_GetBalanceAgreementSuccess(*args)
OTAPI_Wrap_Transaction_GetBalanceAgreementSuccess = _otapi.OTAPI_Wrap_Transaction_GetBalanceAgreementSuccess

def OTAPI_Wrap_Transaction_GetDateSigned(*args):
  return _otapi.OTAPI_Wrap_Transaction_GetDateSigned(*args)
OTAPI_Wrap_Transaction_GetDateSigned = _otapi.OTAPI_Wrap_Transaction_GetDateSigned

def OTAPI_Wrap_Transaction_GetAmount(*args):
  return _otapi.OTAPI_Wrap_Transaction_GetAmount(*args)
OTAPI_Wrap_Transaction_GetAmount = _otapi.OTAPI_Wrap_Transaction_GetAmount

def OTAPI_Wrap_Pending_GetNote(*args):
  return _otapi.OTAPI_Wrap_Pending_GetNote(*args)
OTAPI_Wrap_Pending_GetNote = _otapi.OTAPI_Wrap_Pending_GetNote

def OTAPI_Wrap_Transaction_GetSenderUserID(*args):
  return _otapi.OTAPI_Wrap_Transaction_GetSenderUserID(*args)
OTAPI_Wrap_Transaction_GetSenderUserID = _otapi.OTAPI_Wrap_Transaction_GetSenderUserID

def OTAPI_Wrap_Transaction_GetSenderAcctID(*args):
  return _otapi.OTAPI_Wrap_Transaction_GetSenderAcctID(*args)
OTAPI_Wrap_Transaction_GetSenderAcctID = _otapi.OTAPI_Wrap_Transaction_GetSenderAcctID

def OTAPI_Wrap_Transaction_GetRecipientUserID(*args):
  return _otapi.OTAPI_Wrap_Transaction_GetRecipientUserID(*args)
OTAPI_Wrap_Transaction_GetRecipientUserID = _otapi.OTAPI_Wrap_Transaction_GetRecipientUserID

def OTAPI_Wrap_Transaction_GetRecipientAcctID(*args):
  return _otapi.OTAPI_Wrap_Transaction_GetRecipientAcctID(*args)
OTAPI_Wrap_Transaction_GetRecipientAcctID = _otapi.OTAPI_Wrap_Transaction_GetRecipientAcctID

def OTAPI_Wrap_Transaction_GetDisplayReferenceToNum(*args):
  return _otapi.OTAPI_Wrap_Transaction_GetDisplayReferenceToNum(*args)
OTAPI_Wrap_Transaction_GetDisplayReferenceToNum = _otapi.OTAPI_Wrap_Transaction_GetDisplayReferenceToNum

def OTAPI_Wrap_SavePurse(*args):
  return _otapi.OTAPI_Wrap_SavePurse(*args)
OTAPI_Wrap_SavePurse = _otapi.OTAPI_Wrap_SavePurse

def OTAPI_Wrap_CreatePurse(*args):
  return _otapi.OTAPI_Wrap_CreatePurse(*args)
OTAPI_Wrap_CreatePurse = _otapi.OTAPI_Wrap_CreatePurse

def OTAPI_Wrap_CreatePurse_Passphrase(*args):
  return _otapi.OTAPI_Wrap_CreatePurse_Passphrase(*args)
OTAPI_Wrap_CreatePurse_Passphrase = _otapi.OTAPI_Wrap_CreatePurse_Passphrase

def OTAPI_Wrap_Purse_GetTotalValue(*args):
  return _otapi.OTAPI_Wrap_Purse_GetTotalValue(*args)
OTAPI_Wrap_Purse_GetTotalValue = _otapi.OTAPI_Wrap_Purse_GetTotalValue

def OTAPI_Wrap_Purse_Count(*args):
  return _otapi.OTAPI_Wrap_Purse_Count(*args)
OTAPI_Wrap_Purse_Count = _otapi.OTAPI_Wrap_Purse_Count

def OTAPI_Wrap_Purse_HasPassword(*args):
  return _otapi.OTAPI_Wrap_Purse_HasPassword(*args)
OTAPI_Wrap_Purse_HasPassword = _otapi.OTAPI_Wrap_Purse_HasPassword

def OTAPI_Wrap_Purse_Peek(*args):
  return _otapi.OTAPI_Wrap_Purse_Peek(*args)
OTAPI_Wrap_Purse_Peek = _otapi.OTAPI_Wrap_Purse_Peek

def OTAPI_Wrap_Purse_Pop(*args):
  return _otapi.OTAPI_Wrap_Purse_Pop(*args)
OTAPI_Wrap_Purse_Pop = _otapi.OTAPI_Wrap_Purse_Pop

def OTAPI_Wrap_Purse_Push(*args):
  return _otapi.OTAPI_Wrap_Purse_Push(*args)
OTAPI_Wrap_Purse_Push = _otapi.OTAPI_Wrap_Purse_Push

def OTAPI_Wrap_Purse_Empty(*args):
  return _otapi.OTAPI_Wrap_Purse_Empty(*args)
OTAPI_Wrap_Purse_Empty = _otapi.OTAPI_Wrap_Purse_Empty

def OTAPI_Wrap_Wallet_ImportPurse(*args):
  return _otapi.OTAPI_Wrap_Wallet_ImportPurse(*args)
OTAPI_Wrap_Wallet_ImportPurse = _otapi.OTAPI_Wrap_Wallet_ImportPurse

def OTAPI_Wrap_exchangePurse(*args):
  return _otapi.OTAPI_Wrap_exchangePurse(*args)
OTAPI_Wrap_exchangePurse = _otapi.OTAPI_Wrap_exchangePurse

def OTAPI_Wrap_Token_ChangeOwner(*args):
  return _otapi.OTAPI_Wrap_Token_ChangeOwner(*args)
OTAPI_Wrap_Token_ChangeOwner = _otapi.OTAPI_Wrap_Token_ChangeOwner

def OTAPI_Wrap_Token_GetID(*args):
  return _otapi.OTAPI_Wrap_Token_GetID(*args)
OTAPI_Wrap_Token_GetID = _otapi.OTAPI_Wrap_Token_GetID

def OTAPI_Wrap_Token_GetDenomination(*args):
  return _otapi.OTAPI_Wrap_Token_GetDenomination(*args)
OTAPI_Wrap_Token_GetDenomination = _otapi.OTAPI_Wrap_Token_GetDenomination

def OTAPI_Wrap_Token_GetSeries(*args):
  return _otapi.OTAPI_Wrap_Token_GetSeries(*args)
OTAPI_Wrap_Token_GetSeries = _otapi.OTAPI_Wrap_Token_GetSeries

def OTAPI_Wrap_Token_GetValidFrom(*args):
  return _otapi.OTAPI_Wrap_Token_GetValidFrom(*args)
OTAPI_Wrap_Token_GetValidFrom = _otapi.OTAPI_Wrap_Token_GetValidFrom

def OTAPI_Wrap_Token_GetValidTo(*args):
  return _otapi.OTAPI_Wrap_Token_GetValidTo(*args)
OTAPI_Wrap_Token_GetValidTo = _otapi.OTAPI_Wrap_Token_GetValidTo

def OTAPI_Wrap_Token_GetAssetID(*args):
  return _otapi.OTAPI_Wrap_Token_GetAssetID(*args)
OTAPI_Wrap_Token_GetAssetID = _otapi.OTAPI_Wrap_Token_GetAssetID

def OTAPI_Wrap_Token_GetServerID(*args):
  return _otapi.OTAPI_Wrap_Token_GetServerID(*args)
OTAPI_Wrap_Token_GetServerID = _otapi.OTAPI_Wrap_Token_GetServerID

def OTAPI_Wrap_Instrmnt_GetAmount(*args):
  return _otapi.OTAPI_Wrap_Instrmnt_GetAmount(*args)
OTAPI_Wrap_Instrmnt_GetAmount = _otapi.OTAPI_Wrap_Instrmnt_GetAmount

def OTAPI_Wrap_Instrmnt_GetTransNum(*args):
  return _otapi.OTAPI_Wrap_Instrmnt_GetTransNum(*args)
OTAPI_Wrap_Instrmnt_GetTransNum = _otapi.OTAPI_Wrap_Instrmnt_GetTransNum

def OTAPI_Wrap_Instrmnt_GetValidFrom(*args):
  return _otapi.OTAPI_Wrap_Instrmnt_GetValidFrom(*args)
OTAPI_Wrap_Instrmnt_GetValidFrom = _otapi.OTAPI_Wrap_Instrmnt_GetValidFrom

def OTAPI_Wrap_Instrmnt_GetValidTo(*args):
  return _otapi.OTAPI_Wrap_Instrmnt_GetValidTo(*args)
OTAPI_Wrap_Instrmnt_GetValidTo = _otapi.OTAPI_Wrap_Instrmnt_GetValidTo

def OTAPI_Wrap_Instrmnt_GetMemo(*args):
  return _otapi.OTAPI_Wrap_Instrmnt_GetMemo(*args)
OTAPI_Wrap_Instrmnt_GetMemo = _otapi.OTAPI_Wrap_Instrmnt_GetMemo

def OTAPI_Wrap_Instrmnt_GetType(*args):
  return _otapi.OTAPI_Wrap_Instrmnt_GetType(*args)
OTAPI_Wrap_Instrmnt_GetType = _otapi.OTAPI_Wrap_Instrmnt_GetType

def OTAPI_Wrap_Instrmnt_GetServerID(*args):
  return _otapi.OTAPI_Wrap_Instrmnt_GetServerID(*args)
OTAPI_Wrap_Instrmnt_GetServerID = _otapi.OTAPI_Wrap_Instrmnt_GetServerID

def OTAPI_Wrap_Instrmnt_GetAssetID(*args):
  return _otapi.OTAPI_Wrap_Instrmnt_GetAssetID(*args)
OTAPI_Wrap_Instrmnt_GetAssetID = _otapi.OTAPI_Wrap_Instrmnt_GetAssetID

def OTAPI_Wrap_Instrmnt_GetSenderUserID(*args):
  return _otapi.OTAPI_Wrap_Instrmnt_GetSenderUserID(*args)
OTAPI_Wrap_Instrmnt_GetSenderUserID = _otapi.OTAPI_Wrap_Instrmnt_GetSenderUserID

def OTAPI_Wrap_Instrmnt_GetSenderAcctID(*args):
  return _otapi.OTAPI_Wrap_Instrmnt_GetSenderAcctID(*args)
OTAPI_Wrap_Instrmnt_GetSenderAcctID = _otapi.OTAPI_Wrap_Instrmnt_GetSenderAcctID

def OTAPI_Wrap_Instrmnt_GetRemitterUserID(*args):
  return _otapi.OTAPI_Wrap_Instrmnt_GetRemitterUserID(*args)
OTAPI_Wrap_Instrmnt_GetRemitterUserID = _otapi.OTAPI_Wrap_Instrmnt_GetRemitterUserID

def OTAPI_Wrap_Instrmnt_GetRemitterAcctID(*args):
  return _otapi.OTAPI_Wrap_Instrmnt_GetRemitterAcctID(*args)
OTAPI_Wrap_Instrmnt_GetRemitterAcctID = _otapi.OTAPI_Wrap_Instrmnt_GetRemitterAcctID

def OTAPI_Wrap_Instrmnt_GetRecipientUserID(*args):
  return _otapi.OTAPI_Wrap_Instrmnt_GetRecipientUserID(*args)
OTAPI_Wrap_Instrmnt_GetRecipientUserID = _otapi.OTAPI_Wrap_Instrmnt_GetRecipientUserID

def OTAPI_Wrap_Instrmnt_GetRecipientAcctID(*args):
  return _otapi.OTAPI_Wrap_Instrmnt_GetRecipientAcctID(*args)
OTAPI_Wrap_Instrmnt_GetRecipientAcctID = _otapi.OTAPI_Wrap_Instrmnt_GetRecipientAcctID

def OTAPI_Wrap_checkServerID(*args):
  return _otapi.OTAPI_Wrap_checkServerID(*args)
OTAPI_Wrap_checkServerID = _otapi.OTAPI_Wrap_checkServerID

def OTAPI_Wrap_createUserAccount(*args):
  return _otapi.OTAPI_Wrap_createUserAccount(*args)
OTAPI_Wrap_createUserAccount = _otapi.OTAPI_Wrap_createUserAccount

def OTAPI_Wrap_deleteUserAccount(*args):
  return _otapi.OTAPI_Wrap_deleteUserAccount(*args)
OTAPI_Wrap_deleteUserAccount = _otapi.OTAPI_Wrap_deleteUserAccount

def OTAPI_Wrap_deleteAssetAccount(*args):
  return _otapi.OTAPI_Wrap_deleteAssetAccount(*args)
OTAPI_Wrap_deleteAssetAccount = _otapi.OTAPI_Wrap_deleteAssetAccount

def OTAPI_Wrap_usageCredits(*args):
  return _otapi.OTAPI_Wrap_usageCredits(*args)
OTAPI_Wrap_usageCredits = _otapi.OTAPI_Wrap_usageCredits

def OTAPI_Wrap_Message_GetUsageCredits(*args):
  return _otapi.OTAPI_Wrap_Message_GetUsageCredits(*args)
OTAPI_Wrap_Message_GetUsageCredits = _otapi.OTAPI_Wrap_Message_GetUsageCredits

def OTAPI_Wrap_checkUser(*args):
  return _otapi.OTAPI_Wrap_checkUser(*args)
OTAPI_Wrap_checkUser = _otapi.OTAPI_Wrap_checkUser

def OTAPI_Wrap_sendUserMessage(*args):
  return _otapi.OTAPI_Wrap_sendUserMessage(*args)
OTAPI_Wrap_sendUserMessage = _otapi.OTAPI_Wrap_sendUserMessage

def OTAPI_Wrap_sendUserInstrument(*args):
  return _otapi.OTAPI_Wrap_sendUserInstrument(*args)
OTAPI_Wrap_sendUserInstrument = _otapi.OTAPI_Wrap_sendUserInstrument

def OTAPI_Wrap_getRequest(*args):
  return _otapi.OTAPI_Wrap_getRequest(*args)
OTAPI_Wrap_getRequest = _otapi.OTAPI_Wrap_getRequest

def OTAPI_Wrap_getTransactionNumber(*args):
  return _otapi.OTAPI_Wrap_getTransactionNumber(*args)
OTAPI_Wrap_getTransactionNumber = _otapi.OTAPI_Wrap_getTransactionNumber

def OTAPI_Wrap_issueAssetType(*args):
  return _otapi.OTAPI_Wrap_issueAssetType(*args)
OTAPI_Wrap_issueAssetType = _otapi.OTAPI_Wrap_issueAssetType

def OTAPI_Wrap_getContract(*args):
  return _otapi.OTAPI_Wrap_getContract(*args)
OTAPI_Wrap_getContract = _otapi.OTAPI_Wrap_getContract

def OTAPI_Wrap_getMint(*args):
  return _otapi.OTAPI_Wrap_getMint(*args)
OTAPI_Wrap_getMint = _otapi.OTAPI_Wrap_getMint

def OTAPI_Wrap_createAssetAccount(*args):
  return _otapi.OTAPI_Wrap_createAssetAccount(*args)
OTAPI_Wrap_createAssetAccount = _otapi.OTAPI_Wrap_createAssetAccount

def OTAPI_Wrap_getAccount(*args):
  return _otapi.OTAPI_Wrap_getAccount(*args)
OTAPI_Wrap_getAccount = _otapi.OTAPI_Wrap_getAccount

def OTAPI_Wrap_getAccountFiles(*args):
  return _otapi.OTAPI_Wrap_getAccountFiles(*args)
OTAPI_Wrap_getAccountFiles = _otapi.OTAPI_Wrap_getAccountFiles

def OTAPI_Wrap_GenerateBasketCreation(*args):
  return _otapi.OTAPI_Wrap_GenerateBasketCreation(*args)
OTAPI_Wrap_GenerateBasketCreation = _otapi.OTAPI_Wrap_GenerateBasketCreation

def OTAPI_Wrap_AddBasketCreationItem(*args):
  return _otapi.OTAPI_Wrap_AddBasketCreationItem(*args)
OTAPI_Wrap_AddBasketCreationItem = _otapi.OTAPI_Wrap_AddBasketCreationItem

def OTAPI_Wrap_issueBasket(*args):
  return _otapi.OTAPI_Wrap_issueBasket(*args)
OTAPI_Wrap_issueBasket = _otapi.OTAPI_Wrap_issueBasket

def OTAPI_Wrap_GenerateBasketExchange(*args):
  return _otapi.OTAPI_Wrap_GenerateBasketExchange(*args)
OTAPI_Wrap_GenerateBasketExchange = _otapi.OTAPI_Wrap_GenerateBasketExchange

def OTAPI_Wrap_AddBasketExchangeItem(*args):
  return _otapi.OTAPI_Wrap_AddBasketExchangeItem(*args)
OTAPI_Wrap_AddBasketExchangeItem = _otapi.OTAPI_Wrap_AddBasketExchangeItem

def OTAPI_Wrap_exchangeBasket(*args):
  return _otapi.OTAPI_Wrap_exchangeBasket(*args)
OTAPI_Wrap_exchangeBasket = _otapi.OTAPI_Wrap_exchangeBasket

def OTAPI_Wrap_notarizeWithdrawal(*args):
  return _otapi.OTAPI_Wrap_notarizeWithdrawal(*args)
OTAPI_Wrap_notarizeWithdrawal = _otapi.OTAPI_Wrap_notarizeWithdrawal

def OTAPI_Wrap_notarizeDeposit(*args):
  return _otapi.OTAPI_Wrap_notarizeDeposit(*args)
OTAPI_Wrap_notarizeDeposit = _otapi.OTAPI_Wrap_notarizeDeposit

def OTAPI_Wrap_notarizeTransfer(*args):
  return _otapi.OTAPI_Wrap_notarizeTransfer(*args)
OTAPI_Wrap_notarizeTransfer = _otapi.OTAPI_Wrap_notarizeTransfer

def OTAPI_Wrap_getInbox(*args):
  return _otapi.OTAPI_Wrap_getInbox(*args)
OTAPI_Wrap_getInbox = _otapi.OTAPI_Wrap_getInbox

def OTAPI_Wrap_getOutbox(*args):
  return _otapi.OTAPI_Wrap_getOutbox(*args)
OTAPI_Wrap_getOutbox = _otapi.OTAPI_Wrap_getOutbox

def OTAPI_Wrap_getNymbox(*args):
  return _otapi.OTAPI_Wrap_getNymbox(*args)
OTAPI_Wrap_getNymbox = _otapi.OTAPI_Wrap_getNymbox

def OTAPI_Wrap_LoadNymbox(*args):
  return _otapi.OTAPI_Wrap_LoadNymbox(*args)
OTAPI_Wrap_LoadNymbox = _otapi.OTAPI_Wrap_LoadNymbox

def OTAPI_Wrap_LoadNymboxNoVerify(*args):
  return _otapi.OTAPI_Wrap_LoadNymboxNoVerify(*args)
OTAPI_Wrap_LoadNymboxNoVerify = _otapi.OTAPI_Wrap_LoadNymboxNoVerify

def OTAPI_Wrap_Nymbox_GetReplyNotice(*args):
  return _otapi.OTAPI_Wrap_Nymbox_GetReplyNotice(*args)
OTAPI_Wrap_Nymbox_GetReplyNotice = _otapi.OTAPI_Wrap_Nymbox_GetReplyNotice

def OTAPI_Wrap_HaveAlreadySeenReply(*args):
  return _otapi.OTAPI_Wrap_HaveAlreadySeenReply(*args)
OTAPI_Wrap_HaveAlreadySeenReply = _otapi.OTAPI_Wrap_HaveAlreadySeenReply

def OTAPI_Wrap_getBoxReceipt(*args):
  return _otapi.OTAPI_Wrap_getBoxReceipt(*args)
OTAPI_Wrap_getBoxReceipt = _otapi.OTAPI_Wrap_getBoxReceipt

def OTAPI_Wrap_DoesBoxReceiptExist(*args):
  return _otapi.OTAPI_Wrap_DoesBoxReceiptExist(*args)
OTAPI_Wrap_DoesBoxReceiptExist = _otapi.OTAPI_Wrap_DoesBoxReceiptExist

def OTAPI_Wrap_processInbox(*args):
  return _otapi.OTAPI_Wrap_processInbox(*args)
OTAPI_Wrap_processInbox = _otapi.OTAPI_Wrap_processInbox

def OTAPI_Wrap_processNymbox(*args):
  return _otapi.OTAPI_Wrap_processNymbox(*args)
OTAPI_Wrap_processNymbox = _otapi.OTAPI_Wrap_processNymbox

def OTAPI_Wrap_withdrawVoucher(*args):
  return _otapi.OTAPI_Wrap_withdrawVoucher(*args)
OTAPI_Wrap_withdrawVoucher = _otapi.OTAPI_Wrap_withdrawVoucher

def OTAPI_Wrap_payDividend(*args):
  return _otapi.OTAPI_Wrap_payDividend(*args)
OTAPI_Wrap_payDividend = _otapi.OTAPI_Wrap_payDividend

def OTAPI_Wrap_depositCheque(*args):
  return _otapi.OTAPI_Wrap_depositCheque(*args)
OTAPI_Wrap_depositCheque = _otapi.OTAPI_Wrap_depositCheque

def OTAPI_Wrap_depositPaymentPlan(*args):
  return _otapi.OTAPI_Wrap_depositPaymentPlan(*args)
OTAPI_Wrap_depositPaymentPlan = _otapi.OTAPI_Wrap_depositPaymentPlan

def OTAPI_Wrap_issueMarketOffer(*args):
  return _otapi.OTAPI_Wrap_issueMarketOffer(*args)
OTAPI_Wrap_issueMarketOffer = _otapi.OTAPI_Wrap_issueMarketOffer

def OTAPI_Wrap_getMarketList(*args):
  return _otapi.OTAPI_Wrap_getMarketList(*args)
OTAPI_Wrap_getMarketList = _otapi.OTAPI_Wrap_getMarketList

def OTAPI_Wrap_getMarketOffers(*args):
  return _otapi.OTAPI_Wrap_getMarketOffers(*args)
OTAPI_Wrap_getMarketOffers = _otapi.OTAPI_Wrap_getMarketOffers

def OTAPI_Wrap_getMarketRecentTrades(*args):
  return _otapi.OTAPI_Wrap_getMarketRecentTrades(*args)
OTAPI_Wrap_getMarketRecentTrades = _otapi.OTAPI_Wrap_getMarketRecentTrades

def OTAPI_Wrap_getNym_MarketOffers(*args):
  return _otapi.OTAPI_Wrap_getNym_MarketOffers(*args)
OTAPI_Wrap_getNym_MarketOffers = _otapi.OTAPI_Wrap_getNym_MarketOffers

def OTAPI_Wrap_killMarketOffer(*args):
  return _otapi.OTAPI_Wrap_killMarketOffer(*args)
OTAPI_Wrap_killMarketOffer = _otapi.OTAPI_Wrap_killMarketOffer

def OTAPI_Wrap_killPaymentPlan(*args):
  return _otapi.OTAPI_Wrap_killPaymentPlan(*args)
OTAPI_Wrap_killPaymentPlan = _otapi.OTAPI_Wrap_killPaymentPlan

def OTAPI_Wrap_PopMessageBuffer(*args):
  return _otapi.OTAPI_Wrap_PopMessageBuffer(*args)
OTAPI_Wrap_PopMessageBuffer = _otapi.OTAPI_Wrap_PopMessageBuffer

def OTAPI_Wrap_FlushMessageBuffer():
  return _otapi.OTAPI_Wrap_FlushMessageBuffer()
OTAPI_Wrap_FlushMessageBuffer = _otapi.OTAPI_Wrap_FlushMessageBuffer

def OTAPI_Wrap_GetSentMessage(*args):
  return _otapi.OTAPI_Wrap_GetSentMessage(*args)
OTAPI_Wrap_GetSentMessage = _otapi.OTAPI_Wrap_GetSentMessage

def OTAPI_Wrap_RemoveSentMessage(*args):
  return _otapi.OTAPI_Wrap_RemoveSentMessage(*args)
OTAPI_Wrap_RemoveSentMessage = _otapi.OTAPI_Wrap_RemoveSentMessage

def OTAPI_Wrap_FlushSentMessages(*args):
  return _otapi.OTAPI_Wrap_FlushSentMessages(*args)
OTAPI_Wrap_FlushSentMessages = _otapi.OTAPI_Wrap_FlushSentMessages

def OTAPI_Wrap_Sleep(*args):
  return _otapi.OTAPI_Wrap_Sleep(*args)
OTAPI_Wrap_Sleep = _otapi.OTAPI_Wrap_Sleep

def OTAPI_Wrap_ResyncNymWithServer(*args):
  return _otapi.OTAPI_Wrap_ResyncNymWithServer(*args)
OTAPI_Wrap_ResyncNymWithServer = _otapi.OTAPI_Wrap_ResyncNymWithServer

def OTAPI_Wrap_Message_GetCommand(*args):
  return _otapi.OTAPI_Wrap_Message_GetCommand(*args)
OTAPI_Wrap_Message_GetCommand = _otapi.OTAPI_Wrap_Message_GetCommand

def OTAPI_Wrap_Message_GetSuccess(*args):
  return _otapi.OTAPI_Wrap_Message_GetSuccess(*args)
OTAPI_Wrap_Message_GetSuccess = _otapi.OTAPI_Wrap_Message_GetSuccess

def OTAPI_Wrap_queryAssetTypes(*args):
  return _otapi.OTAPI_Wrap_queryAssetTypes(*args)
OTAPI_Wrap_queryAssetTypes = _otapi.OTAPI_Wrap_queryAssetTypes

def OTAPI_Wrap_Message_GetPayload(*args):
  return _otapi.OTAPI_Wrap_Message_GetPayload(*args)
OTAPI_Wrap_Message_GetPayload = _otapi.OTAPI_Wrap_Message_GetPayload

def OTAPI_Wrap_Message_GetDepth(*args):
  return _otapi.OTAPI_Wrap_Message_GetDepth(*args)
OTAPI_Wrap_Message_GetDepth = _otapi.OTAPI_Wrap_Message_GetDepth

def OTAPI_Wrap_Message_GetTransactionSuccess(*args):
  return _otapi.OTAPI_Wrap_Message_GetTransactionSuccess(*args)
OTAPI_Wrap_Message_GetTransactionSuccess = _otapi.OTAPI_Wrap_Message_GetTransactionSuccess

def OTAPI_Wrap_Message_IsTransactionCanceled(*args):
  return _otapi.OTAPI_Wrap_Message_IsTransactionCanceled(*args)
OTAPI_Wrap_Message_IsTransactionCanceled = _otapi.OTAPI_Wrap_Message_IsTransactionCanceled

def OTAPI_Wrap_Message_GetBalanceAgreementSuccess(*args):
  return _otapi.OTAPI_Wrap_Message_GetBalanceAgreementSuccess(*args)
OTAPI_Wrap_Message_GetBalanceAgreementSuccess = _otapi.OTAPI_Wrap_Message_GetBalanceAgreementSuccess

def OTAPI_Wrap_Message_GetLedger(*args):
  return _otapi.OTAPI_Wrap_Message_GetLedger(*args)
OTAPI_Wrap_Message_GetLedger = _otapi.OTAPI_Wrap_Message_GetLedger

def OTAPI_Wrap_Message_GetNewAssetTypeID(*args):
  return _otapi.OTAPI_Wrap_Message_GetNewAssetTypeID(*args)
OTAPI_Wrap_Message_GetNewAssetTypeID = _otapi.OTAPI_Wrap_Message_GetNewAssetTypeID

def OTAPI_Wrap_Message_GetNewIssuerAcctID(*args):
  return _otapi.OTAPI_Wrap_Message_GetNewIssuerAcctID(*args)
OTAPI_Wrap_Message_GetNewIssuerAcctID = _otapi.OTAPI_Wrap_Message_GetNewIssuerAcctID

def OTAPI_Wrap_Message_GetNewAcctID(*args):
  return _otapi.OTAPI_Wrap_Message_GetNewAcctID(*args)
OTAPI_Wrap_Message_GetNewAcctID = _otapi.OTAPI_Wrap_Message_GetNewAcctID

def OTAPI_Wrap_Message_GetNymboxHash(*args):
  return _otapi.OTAPI_Wrap_Message_GetNymboxHash(*args)
OTAPI_Wrap_Message_GetNymboxHash = _otapi.OTAPI_Wrap_Message_GetNymboxHash

def OTAPI_Wrap_ConnectServer(*args):
  return _otapi.OTAPI_Wrap_ConnectServer(*args)
OTAPI_Wrap_ConnectServer = _otapi.OTAPI_Wrap_ConnectServer

def OTAPI_Wrap_ProcessSockets():
  return _otapi.OTAPI_Wrap_ProcessSockets()
OTAPI_Wrap_ProcessSockets = _otapi.OTAPI_Wrap_ProcessSockets


def OT_CLI_GetArgsCount(*args):
  return _otapi.OT_CLI_GetArgsCount(*args)
OT_CLI_GetArgsCount = _otapi.OT_CLI_GetArgsCount

def OT_CLI_GetValueByKey(*args):
  return _otapi.OT_CLI_GetValueByKey(*args)
OT_CLI_GetValueByKey = _otapi.OT_CLI_GetValueByKey

def OT_CLI_GetValueByIndex(*args):
  return _otapi.OT_CLI_GetValueByIndex(*args)
OT_CLI_GetValueByIndex = _otapi.OT_CLI_GetValueByIndex

def OT_CLI_GetKeyByIndex(*args):
  return _otapi.OT_CLI_GetKeyByIndex(*args)
OT_CLI_GetKeyByIndex = _otapi.OT_CLI_GetKeyByIndex

def OT_CLI_ReadLine():
  return _otapi.OT_CLI_ReadLine()
OT_CLI_ReadLine = _otapi.OT_CLI_ReadLine

def OT_CLI_ReadUntilEOF():
  return _otapi.OT_CLI_ReadUntilEOF()
OT_CLI_ReadUntilEOF = _otapi.OT_CLI_ReadUntilEOF
class OT_ME(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, OT_ME, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, OT_ME, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _otapi.new_OT_ME()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _otapi.delete_OT_ME
    __del__ = lambda self : None;
    def opentxs_main_loop(self): return _otapi.OT_ME_opentxs_main_loop(self)
    def make_sure_enough_trans_nums(self, *args): return _otapi.OT_ME_make_sure_enough_trans_nums(self, *args)
    def register_nym(self, *args): return _otapi.OT_ME_register_nym(self, *args)
    def check_user(self, *args): return _otapi.OT_ME_check_user(self, *args)
    def create_pseudonym(self, *args): return _otapi.OT_ME_create_pseudonym(self, *args)
    def issue_asset_type(self, *args): return _otapi.OT_ME_issue_asset_type(self, *args)
    def issue_basket_currency(self, *args): return _otapi.OT_ME_issue_basket_currency(self, *args)
    def exchange_basket_currency(self, *args): return _otapi.OT_ME_exchange_basket_currency(self, *args)
    def retrieve_contract(self, *args): return _otapi.OT_ME_retrieve_contract(self, *args)
    def load_or_retrieve_contract(self, *args): return _otapi.OT_ME_load_or_retrieve_contract(self, *args)
    def create_asset_acct(self, *args): return _otapi.OT_ME_create_asset_acct(self, *args)
    def stat_asset_account(self, *args): return _otapi.OT_ME_stat_asset_account(self, *args)
    def retrieve_account(self, *args): return _otapi.OT_ME_retrieve_account(self, *args)
    def retrieve_nym(self, *args): return _otapi.OT_ME_retrieve_nym(self, *args)
    def send_transfer(self, *args): return _otapi.OT_ME_send_transfer(self, *args)
    def process_inbox(self, *args): return _otapi.OT_ME_process_inbox(self, *args)
    def accept_inbox_items(self, *args): return _otapi.OT_ME_accept_inbox_items(self, *args)
    def discard_incoming_payments(self, *args): return _otapi.OT_ME_discard_incoming_payments(self, *args)
    def cancel_outgoing_payments(self, *args): return _otapi.OT_ME_cancel_outgoing_payments(self, *args)
    def accept_from_paymentbox(self, *args): return _otapi.OT_ME_accept_from_paymentbox(self, *args)
    def load_public_encryption_key(self, *args): return _otapi.OT_ME_load_public_encryption_key(self, *args)
    def load_public_signing_key(self, *args): return _otapi.OT_ME_load_public_signing_key(self, *args)
    def load_or_retrieve_encrypt_key(self, *args): return _otapi.OT_ME_load_or_retrieve_encrypt_key(self, *args)
    def load_or_retrieve_signing_key(self, *args): return _otapi.OT_ME_load_or_retrieve_signing_key(self, *args)
    def send_user_msg_pubkey(self, *args): return _otapi.OT_ME_send_user_msg_pubkey(self, *args)
    def send_user_pmnt_pubkey(self, *args): return _otapi.OT_ME_send_user_pmnt_pubkey(self, *args)
    def send_user_cash_pubkey(self, *args): return _otapi.OT_ME_send_user_cash_pubkey(self, *args)
    def send_user_msg(self, *args): return _otapi.OT_ME_send_user_msg(self, *args)
    def send_user_payment(self, *args): return _otapi.OT_ME_send_user_payment(self, *args)
    def send_user_cash(self, *args): return _otapi.OT_ME_send_user_cash(self, *args)
    def withdraw_and_send_cash(self, *args): return _otapi.OT_ME_withdraw_and_send_cash(self, *args)
    def get_payment_instrument(self, *args): return _otapi.OT_ME_get_payment_instrument(self, *args)
    def get_box_receipt(self, *args): return _otapi.OT_ME_get_box_receipt(self, *args)
    def retrieve_mint(self, *args): return _otapi.OT_ME_retrieve_mint(self, *args)
    def load_or_retrieve_mint(self, *args): return _otapi.OT_ME_load_or_retrieve_mint(self, *args)
    def query_asset_types(self, *args): return _otapi.OT_ME_query_asset_types(self, *args)
    def create_market_offer(self, *args): return _otapi.OT_ME_create_market_offer(self, *args)
    def kill_market_offer(self, *args): return _otapi.OT_ME_kill_market_offer(self, *args)
    def kill_payment_plan(self, *args): return _otapi.OT_ME_kill_payment_plan(self, *args)
    def cancel_payment_plan(self, *args): return _otapi.OT_ME_cancel_payment_plan(self, *args)
    def activate_smart_contract(self, *args): return _otapi.OT_ME_activate_smart_contract(self, *args)
    def trigger_clause(self, *args): return _otapi.OT_ME_trigger_clause(self, *args)
    def withdraw_cash(self, *args): return _otapi.OT_ME_withdraw_cash(self, *args)
    def easy_withdraw_cash(self, *args): return _otapi.OT_ME_easy_withdraw_cash(self, *args)
    def export_cash(self, *args): return _otapi.OT_ME_export_cash(self, *args)
    def withdraw_voucher(self, *args): return _otapi.OT_ME_withdraw_voucher(self, *args)
    def pay_dividend(self, *args): return _otapi.OT_ME_pay_dividend(self, *args)
    def deposit_cheque(self, *args): return _otapi.OT_ME_deposit_cheque(self, *args)
    def deposit_cash(self, *args): return _otapi.OT_ME_deposit_cash(self, *args)
    def deposit_local_purse(self, *args): return _otapi.OT_ME_deposit_local_purse(self, *args)
    def get_market_list(self, *args): return _otapi.OT_ME_get_market_list(self, *args)
    def get_market_offers(self, *args): return _otapi.OT_ME_get_market_offers(self, *args)
    def get_nym_market_offers(self, *args): return _otapi.OT_ME_get_nym_market_offers(self, *args)
    def get_market_recent_trades(self, *args): return _otapi.OT_ME_get_market_recent_trades(self, *args)
    def adjust_usage_credits(self, *args): return _otapi.OT_ME_adjust_usage_credits(self, *args)
    def VerifyMessageSuccess(self, *args): return _otapi.OT_ME_VerifyMessageSuccess(self, *args)
    def VerifyMsgBalanceAgrmntSuccess(self, *args): return _otapi.OT_ME_VerifyMsgBalanceAgrmntSuccess(self, *args)
    def VerifyMsgTrnxSuccess(self, *args): return _otapi.OT_ME_VerifyMsgTrnxSuccess(self, *args)
    def InterpretTransactionMsgReply(self, *args): return _otapi.OT_ME_InterpretTransactionMsgReply(self, *args)
    def ExecuteScript_ReturnString(self, *args): return _otapi.OT_ME_ExecuteScript_ReturnString(self, *args)
    def ExecuteScript_ReturnBool(self, *args): return _otapi.OT_ME_ExecuteScript_ReturnBool(self, *args)
    def ExecuteScript_ReturnInt(self, *args): return _otapi.OT_ME_ExecuteScript_ReturnInt(self, *args)
    def ExecuteScript_ReturnVoid(self, *args): return _otapi.OT_ME_ExecuteScript_ReturnVoid(self, *args)
    def AddVariable(self, *args): return _otapi.OT_ME_AddVariable(self, *args)
    def FindVariable(self, *args): return _otapi.OT_ME_FindVariable(self, *args)
    __swig_getmethods__["FindVariable2"] = lambda x: _otapi.OT_ME_FindVariable2
    if _newclass:FindVariable2 = staticmethod(_otapi.OT_ME_FindVariable2)
OT_ME_swigregister = _otapi.OT_ME_swigregister
OT_ME_swigregister(OT_ME)

def OT_ME_FindVariable2(*args):
  return _otapi.OT_ME_FindVariable2(*args)
OT_ME_FindVariable2 = _otapi.OT_ME_FindVariable2

PACK_MESSAGE_PACK = _otapi.PACK_MESSAGE_PACK
PACK_PROTOCOL_BUFFERS = _otapi.PACK_PROTOCOL_BUFFERS
PACK_TYPE_ERROR = _otapi.PACK_TYPE_ERROR
STORE_FILESYSTEM = _otapi.STORE_FILESYSTEM
STORE_TYPE_SUBCLASS = _otapi.STORE_TYPE_SUBCLASS
STORED_OBJ_STRING = _otapi.STORED_OBJ_STRING
STORED_OBJ_BLOB = _otapi.STORED_OBJ_BLOB
STORED_OBJ_STRING_MAP = _otapi.STORED_OBJ_STRING_MAP
STORED_OBJ_WALLET_DATA = _otapi.STORED_OBJ_WALLET_DATA
STORED_OBJ_BITCOIN_ACCT = _otapi.STORED_OBJ_BITCOIN_ACCT
STORED_OBJ_BITCOIN_SERVER = _otapi.STORED_OBJ_BITCOIN_SERVER
STORED_OBJ_RIPPLE_SERVER = _otapi.STORED_OBJ_RIPPLE_SERVER
STORED_OBJ_LOOM_SERVER = _otapi.STORED_OBJ_LOOM_SERVER
STORED_OBJ_SERVER_INFO = _otapi.STORED_OBJ_SERVER_INFO
STORED_OBJ_CONTACT_NYM = _otapi.STORED_OBJ_CONTACT_NYM
STORED_OBJ_CONTACT_ACCT = _otapi.STORED_OBJ_CONTACT_ACCT
STORED_OBJ_CONTACT = _otapi.STORED_OBJ_CONTACT
STORED_OBJ_ADDRESS_BOOK = _otapi.STORED_OBJ_ADDRESS_BOOK
STORED_OBJ_MARKET_DATA = _otapi.STORED_OBJ_MARKET_DATA
STORED_OBJ_MARKET_LIST = _otapi.STORED_OBJ_MARKET_LIST
STORED_OBJ_BID_DATA = _otapi.STORED_OBJ_BID_DATA
STORED_OBJ_ASK_DATA = _otapi.STORED_OBJ_ASK_DATA
STORED_OBJ_OFFER_LIST_MARKET = _otapi.STORED_OBJ_OFFER_LIST_MARKET
STORED_OBJ_TRADE_DATA_MARKET = _otapi.STORED_OBJ_TRADE_DATA_MARKET
STORED_OBJ_TRADE_LIST_MARKET = _otapi.STORED_OBJ_TRADE_LIST_MARKET
STORED_OBJ_OFFER_DATA_NYM = _otapi.STORED_OBJ_OFFER_DATA_NYM
STORED_OBJ_OFFER_LIST_NYM = _otapi.STORED_OBJ_OFFER_LIST_NYM
STORED_OBJ_TRADE_DATA_NYM = _otapi.STORED_OBJ_TRADE_DATA_NYM
STORED_OBJ_TRADE_LIST_NYM = _otapi.STORED_OBJ_TRADE_LIST_NYM
STORED_OBJ_ERROR = _otapi.STORED_OBJ_ERROR
class Storable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Storable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Storable
    __del__ = lambda self : None;
    __swig_getmethods__["Create"] = lambda x: _otapi.Storable_Create
    if _newclass:Create = staticmethod(_otapi.Storable_Create)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Storable_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Storable_ot_dynamic_cast)
Storable_swigregister = _otapi.Storable_swigregister
Storable_swigregister(Storable)

def Storable_Create(*args):
  return _otapi.Storable_Create(*args)
Storable_Create = _otapi.Storable_Create

def Storable_ot_dynamic_cast(*args):
  return _otapi.Storable_ot_dynamic_cast(*args)
Storable_ot_dynamic_cast = _otapi.Storable_ot_dynamic_cast

class Storage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Storage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Storage, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetPacker(self, *args): return _otapi.Storage_GetPacker(self, *args)
    def Exists(self, *args): return _otapi.Storage_Exists(self, *args)
    def FormPathString(self, *args): return _otapi.Storage_FormPathString(self, *args)
    __swig_destroy__ = _otapi.delete_Storage
    __del__ = lambda self : None;
    def StoreString(self, *args): return _otapi.Storage_StoreString(self, *args)
    def QueryString(self, *args): return _otapi.Storage_QueryString(self, *args)
    def StorePlainString(self, *args): return _otapi.Storage_StorePlainString(self, *args)
    def QueryPlainString(self, *args): return _otapi.Storage_QueryPlainString(self, *args)
    def StoreObject(self, *args): return _otapi.Storage_StoreObject(self, *args)
    def QueryObject(self, *args): return _otapi.Storage_QueryObject(self, *args)
    def EncodeObject(self, *args): return _otapi.Storage_EncodeObject(self, *args)
    def DecodeObject(self, *args): return _otapi.Storage_DecodeObject(self, *args)
    def EraseValueByKey(self, *args): return _otapi.Storage_EraseValueByKey(self, *args)
    def CreateObject(self, *args): return _otapi.Storage_CreateObject(self, *args)
    __swig_getmethods__["Create"] = lambda x: _otapi.Storage_Create
    if _newclass:Create = staticmethod(_otapi.Storage_Create)
    def GetType(self): return _otapi.Storage_GetType(self)
Storage_swigregister = _otapi.Storage_swigregister
Storage_swigregister(Storage)

def Storage_Create(*args):
  return _otapi.Storage_Create(*args)
Storage_Create = _otapi.Storage_Create


def InitDefaultStorage(*args):
  return _otapi.InitDefaultStorage(*args)
InitDefaultStorage = _otapi.InitDefaultStorage

def GetDefaultStorage():
  return _otapi.GetDefaultStorage()
GetDefaultStorage = _otapi.GetDefaultStorage

def CreateStorageContext(*args):
  return _otapi.CreateStorageContext(*args)
CreateStorageContext = _otapi.CreateStorageContext

def CreateObject(*args):
  return _otapi.CreateObject(*args)
CreateObject = _otapi.CreateObject

def CheckStringsExistInOrder(*args):
  return _otapi.CheckStringsExistInOrder(*args)
CheckStringsExistInOrder = _otapi.CheckStringsExistInOrder

def Exists(*args):
  return _otapi.Exists(*args)
Exists = _otapi.Exists

def FormPathString(*args):
  return _otapi.FormPathString(*args)
FormPathString = _otapi.FormPathString

def StoreString(*args):
  return _otapi.StoreString(*args)
StoreString = _otapi.StoreString

def QueryString(*args):
  return _otapi.QueryString(*args)
QueryString = _otapi.QueryString

def StorePlainString(*args):
  return _otapi.StorePlainString(*args)
StorePlainString = _otapi.StorePlainString

def QueryPlainString(*args):
  return _otapi.QueryPlainString(*args)
QueryPlainString = _otapi.QueryPlainString

def StoreObject(*args):
  return _otapi.StoreObject(*args)
StoreObject = _otapi.StoreObject

def QueryObject(*args):
  return _otapi.QueryObject(*args)
QueryObject = _otapi.QueryObject

def EncodeObject(*args):
  return _otapi.EncodeObject(*args)
EncodeObject = _otapi.EncodeObject

def DecodeObject(*args):
  return _otapi.DecodeObject(*args)
DecodeObject = _otapi.DecodeObject

def EraseValueByKey(*args):
  return _otapi.EraseValueByKey(*args)
EraseValueByKey = _otapi.EraseValueByKey
class OTDBString(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OTDBString, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OTDBString, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_OTDBString
    __del__ = lambda self : None;
    __swig_setmethods__["m_string"] = _otapi.OTDBString_m_string_set
    __swig_getmethods__["m_string"] = _otapi.OTDBString_m_string_get
    if _newclass:m_string = _swig_property(_otapi.OTDBString_m_string_get, _otapi.OTDBString_m_string_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.OTDBString_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.OTDBString_ot_dynamic_cast)
OTDBString_swigregister = _otapi.OTDBString_swigregister
OTDBString_swigregister(OTDBString)

def OTDBString_ot_dynamic_cast(*args):
  return _otapi.OTDBString_ot_dynamic_cast(*args)
OTDBString_ot_dynamic_cast = _otapi.OTDBString_ot_dynamic_cast

class Blob(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Blob, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Blob, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Blob
    __del__ = lambda self : None;
    __swig_setmethods__["m_memBuffer"] = _otapi.Blob_m_memBuffer_set
    __swig_getmethods__["m_memBuffer"] = _otapi.Blob_m_memBuffer_get
    if _newclass:m_memBuffer = _swig_property(_otapi.Blob_m_memBuffer_get, _otapi.Blob_m_memBuffer_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Blob_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Blob_ot_dynamic_cast)
Blob_swigregister = _otapi.Blob_swigregister
Blob_swigregister(Blob)

def Blob_ot_dynamic_cast(*args):
  return _otapi.Blob_ot_dynamic_cast(*args)
Blob_ot_dynamic_cast = _otapi.Blob_ot_dynamic_cast

class StringMap(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringMap, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringMap, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_StringMap
    __del__ = lambda self : None;
    __swig_setmethods__["the_map"] = _otapi.StringMap_the_map_set
    __swig_getmethods__["the_map"] = _otapi.StringMap_the_map_get
    if _newclass:the_map = _swig_property(_otapi.StringMap_the_map_get, _otapi.StringMap_the_map_set)
    def SetValue(self, *args): return _otapi.StringMap_SetValue(self, *args)
    def GetValue(self, *args): return _otapi.StringMap_GetValue(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.StringMap_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.StringMap_ot_dynamic_cast)
StringMap_swigregister = _otapi.StringMap_swigregister
StringMap_swigregister(StringMap)

def StringMap_ot_dynamic_cast(*args):
  return _otapi.StringMap_ot_dynamic_cast(*args)
StringMap_ot_dynamic_cast = _otapi.StringMap_ot_dynamic_cast

class Displayable(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Displayable, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Displayable, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Displayable
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.Displayable_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.Displayable_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.Displayable_gui_label_get, _otapi.Displayable_gui_label_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Displayable_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Displayable_ot_dynamic_cast)
Displayable_swigregister = _otapi.Displayable_swigregister
Displayable_swigregister(Displayable)

def Displayable_ot_dynamic_cast(*args):
  return _otapi.Displayable_ot_dynamic_cast(*args)
Displayable_ot_dynamic_cast = _otapi.Displayable_ot_dynamic_cast

class MarketData(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketData, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarketData, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_MarketData
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.MarketData_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.MarketData_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.MarketData_gui_label_get, _otapi.MarketData_gui_label_set)
    __swig_setmethods__["server_id"] = _otapi.MarketData_server_id_set
    __swig_getmethods__["server_id"] = _otapi.MarketData_server_id_get
    if _newclass:server_id = _swig_property(_otapi.MarketData_server_id_get, _otapi.MarketData_server_id_set)
    __swig_setmethods__["market_id"] = _otapi.MarketData_market_id_set
    __swig_getmethods__["market_id"] = _otapi.MarketData_market_id_get
    if _newclass:market_id = _swig_property(_otapi.MarketData_market_id_get, _otapi.MarketData_market_id_set)
    __swig_setmethods__["asset_type_id"] = _otapi.MarketData_asset_type_id_set
    __swig_getmethods__["asset_type_id"] = _otapi.MarketData_asset_type_id_get
    if _newclass:asset_type_id = _swig_property(_otapi.MarketData_asset_type_id_get, _otapi.MarketData_asset_type_id_set)
    __swig_setmethods__["currency_type_id"] = _otapi.MarketData_currency_type_id_set
    __swig_getmethods__["currency_type_id"] = _otapi.MarketData_currency_type_id_get
    if _newclass:currency_type_id = _swig_property(_otapi.MarketData_currency_type_id_get, _otapi.MarketData_currency_type_id_set)
    __swig_setmethods__["scale"] = _otapi.MarketData_scale_set
    __swig_getmethods__["scale"] = _otapi.MarketData_scale_get
    if _newclass:scale = _swig_property(_otapi.MarketData_scale_get, _otapi.MarketData_scale_set)
    __swig_setmethods__["total_assets"] = _otapi.MarketData_total_assets_set
    __swig_getmethods__["total_assets"] = _otapi.MarketData_total_assets_get
    if _newclass:total_assets = _swig_property(_otapi.MarketData_total_assets_get, _otapi.MarketData_total_assets_set)
    __swig_setmethods__["number_bids"] = _otapi.MarketData_number_bids_set
    __swig_getmethods__["number_bids"] = _otapi.MarketData_number_bids_get
    if _newclass:number_bids = _swig_property(_otapi.MarketData_number_bids_get, _otapi.MarketData_number_bids_set)
    __swig_setmethods__["number_asks"] = _otapi.MarketData_number_asks_set
    __swig_getmethods__["number_asks"] = _otapi.MarketData_number_asks_get
    if _newclass:number_asks = _swig_property(_otapi.MarketData_number_asks_get, _otapi.MarketData_number_asks_set)
    __swig_setmethods__["last_sale_price"] = _otapi.MarketData_last_sale_price_set
    __swig_getmethods__["last_sale_price"] = _otapi.MarketData_last_sale_price_get
    if _newclass:last_sale_price = _swig_property(_otapi.MarketData_last_sale_price_get, _otapi.MarketData_last_sale_price_set)
    __swig_setmethods__["current_bid"] = _otapi.MarketData_current_bid_set
    __swig_getmethods__["current_bid"] = _otapi.MarketData_current_bid_get
    if _newclass:current_bid = _swig_property(_otapi.MarketData_current_bid_get, _otapi.MarketData_current_bid_set)
    __swig_setmethods__["current_ask"] = _otapi.MarketData_current_ask_set
    __swig_getmethods__["current_ask"] = _otapi.MarketData_current_ask_get
    if _newclass:current_ask = _swig_property(_otapi.MarketData_current_ask_get, _otapi.MarketData_current_ask_set)
    __swig_setmethods__["volume_trades"] = _otapi.MarketData_volume_trades_set
    __swig_getmethods__["volume_trades"] = _otapi.MarketData_volume_trades_get
    if _newclass:volume_trades = _swig_property(_otapi.MarketData_volume_trades_get, _otapi.MarketData_volume_trades_set)
    __swig_setmethods__["volume_assets"] = _otapi.MarketData_volume_assets_set
    __swig_getmethods__["volume_assets"] = _otapi.MarketData_volume_assets_get
    if _newclass:volume_assets = _swig_property(_otapi.MarketData_volume_assets_get, _otapi.MarketData_volume_assets_set)
    __swig_setmethods__["volume_currency"] = _otapi.MarketData_volume_currency_set
    __swig_getmethods__["volume_currency"] = _otapi.MarketData_volume_currency_get
    if _newclass:volume_currency = _swig_property(_otapi.MarketData_volume_currency_get, _otapi.MarketData_volume_currency_set)
    __swig_setmethods__["recent_highest_bid"] = _otapi.MarketData_recent_highest_bid_set
    __swig_getmethods__["recent_highest_bid"] = _otapi.MarketData_recent_highest_bid_get
    if _newclass:recent_highest_bid = _swig_property(_otapi.MarketData_recent_highest_bid_get, _otapi.MarketData_recent_highest_bid_set)
    __swig_setmethods__["recent_lowest_ask"] = _otapi.MarketData_recent_lowest_ask_set
    __swig_getmethods__["recent_lowest_ask"] = _otapi.MarketData_recent_lowest_ask_get
    if _newclass:recent_lowest_ask = _swig_property(_otapi.MarketData_recent_lowest_ask_get, _otapi.MarketData_recent_lowest_ask_set)
    __swig_setmethods__["last_sale_date"] = _otapi.MarketData_last_sale_date_set
    __swig_getmethods__["last_sale_date"] = _otapi.MarketData_last_sale_date_get
    if _newclass:last_sale_date = _swig_property(_otapi.MarketData_last_sale_date_get, _otapi.MarketData_last_sale_date_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.MarketData_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.MarketData_ot_dynamic_cast)
MarketData_swigregister = _otapi.MarketData_swigregister
MarketData_swigregister(MarketData)

def MarketData_ot_dynamic_cast(*args):
  return _otapi.MarketData_ot_dynamic_cast(*args)
MarketData_ot_dynamic_cast = _otapi.MarketData_ot_dynamic_cast

class MarketList(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MarketList, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MarketList, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_MarketList
    __del__ = lambda self : None;
    def GetMarketDataCount(self): return _otapi.MarketList_GetMarketDataCount(self)
    def GetMarketData(self, *args): return _otapi.MarketList_GetMarketData(self, *args)
    def RemoveMarketData(self, *args): return _otapi.MarketList_RemoveMarketData(self, *args)
    def AddMarketData(self, *args): return _otapi.MarketList_AddMarketData(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.MarketList_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.MarketList_ot_dynamic_cast)
MarketList_swigregister = _otapi.MarketList_swigregister
MarketList_swigregister(MarketList)

def MarketList_ot_dynamic_cast(*args):
  return _otapi.MarketList_ot_dynamic_cast(*args)
MarketList_ot_dynamic_cast = _otapi.MarketList_ot_dynamic_cast

class OfferDataMarket(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferDataMarket, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfferDataMarket, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_OfferDataMarket
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.OfferDataMarket_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.OfferDataMarket_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.OfferDataMarket_gui_label_get, _otapi.OfferDataMarket_gui_label_set)
    __swig_setmethods__["transaction_id"] = _otapi.OfferDataMarket_transaction_id_set
    __swig_getmethods__["transaction_id"] = _otapi.OfferDataMarket_transaction_id_get
    if _newclass:transaction_id = _swig_property(_otapi.OfferDataMarket_transaction_id_get, _otapi.OfferDataMarket_transaction_id_set)
    __swig_setmethods__["price_per_scale"] = _otapi.OfferDataMarket_price_per_scale_set
    __swig_getmethods__["price_per_scale"] = _otapi.OfferDataMarket_price_per_scale_get
    if _newclass:price_per_scale = _swig_property(_otapi.OfferDataMarket_price_per_scale_get, _otapi.OfferDataMarket_price_per_scale_set)
    __swig_setmethods__["available_assets"] = _otapi.OfferDataMarket_available_assets_set
    __swig_getmethods__["available_assets"] = _otapi.OfferDataMarket_available_assets_get
    if _newclass:available_assets = _swig_property(_otapi.OfferDataMarket_available_assets_get, _otapi.OfferDataMarket_available_assets_set)
    __swig_setmethods__["minimum_increment"] = _otapi.OfferDataMarket_minimum_increment_set
    __swig_getmethods__["minimum_increment"] = _otapi.OfferDataMarket_minimum_increment_get
    if _newclass:minimum_increment = _swig_property(_otapi.OfferDataMarket_minimum_increment_get, _otapi.OfferDataMarket_minimum_increment_set)
    __swig_setmethods__["date"] = _otapi.OfferDataMarket_date_set
    __swig_getmethods__["date"] = _otapi.OfferDataMarket_date_get
    if _newclass:date = _swig_property(_otapi.OfferDataMarket_date_get, _otapi.OfferDataMarket_date_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.OfferDataMarket_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.OfferDataMarket_ot_dynamic_cast)
OfferDataMarket_swigregister = _otapi.OfferDataMarket_swigregister
OfferDataMarket_swigregister(OfferDataMarket)

def OfferDataMarket_ot_dynamic_cast(*args):
  return _otapi.OfferDataMarket_ot_dynamic_cast(*args)
OfferDataMarket_ot_dynamic_cast = _otapi.OfferDataMarket_ot_dynamic_cast

class BidData(OfferDataMarket):
    __swig_setmethods__ = {}
    for _s in [OfferDataMarket]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BidData, name, value)
    __swig_getmethods__ = {}
    for _s in [OfferDataMarket]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BidData, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_BidData
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.BidData_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.BidData_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.BidData_gui_label_get, _otapi.BidData_gui_label_set)
    __swig_setmethods__["transaction_id"] = _otapi.BidData_transaction_id_set
    __swig_getmethods__["transaction_id"] = _otapi.BidData_transaction_id_get
    if _newclass:transaction_id = _swig_property(_otapi.BidData_transaction_id_get, _otapi.BidData_transaction_id_set)
    __swig_setmethods__["price_per_scale"] = _otapi.BidData_price_per_scale_set
    __swig_getmethods__["price_per_scale"] = _otapi.BidData_price_per_scale_get
    if _newclass:price_per_scale = _swig_property(_otapi.BidData_price_per_scale_get, _otapi.BidData_price_per_scale_set)
    __swig_setmethods__["available_assets"] = _otapi.BidData_available_assets_set
    __swig_getmethods__["available_assets"] = _otapi.BidData_available_assets_get
    if _newclass:available_assets = _swig_property(_otapi.BidData_available_assets_get, _otapi.BidData_available_assets_set)
    __swig_setmethods__["minimum_increment"] = _otapi.BidData_minimum_increment_set
    __swig_getmethods__["minimum_increment"] = _otapi.BidData_minimum_increment_get
    if _newclass:minimum_increment = _swig_property(_otapi.BidData_minimum_increment_get, _otapi.BidData_minimum_increment_set)
    __swig_setmethods__["date"] = _otapi.BidData_date_set
    __swig_getmethods__["date"] = _otapi.BidData_date_get
    if _newclass:date = _swig_property(_otapi.BidData_date_get, _otapi.BidData_date_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.BidData_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.BidData_ot_dynamic_cast)
BidData_swigregister = _otapi.BidData_swigregister
BidData_swigregister(BidData)

def BidData_ot_dynamic_cast(*args):
  return _otapi.BidData_ot_dynamic_cast(*args)
BidData_ot_dynamic_cast = _otapi.BidData_ot_dynamic_cast

class AskData(OfferDataMarket):
    __swig_setmethods__ = {}
    for _s in [OfferDataMarket]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AskData, name, value)
    __swig_getmethods__ = {}
    for _s in [OfferDataMarket]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AskData, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_AskData
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.AskData_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.AskData_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.AskData_gui_label_get, _otapi.AskData_gui_label_set)
    __swig_setmethods__["transaction_id"] = _otapi.AskData_transaction_id_set
    __swig_getmethods__["transaction_id"] = _otapi.AskData_transaction_id_get
    if _newclass:transaction_id = _swig_property(_otapi.AskData_transaction_id_get, _otapi.AskData_transaction_id_set)
    __swig_setmethods__["price_per_scale"] = _otapi.AskData_price_per_scale_set
    __swig_getmethods__["price_per_scale"] = _otapi.AskData_price_per_scale_get
    if _newclass:price_per_scale = _swig_property(_otapi.AskData_price_per_scale_get, _otapi.AskData_price_per_scale_set)
    __swig_setmethods__["available_assets"] = _otapi.AskData_available_assets_set
    __swig_getmethods__["available_assets"] = _otapi.AskData_available_assets_get
    if _newclass:available_assets = _swig_property(_otapi.AskData_available_assets_get, _otapi.AskData_available_assets_set)
    __swig_setmethods__["minimum_increment"] = _otapi.AskData_minimum_increment_set
    __swig_getmethods__["minimum_increment"] = _otapi.AskData_minimum_increment_get
    if _newclass:minimum_increment = _swig_property(_otapi.AskData_minimum_increment_get, _otapi.AskData_minimum_increment_set)
    __swig_setmethods__["date"] = _otapi.AskData_date_set
    __swig_getmethods__["date"] = _otapi.AskData_date_get
    if _newclass:date = _swig_property(_otapi.AskData_date_get, _otapi.AskData_date_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.AskData_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.AskData_ot_dynamic_cast)
AskData_swigregister = _otapi.AskData_swigregister
AskData_swigregister(AskData)

def AskData_ot_dynamic_cast(*args):
  return _otapi.AskData_ot_dynamic_cast(*args)
AskData_ot_dynamic_cast = _otapi.AskData_ot_dynamic_cast

class OfferListMarket(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferListMarket, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfferListMarket, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_OfferListMarket
    __del__ = lambda self : None;
    def GetBidDataCount(self): return _otapi.OfferListMarket_GetBidDataCount(self)
    def GetBidData(self, *args): return _otapi.OfferListMarket_GetBidData(self, *args)
    def RemoveBidData(self, *args): return _otapi.OfferListMarket_RemoveBidData(self, *args)
    def AddBidData(self, *args): return _otapi.OfferListMarket_AddBidData(self, *args)
    def GetAskDataCount(self): return _otapi.OfferListMarket_GetAskDataCount(self)
    def GetAskData(self, *args): return _otapi.OfferListMarket_GetAskData(self, *args)
    def RemoveAskData(self, *args): return _otapi.OfferListMarket_RemoveAskData(self, *args)
    def AddAskData(self, *args): return _otapi.OfferListMarket_AddAskData(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.OfferListMarket_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.OfferListMarket_ot_dynamic_cast)
OfferListMarket_swigregister = _otapi.OfferListMarket_swigregister
OfferListMarket_swigregister(OfferListMarket)

def OfferListMarket_ot_dynamic_cast(*args):
  return _otapi.OfferListMarket_ot_dynamic_cast(*args)
OfferListMarket_ot_dynamic_cast = _otapi.OfferListMarket_ot_dynamic_cast

class TradeDataMarket(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeDataMarket, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeDataMarket, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_TradeDataMarket
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.TradeDataMarket_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.TradeDataMarket_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.TradeDataMarket_gui_label_get, _otapi.TradeDataMarket_gui_label_set)
    __swig_setmethods__["transaction_id"] = _otapi.TradeDataMarket_transaction_id_set
    __swig_getmethods__["transaction_id"] = _otapi.TradeDataMarket_transaction_id_get
    if _newclass:transaction_id = _swig_property(_otapi.TradeDataMarket_transaction_id_get, _otapi.TradeDataMarket_transaction_id_set)
    __swig_setmethods__["date"] = _otapi.TradeDataMarket_date_set
    __swig_getmethods__["date"] = _otapi.TradeDataMarket_date_get
    if _newclass:date = _swig_property(_otapi.TradeDataMarket_date_get, _otapi.TradeDataMarket_date_set)
    __swig_setmethods__["price"] = _otapi.TradeDataMarket_price_set
    __swig_getmethods__["price"] = _otapi.TradeDataMarket_price_get
    if _newclass:price = _swig_property(_otapi.TradeDataMarket_price_get, _otapi.TradeDataMarket_price_set)
    __swig_setmethods__["amount_sold"] = _otapi.TradeDataMarket_amount_sold_set
    __swig_getmethods__["amount_sold"] = _otapi.TradeDataMarket_amount_sold_get
    if _newclass:amount_sold = _swig_property(_otapi.TradeDataMarket_amount_sold_get, _otapi.TradeDataMarket_amount_sold_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.TradeDataMarket_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.TradeDataMarket_ot_dynamic_cast)
TradeDataMarket_swigregister = _otapi.TradeDataMarket_swigregister
TradeDataMarket_swigregister(TradeDataMarket)

def TradeDataMarket_ot_dynamic_cast(*args):
  return _otapi.TradeDataMarket_ot_dynamic_cast(*args)
TradeDataMarket_ot_dynamic_cast = _otapi.TradeDataMarket_ot_dynamic_cast

class TradeListMarket(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeListMarket, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeListMarket, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_TradeListMarket
    __del__ = lambda self : None;
    def GetTradeDataMarketCount(self): return _otapi.TradeListMarket_GetTradeDataMarketCount(self)
    def GetTradeDataMarket(self, *args): return _otapi.TradeListMarket_GetTradeDataMarket(self, *args)
    def RemoveTradeDataMarket(self, *args): return _otapi.TradeListMarket_RemoveTradeDataMarket(self, *args)
    def AddTradeDataMarket(self, *args): return _otapi.TradeListMarket_AddTradeDataMarket(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.TradeListMarket_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.TradeListMarket_ot_dynamic_cast)
TradeListMarket_swigregister = _otapi.TradeListMarket_swigregister
TradeListMarket_swigregister(TradeListMarket)

def TradeListMarket_ot_dynamic_cast(*args):
  return _otapi.TradeListMarket_ot_dynamic_cast(*args)
TradeListMarket_ot_dynamic_cast = _otapi.TradeListMarket_ot_dynamic_cast

class OfferDataNym(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferDataNym, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfferDataNym, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_OfferDataNym
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.OfferDataNym_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.OfferDataNym_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.OfferDataNym_gui_label_get, _otapi.OfferDataNym_gui_label_set)
    __swig_setmethods__["valid_from"] = _otapi.OfferDataNym_valid_from_set
    __swig_getmethods__["valid_from"] = _otapi.OfferDataNym_valid_from_get
    if _newclass:valid_from = _swig_property(_otapi.OfferDataNym_valid_from_get, _otapi.OfferDataNym_valid_from_set)
    __swig_setmethods__["valid_to"] = _otapi.OfferDataNym_valid_to_set
    __swig_getmethods__["valid_to"] = _otapi.OfferDataNym_valid_to_get
    if _newclass:valid_to = _swig_property(_otapi.OfferDataNym_valid_to_get, _otapi.OfferDataNym_valid_to_set)
    __swig_setmethods__["server_id"] = _otapi.OfferDataNym_server_id_set
    __swig_getmethods__["server_id"] = _otapi.OfferDataNym_server_id_get
    if _newclass:server_id = _swig_property(_otapi.OfferDataNym_server_id_get, _otapi.OfferDataNym_server_id_set)
    __swig_setmethods__["asset_type_id"] = _otapi.OfferDataNym_asset_type_id_set
    __swig_getmethods__["asset_type_id"] = _otapi.OfferDataNym_asset_type_id_get
    if _newclass:asset_type_id = _swig_property(_otapi.OfferDataNym_asset_type_id_get, _otapi.OfferDataNym_asset_type_id_set)
    __swig_setmethods__["asset_acct_id"] = _otapi.OfferDataNym_asset_acct_id_set
    __swig_getmethods__["asset_acct_id"] = _otapi.OfferDataNym_asset_acct_id_get
    if _newclass:asset_acct_id = _swig_property(_otapi.OfferDataNym_asset_acct_id_get, _otapi.OfferDataNym_asset_acct_id_set)
    __swig_setmethods__["currency_type_id"] = _otapi.OfferDataNym_currency_type_id_set
    __swig_getmethods__["currency_type_id"] = _otapi.OfferDataNym_currency_type_id_get
    if _newclass:currency_type_id = _swig_property(_otapi.OfferDataNym_currency_type_id_get, _otapi.OfferDataNym_currency_type_id_set)
    __swig_setmethods__["currency_acct_id"] = _otapi.OfferDataNym_currency_acct_id_set
    __swig_getmethods__["currency_acct_id"] = _otapi.OfferDataNym_currency_acct_id_get
    if _newclass:currency_acct_id = _swig_property(_otapi.OfferDataNym_currency_acct_id_get, _otapi.OfferDataNym_currency_acct_id_set)
    __swig_setmethods__["selling"] = _otapi.OfferDataNym_selling_set
    __swig_getmethods__["selling"] = _otapi.OfferDataNym_selling_get
    if _newclass:selling = _swig_property(_otapi.OfferDataNym_selling_get, _otapi.OfferDataNym_selling_set)
    __swig_setmethods__["scale"] = _otapi.OfferDataNym_scale_set
    __swig_getmethods__["scale"] = _otapi.OfferDataNym_scale_get
    if _newclass:scale = _swig_property(_otapi.OfferDataNym_scale_get, _otapi.OfferDataNym_scale_set)
    __swig_setmethods__["price_per_scale"] = _otapi.OfferDataNym_price_per_scale_set
    __swig_getmethods__["price_per_scale"] = _otapi.OfferDataNym_price_per_scale_get
    if _newclass:price_per_scale = _swig_property(_otapi.OfferDataNym_price_per_scale_get, _otapi.OfferDataNym_price_per_scale_set)
    __swig_setmethods__["transaction_id"] = _otapi.OfferDataNym_transaction_id_set
    __swig_getmethods__["transaction_id"] = _otapi.OfferDataNym_transaction_id_get
    if _newclass:transaction_id = _swig_property(_otapi.OfferDataNym_transaction_id_get, _otapi.OfferDataNym_transaction_id_set)
    __swig_setmethods__["total_assets"] = _otapi.OfferDataNym_total_assets_set
    __swig_getmethods__["total_assets"] = _otapi.OfferDataNym_total_assets_get
    if _newclass:total_assets = _swig_property(_otapi.OfferDataNym_total_assets_get, _otapi.OfferDataNym_total_assets_set)
    __swig_setmethods__["finished_so_far"] = _otapi.OfferDataNym_finished_so_far_set
    __swig_getmethods__["finished_so_far"] = _otapi.OfferDataNym_finished_so_far_get
    if _newclass:finished_so_far = _swig_property(_otapi.OfferDataNym_finished_so_far_get, _otapi.OfferDataNym_finished_so_far_set)
    __swig_setmethods__["minimum_increment"] = _otapi.OfferDataNym_minimum_increment_set
    __swig_getmethods__["minimum_increment"] = _otapi.OfferDataNym_minimum_increment_get
    if _newclass:minimum_increment = _swig_property(_otapi.OfferDataNym_minimum_increment_get, _otapi.OfferDataNym_minimum_increment_set)
    __swig_setmethods__["stop_sign"] = _otapi.OfferDataNym_stop_sign_set
    __swig_getmethods__["stop_sign"] = _otapi.OfferDataNym_stop_sign_get
    if _newclass:stop_sign = _swig_property(_otapi.OfferDataNym_stop_sign_get, _otapi.OfferDataNym_stop_sign_set)
    __swig_setmethods__["stop_price"] = _otapi.OfferDataNym_stop_price_set
    __swig_getmethods__["stop_price"] = _otapi.OfferDataNym_stop_price_get
    if _newclass:stop_price = _swig_property(_otapi.OfferDataNym_stop_price_get, _otapi.OfferDataNym_stop_price_set)
    __swig_setmethods__["date"] = _otapi.OfferDataNym_date_set
    __swig_getmethods__["date"] = _otapi.OfferDataNym_date_get
    if _newclass:date = _swig_property(_otapi.OfferDataNym_date_get, _otapi.OfferDataNym_date_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.OfferDataNym_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.OfferDataNym_ot_dynamic_cast)
OfferDataNym_swigregister = _otapi.OfferDataNym_swigregister
OfferDataNym_swigregister(OfferDataNym)

def OfferDataNym_ot_dynamic_cast(*args):
  return _otapi.OfferDataNym_ot_dynamic_cast(*args)
OfferDataNym_ot_dynamic_cast = _otapi.OfferDataNym_ot_dynamic_cast

class OfferListNym(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OfferListNym, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OfferListNym, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_OfferListNym
    __del__ = lambda self : None;
    def GetOfferDataNymCount(self): return _otapi.OfferListNym_GetOfferDataNymCount(self)
    def GetOfferDataNym(self, *args): return _otapi.OfferListNym_GetOfferDataNym(self, *args)
    def RemoveOfferDataNym(self, *args): return _otapi.OfferListNym_RemoveOfferDataNym(self, *args)
    def AddOfferDataNym(self, *args): return _otapi.OfferListNym_AddOfferDataNym(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.OfferListNym_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.OfferListNym_ot_dynamic_cast)
OfferListNym_swigregister = _otapi.OfferListNym_swigregister
OfferListNym_swigregister(OfferListNym)

def OfferListNym_ot_dynamic_cast(*args):
  return _otapi.OfferListNym_ot_dynamic_cast(*args)
OfferListNym_ot_dynamic_cast = _otapi.OfferListNym_ot_dynamic_cast

class TradeDataNym(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeDataNym, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeDataNym, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_TradeDataNym
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.TradeDataNym_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.TradeDataNym_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.TradeDataNym_gui_label_get, _otapi.TradeDataNym_gui_label_set)
    __swig_setmethods__["transaction_id"] = _otapi.TradeDataNym_transaction_id_set
    __swig_getmethods__["transaction_id"] = _otapi.TradeDataNym_transaction_id_get
    if _newclass:transaction_id = _swig_property(_otapi.TradeDataNym_transaction_id_get, _otapi.TradeDataNym_transaction_id_set)
    __swig_setmethods__["completed_count"] = _otapi.TradeDataNym_completed_count_set
    __swig_getmethods__["completed_count"] = _otapi.TradeDataNym_completed_count_get
    if _newclass:completed_count = _swig_property(_otapi.TradeDataNym_completed_count_get, _otapi.TradeDataNym_completed_count_set)
    __swig_setmethods__["date"] = _otapi.TradeDataNym_date_set
    __swig_getmethods__["date"] = _otapi.TradeDataNym_date_get
    if _newclass:date = _swig_property(_otapi.TradeDataNym_date_get, _otapi.TradeDataNym_date_set)
    __swig_setmethods__["price"] = _otapi.TradeDataNym_price_set
    __swig_getmethods__["price"] = _otapi.TradeDataNym_price_get
    if _newclass:price = _swig_property(_otapi.TradeDataNym_price_get, _otapi.TradeDataNym_price_set)
    __swig_setmethods__["amount_sold"] = _otapi.TradeDataNym_amount_sold_set
    __swig_getmethods__["amount_sold"] = _otapi.TradeDataNym_amount_sold_get
    if _newclass:amount_sold = _swig_property(_otapi.TradeDataNym_amount_sold_get, _otapi.TradeDataNym_amount_sold_set)
    __swig_setmethods__["updated_id"] = _otapi.TradeDataNym_updated_id_set
    __swig_getmethods__["updated_id"] = _otapi.TradeDataNym_updated_id_get
    if _newclass:updated_id = _swig_property(_otapi.TradeDataNym_updated_id_get, _otapi.TradeDataNym_updated_id_set)
    __swig_setmethods__["offer_price"] = _otapi.TradeDataNym_offer_price_set
    __swig_getmethods__["offer_price"] = _otapi.TradeDataNym_offer_price_get
    if _newclass:offer_price = _swig_property(_otapi.TradeDataNym_offer_price_get, _otapi.TradeDataNym_offer_price_set)
    __swig_setmethods__["finished_so_far"] = _otapi.TradeDataNym_finished_so_far_set
    __swig_getmethods__["finished_so_far"] = _otapi.TradeDataNym_finished_so_far_get
    if _newclass:finished_so_far = _swig_property(_otapi.TradeDataNym_finished_so_far_get, _otapi.TradeDataNym_finished_so_far_set)
    __swig_setmethods__["asset_id"] = _otapi.TradeDataNym_asset_id_set
    __swig_getmethods__["asset_id"] = _otapi.TradeDataNym_asset_id_get
    if _newclass:asset_id = _swig_property(_otapi.TradeDataNym_asset_id_get, _otapi.TradeDataNym_asset_id_set)
    __swig_setmethods__["currency_id"] = _otapi.TradeDataNym_currency_id_set
    __swig_getmethods__["currency_id"] = _otapi.TradeDataNym_currency_id_get
    if _newclass:currency_id = _swig_property(_otapi.TradeDataNym_currency_id_get, _otapi.TradeDataNym_currency_id_set)
    __swig_setmethods__["currency_paid"] = _otapi.TradeDataNym_currency_paid_set
    __swig_getmethods__["currency_paid"] = _otapi.TradeDataNym_currency_paid_get
    if _newclass:currency_paid = _swig_property(_otapi.TradeDataNym_currency_paid_get, _otapi.TradeDataNym_currency_paid_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.TradeDataNym_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.TradeDataNym_ot_dynamic_cast)
TradeDataNym_swigregister = _otapi.TradeDataNym_swigregister
TradeDataNym_swigregister(TradeDataNym)

def TradeDataNym_ot_dynamic_cast(*args):
  return _otapi.TradeDataNym_ot_dynamic_cast(*args)
TradeDataNym_ot_dynamic_cast = _otapi.TradeDataNym_ot_dynamic_cast

class TradeListNym(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TradeListNym, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TradeListNym, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_TradeListNym
    __del__ = lambda self : None;
    def GetTradeDataNymCount(self): return _otapi.TradeListNym_GetTradeDataNymCount(self)
    def GetTradeDataNym(self, *args): return _otapi.TradeListNym_GetTradeDataNym(self, *args)
    def RemoveTradeDataNym(self, *args): return _otapi.TradeListNym_RemoveTradeDataNym(self, *args)
    def AddTradeDataNym(self, *args): return _otapi.TradeListNym_AddTradeDataNym(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.TradeListNym_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.TradeListNym_ot_dynamic_cast)
TradeListNym_swigregister = _otapi.TradeListNym_swigregister
TradeListNym_swigregister(TradeListNym)

def TradeListNym_ot_dynamic_cast(*args):
  return _otapi.TradeListNym_ot_dynamic_cast(*args)
TradeListNym_ot_dynamic_cast = _otapi.TradeListNym_ot_dynamic_cast

class Acct(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Acct, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Acct, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Acct
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.Acct_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.Acct_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.Acct_gui_label_get, _otapi.Acct_gui_label_set)
    __swig_setmethods__["acct_id"] = _otapi.Acct_acct_id_set
    __swig_getmethods__["acct_id"] = _otapi.Acct_acct_id_get
    if _newclass:acct_id = _swig_property(_otapi.Acct_acct_id_get, _otapi.Acct_acct_id_set)
    __swig_setmethods__["server_id"] = _otapi.Acct_server_id_set
    __swig_getmethods__["server_id"] = _otapi.Acct_server_id_get
    if _newclass:server_id = _swig_property(_otapi.Acct_server_id_get, _otapi.Acct_server_id_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Acct_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Acct_ot_dynamic_cast)
Acct_swigregister = _otapi.Acct_swigregister
Acct_swigregister(Acct)

def Acct_ot_dynamic_cast(*args):
  return _otapi.Acct_ot_dynamic_cast(*args)
Acct_ot_dynamic_cast = _otapi.Acct_ot_dynamic_cast

class BitcoinAcct(Acct):
    __swig_setmethods__ = {}
    for _s in [Acct]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitcoinAcct, name, value)
    __swig_getmethods__ = {}
    for _s in [Acct]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BitcoinAcct, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_BitcoinAcct
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.BitcoinAcct_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.BitcoinAcct_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.BitcoinAcct_gui_label_get, _otapi.BitcoinAcct_gui_label_set)
    __swig_setmethods__["acct_id"] = _otapi.BitcoinAcct_acct_id_set
    __swig_getmethods__["acct_id"] = _otapi.BitcoinAcct_acct_id_get
    if _newclass:acct_id = _swig_property(_otapi.BitcoinAcct_acct_id_get, _otapi.BitcoinAcct_acct_id_set)
    __swig_setmethods__["server_id"] = _otapi.BitcoinAcct_server_id_set
    __swig_getmethods__["server_id"] = _otapi.BitcoinAcct_server_id_get
    if _newclass:server_id = _swig_property(_otapi.BitcoinAcct_server_id_get, _otapi.BitcoinAcct_server_id_set)
    __swig_setmethods__["bitcoin_acct_name"] = _otapi.BitcoinAcct_bitcoin_acct_name_set
    __swig_getmethods__["bitcoin_acct_name"] = _otapi.BitcoinAcct_bitcoin_acct_name_get
    if _newclass:bitcoin_acct_name = _swig_property(_otapi.BitcoinAcct_bitcoin_acct_name_get, _otapi.BitcoinAcct_bitcoin_acct_name_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.BitcoinAcct_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.BitcoinAcct_ot_dynamic_cast)
BitcoinAcct_swigregister = _otapi.BitcoinAcct_swigregister
BitcoinAcct_swigregister(BitcoinAcct)

def BitcoinAcct_ot_dynamic_cast(*args):
  return _otapi.BitcoinAcct_ot_dynamic_cast(*args)
BitcoinAcct_ot_dynamic_cast = _otapi.BitcoinAcct_ot_dynamic_cast

class ServerInfo(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ServerInfo, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ServerInfo, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_ServerInfo
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.ServerInfo_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.ServerInfo_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.ServerInfo_gui_label_get, _otapi.ServerInfo_gui_label_set)
    __swig_setmethods__["server_id"] = _otapi.ServerInfo_server_id_set
    __swig_getmethods__["server_id"] = _otapi.ServerInfo_server_id_get
    if _newclass:server_id = _swig_property(_otapi.ServerInfo_server_id_get, _otapi.ServerInfo_server_id_set)
    __swig_setmethods__["server_type"] = _otapi.ServerInfo_server_type_set
    __swig_getmethods__["server_type"] = _otapi.ServerInfo_server_type_get
    if _newclass:server_type = _swig_property(_otapi.ServerInfo_server_type_get, _otapi.ServerInfo_server_type_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.ServerInfo_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.ServerInfo_ot_dynamic_cast)
ServerInfo_swigregister = _otapi.ServerInfo_swigregister
ServerInfo_swigregister(ServerInfo)

def ServerInfo_ot_dynamic_cast(*args):
  return _otapi.ServerInfo_ot_dynamic_cast(*args)
ServerInfo_ot_dynamic_cast = _otapi.ServerInfo_ot_dynamic_cast

class Server(ServerInfo):
    __swig_setmethods__ = {}
    for _s in [ServerInfo]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Server, name, value)
    __swig_getmethods__ = {}
    for _s in [ServerInfo]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Server, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Server
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.Server_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.Server_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.Server_gui_label_get, _otapi.Server_gui_label_set)
    __swig_setmethods__["server_id"] = _otapi.Server_server_id_set
    __swig_getmethods__["server_id"] = _otapi.Server_server_id_get
    if _newclass:server_id = _swig_property(_otapi.Server_server_id_get, _otapi.Server_server_id_set)
    __swig_setmethods__["server_type"] = _otapi.Server_server_type_set
    __swig_getmethods__["server_type"] = _otapi.Server_server_type_get
    if _newclass:server_type = _swig_property(_otapi.Server_server_type_get, _otapi.Server_server_type_set)
    __swig_setmethods__["server_host"] = _otapi.Server_server_host_set
    __swig_getmethods__["server_host"] = _otapi.Server_server_host_get
    if _newclass:server_host = _swig_property(_otapi.Server_server_host_get, _otapi.Server_server_host_set)
    __swig_setmethods__["server_port"] = _otapi.Server_server_port_set
    __swig_getmethods__["server_port"] = _otapi.Server_server_port_get
    if _newclass:server_port = _swig_property(_otapi.Server_server_port_get, _otapi.Server_server_port_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Server_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Server_ot_dynamic_cast)
Server_swigregister = _otapi.Server_swigregister
Server_swigregister(Server)

def Server_ot_dynamic_cast(*args):
  return _otapi.Server_ot_dynamic_cast(*args)
Server_ot_dynamic_cast = _otapi.Server_ot_dynamic_cast

class BitcoinServer(Server):
    __swig_setmethods__ = {}
    for _s in [Server]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BitcoinServer, name, value)
    __swig_getmethods__ = {}
    for _s in [Server]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BitcoinServer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_BitcoinServer
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.BitcoinServer_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.BitcoinServer_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.BitcoinServer_gui_label_get, _otapi.BitcoinServer_gui_label_set)
    __swig_setmethods__["server_id"] = _otapi.BitcoinServer_server_id_set
    __swig_getmethods__["server_id"] = _otapi.BitcoinServer_server_id_get
    if _newclass:server_id = _swig_property(_otapi.BitcoinServer_server_id_get, _otapi.BitcoinServer_server_id_set)
    __swig_setmethods__["server_type"] = _otapi.BitcoinServer_server_type_set
    __swig_getmethods__["server_type"] = _otapi.BitcoinServer_server_type_get
    if _newclass:server_type = _swig_property(_otapi.BitcoinServer_server_type_get, _otapi.BitcoinServer_server_type_set)
    __swig_setmethods__["server_host"] = _otapi.BitcoinServer_server_host_set
    __swig_getmethods__["server_host"] = _otapi.BitcoinServer_server_host_get
    if _newclass:server_host = _swig_property(_otapi.BitcoinServer_server_host_get, _otapi.BitcoinServer_server_host_set)
    __swig_setmethods__["server_port"] = _otapi.BitcoinServer_server_port_set
    __swig_getmethods__["server_port"] = _otapi.BitcoinServer_server_port_get
    if _newclass:server_port = _swig_property(_otapi.BitcoinServer_server_port_get, _otapi.BitcoinServer_server_port_set)
    __swig_setmethods__["bitcoin_username"] = _otapi.BitcoinServer_bitcoin_username_set
    __swig_getmethods__["bitcoin_username"] = _otapi.BitcoinServer_bitcoin_username_get
    if _newclass:bitcoin_username = _swig_property(_otapi.BitcoinServer_bitcoin_username_get, _otapi.BitcoinServer_bitcoin_username_set)
    __swig_setmethods__["bitcoin_password"] = _otapi.BitcoinServer_bitcoin_password_set
    __swig_getmethods__["bitcoin_password"] = _otapi.BitcoinServer_bitcoin_password_get
    if _newclass:bitcoin_password = _swig_property(_otapi.BitcoinServer_bitcoin_password_get, _otapi.BitcoinServer_bitcoin_password_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.BitcoinServer_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.BitcoinServer_ot_dynamic_cast)
BitcoinServer_swigregister = _otapi.BitcoinServer_swigregister
BitcoinServer_swigregister(BitcoinServer)

def BitcoinServer_ot_dynamic_cast(*args):
  return _otapi.BitcoinServer_ot_dynamic_cast(*args)
BitcoinServer_ot_dynamic_cast = _otapi.BitcoinServer_ot_dynamic_cast

class RippleServer(Server):
    __swig_setmethods__ = {}
    for _s in [Server]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RippleServer, name, value)
    __swig_getmethods__ = {}
    for _s in [Server]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RippleServer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_RippleServer
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.RippleServer_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.RippleServer_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.RippleServer_gui_label_get, _otapi.RippleServer_gui_label_set)
    __swig_setmethods__["server_id"] = _otapi.RippleServer_server_id_set
    __swig_getmethods__["server_id"] = _otapi.RippleServer_server_id_get
    if _newclass:server_id = _swig_property(_otapi.RippleServer_server_id_get, _otapi.RippleServer_server_id_set)
    __swig_setmethods__["server_type"] = _otapi.RippleServer_server_type_set
    __swig_getmethods__["server_type"] = _otapi.RippleServer_server_type_get
    if _newclass:server_type = _swig_property(_otapi.RippleServer_server_type_get, _otapi.RippleServer_server_type_set)
    __swig_setmethods__["server_host"] = _otapi.RippleServer_server_host_set
    __swig_getmethods__["server_host"] = _otapi.RippleServer_server_host_get
    if _newclass:server_host = _swig_property(_otapi.RippleServer_server_host_get, _otapi.RippleServer_server_host_set)
    __swig_setmethods__["server_port"] = _otapi.RippleServer_server_port_set
    __swig_getmethods__["server_port"] = _otapi.RippleServer_server_port_get
    if _newclass:server_port = _swig_property(_otapi.RippleServer_server_port_get, _otapi.RippleServer_server_port_set)
    __swig_setmethods__["ripple_username"] = _otapi.RippleServer_ripple_username_set
    __swig_getmethods__["ripple_username"] = _otapi.RippleServer_ripple_username_get
    if _newclass:ripple_username = _swig_property(_otapi.RippleServer_ripple_username_get, _otapi.RippleServer_ripple_username_set)
    __swig_setmethods__["ripple_password"] = _otapi.RippleServer_ripple_password_set
    __swig_getmethods__["ripple_password"] = _otapi.RippleServer_ripple_password_get
    if _newclass:ripple_password = _swig_property(_otapi.RippleServer_ripple_password_get, _otapi.RippleServer_ripple_password_set)
    __swig_setmethods__["namefield_id"] = _otapi.RippleServer_namefield_id_set
    __swig_getmethods__["namefield_id"] = _otapi.RippleServer_namefield_id_get
    if _newclass:namefield_id = _swig_property(_otapi.RippleServer_namefield_id_get, _otapi.RippleServer_namefield_id_set)
    __swig_setmethods__["passfield_id"] = _otapi.RippleServer_passfield_id_set
    __swig_getmethods__["passfield_id"] = _otapi.RippleServer_passfield_id_get
    if _newclass:passfield_id = _swig_property(_otapi.RippleServer_passfield_id_get, _otapi.RippleServer_passfield_id_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.RippleServer_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.RippleServer_ot_dynamic_cast)
RippleServer_swigregister = _otapi.RippleServer_swigregister
RippleServer_swigregister(RippleServer)

def RippleServer_ot_dynamic_cast(*args):
  return _otapi.RippleServer_ot_dynamic_cast(*args)
RippleServer_ot_dynamic_cast = _otapi.RippleServer_ot_dynamic_cast

class LoomServer(Server):
    __swig_setmethods__ = {}
    for _s in [Server]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LoomServer, name, value)
    __swig_getmethods__ = {}
    for _s in [Server]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LoomServer, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_LoomServer
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.LoomServer_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.LoomServer_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.LoomServer_gui_label_get, _otapi.LoomServer_gui_label_set)
    __swig_setmethods__["server_id"] = _otapi.LoomServer_server_id_set
    __swig_getmethods__["server_id"] = _otapi.LoomServer_server_id_get
    if _newclass:server_id = _swig_property(_otapi.LoomServer_server_id_get, _otapi.LoomServer_server_id_set)
    __swig_setmethods__["server_type"] = _otapi.LoomServer_server_type_set
    __swig_getmethods__["server_type"] = _otapi.LoomServer_server_type_get
    if _newclass:server_type = _swig_property(_otapi.LoomServer_server_type_get, _otapi.LoomServer_server_type_set)
    __swig_setmethods__["server_host"] = _otapi.LoomServer_server_host_set
    __swig_getmethods__["server_host"] = _otapi.LoomServer_server_host_get
    if _newclass:server_host = _swig_property(_otapi.LoomServer_server_host_get, _otapi.LoomServer_server_host_set)
    __swig_setmethods__["server_port"] = _otapi.LoomServer_server_port_set
    __swig_getmethods__["server_port"] = _otapi.LoomServer_server_port_get
    if _newclass:server_port = _swig_property(_otapi.LoomServer_server_port_get, _otapi.LoomServer_server_port_set)
    __swig_setmethods__["loom_username"] = _otapi.LoomServer_loom_username_set
    __swig_getmethods__["loom_username"] = _otapi.LoomServer_loom_username_get
    if _newclass:loom_username = _swig_property(_otapi.LoomServer_loom_username_get, _otapi.LoomServer_loom_username_set)
    __swig_setmethods__["namefield_id"] = _otapi.LoomServer_namefield_id_set
    __swig_getmethods__["namefield_id"] = _otapi.LoomServer_namefield_id_get
    if _newclass:namefield_id = _swig_property(_otapi.LoomServer_namefield_id_get, _otapi.LoomServer_namefield_id_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.LoomServer_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.LoomServer_ot_dynamic_cast)
LoomServer_swigregister = _otapi.LoomServer_swigregister
LoomServer_swigregister(LoomServer)

def LoomServer_ot_dynamic_cast(*args):
  return _otapi.LoomServer_ot_dynamic_cast(*args)
LoomServer_ot_dynamic_cast = _otapi.LoomServer_ot_dynamic_cast

class ContactNym(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactNym, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactNym, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_ContactNym
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.ContactNym_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.ContactNym_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.ContactNym_gui_label_get, _otapi.ContactNym_gui_label_set)
    __swig_setmethods__["nym_type"] = _otapi.ContactNym_nym_type_set
    __swig_getmethods__["nym_type"] = _otapi.ContactNym_nym_type_get
    if _newclass:nym_type = _swig_property(_otapi.ContactNym_nym_type_get, _otapi.ContactNym_nym_type_set)
    __swig_setmethods__["nym_id"] = _otapi.ContactNym_nym_id_set
    __swig_getmethods__["nym_id"] = _otapi.ContactNym_nym_id_get
    if _newclass:nym_id = _swig_property(_otapi.ContactNym_nym_id_get, _otapi.ContactNym_nym_id_set)
    __swig_setmethods__["public_key"] = _otapi.ContactNym_public_key_set
    __swig_getmethods__["public_key"] = _otapi.ContactNym_public_key_get
    if _newclass:public_key = _swig_property(_otapi.ContactNym_public_key_get, _otapi.ContactNym_public_key_set)
    __swig_setmethods__["memo"] = _otapi.ContactNym_memo_set
    __swig_getmethods__["memo"] = _otapi.ContactNym_memo_get
    if _newclass:memo = _swig_property(_otapi.ContactNym_memo_get, _otapi.ContactNym_memo_set)
    def GetServerInfoCount(self): return _otapi.ContactNym_GetServerInfoCount(self)
    def GetServerInfo(self, *args): return _otapi.ContactNym_GetServerInfo(self, *args)
    def RemoveServerInfo(self, *args): return _otapi.ContactNym_RemoveServerInfo(self, *args)
    def AddServerInfo(self, *args): return _otapi.ContactNym_AddServerInfo(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.ContactNym_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.ContactNym_ot_dynamic_cast)
ContactNym_swigregister = _otapi.ContactNym_swigregister
ContactNym_swigregister(ContactNym)

def ContactNym_ot_dynamic_cast(*args):
  return _otapi.ContactNym_ot_dynamic_cast(*args)
ContactNym_ot_dynamic_cast = _otapi.ContactNym_ot_dynamic_cast

class WalletData(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WalletData, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WalletData, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_WalletData
    __del__ = lambda self : None;
    def GetBitcoinServerCount(self): return _otapi.WalletData_GetBitcoinServerCount(self)
    def GetBitcoinServer(self, *args): return _otapi.WalletData_GetBitcoinServer(self, *args)
    def RemoveBitcoinServer(self, *args): return _otapi.WalletData_RemoveBitcoinServer(self, *args)
    def AddBitcoinServer(self, *args): return _otapi.WalletData_AddBitcoinServer(self, *args)
    def GetBitcoinAcctCount(self): return _otapi.WalletData_GetBitcoinAcctCount(self)
    def GetBitcoinAcct(self, *args): return _otapi.WalletData_GetBitcoinAcct(self, *args)
    def RemoveBitcoinAcct(self, *args): return _otapi.WalletData_RemoveBitcoinAcct(self, *args)
    def AddBitcoinAcct(self, *args): return _otapi.WalletData_AddBitcoinAcct(self, *args)
    def GetRippleServerCount(self): return _otapi.WalletData_GetRippleServerCount(self)
    def GetRippleServer(self, *args): return _otapi.WalletData_GetRippleServer(self, *args)
    def RemoveRippleServer(self, *args): return _otapi.WalletData_RemoveRippleServer(self, *args)
    def AddRippleServer(self, *args): return _otapi.WalletData_AddRippleServer(self, *args)
    def GetLoomServerCount(self): return _otapi.WalletData_GetLoomServerCount(self)
    def GetLoomServer(self, *args): return _otapi.WalletData_GetLoomServer(self, *args)
    def RemoveLoomServer(self, *args): return _otapi.WalletData_RemoveLoomServer(self, *args)
    def AddLoomServer(self, *args): return _otapi.WalletData_AddLoomServer(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.WalletData_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.WalletData_ot_dynamic_cast)
WalletData_swigregister = _otapi.WalletData_swigregister
WalletData_swigregister(WalletData)

def WalletData_ot_dynamic_cast(*args):
  return _otapi.WalletData_ot_dynamic_cast(*args)
WalletData_ot_dynamic_cast = _otapi.WalletData_ot_dynamic_cast

class ContactAcct(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ContactAcct, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ContactAcct, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_ContactAcct
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.ContactAcct_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.ContactAcct_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.ContactAcct_gui_label_get, _otapi.ContactAcct_gui_label_set)
    __swig_setmethods__["server_type"] = _otapi.ContactAcct_server_type_set
    __swig_getmethods__["server_type"] = _otapi.ContactAcct_server_type_get
    if _newclass:server_type = _swig_property(_otapi.ContactAcct_server_type_get, _otapi.ContactAcct_server_type_set)
    __swig_setmethods__["server_id"] = _otapi.ContactAcct_server_id_set
    __swig_getmethods__["server_id"] = _otapi.ContactAcct_server_id_get
    if _newclass:server_id = _swig_property(_otapi.ContactAcct_server_id_get, _otapi.ContactAcct_server_id_set)
    __swig_setmethods__["asset_type_id"] = _otapi.ContactAcct_asset_type_id_set
    __swig_getmethods__["asset_type_id"] = _otapi.ContactAcct_asset_type_id_get
    if _newclass:asset_type_id = _swig_property(_otapi.ContactAcct_asset_type_id_get, _otapi.ContactAcct_asset_type_id_set)
    __swig_setmethods__["acct_id"] = _otapi.ContactAcct_acct_id_set
    __swig_getmethods__["acct_id"] = _otapi.ContactAcct_acct_id_get
    if _newclass:acct_id = _swig_property(_otapi.ContactAcct_acct_id_get, _otapi.ContactAcct_acct_id_set)
    __swig_setmethods__["nym_id"] = _otapi.ContactAcct_nym_id_set
    __swig_getmethods__["nym_id"] = _otapi.ContactAcct_nym_id_get
    if _newclass:nym_id = _swig_property(_otapi.ContactAcct_nym_id_get, _otapi.ContactAcct_nym_id_set)
    __swig_setmethods__["memo"] = _otapi.ContactAcct_memo_set
    __swig_getmethods__["memo"] = _otapi.ContactAcct_memo_get
    if _newclass:memo = _swig_property(_otapi.ContactAcct_memo_get, _otapi.ContactAcct_memo_set)
    __swig_setmethods__["public_key"] = _otapi.ContactAcct_public_key_set
    __swig_getmethods__["public_key"] = _otapi.ContactAcct_public_key_get
    if _newclass:public_key = _swig_property(_otapi.ContactAcct_public_key_get, _otapi.ContactAcct_public_key_set)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.ContactAcct_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.ContactAcct_ot_dynamic_cast)
ContactAcct_swigregister = _otapi.ContactAcct_swigregister
ContactAcct_swigregister(ContactAcct)

def ContactAcct_ot_dynamic_cast(*args):
  return _otapi.ContactAcct_ot_dynamic_cast(*args)
ContactAcct_ot_dynamic_cast = _otapi.ContactAcct_ot_dynamic_cast

class Contact(Displayable):
    __swig_setmethods__ = {}
    for _s in [Displayable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Contact, name, value)
    __swig_getmethods__ = {}
    for _s in [Displayable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Contact, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_Contact
    __del__ = lambda self : None;
    __swig_setmethods__["gui_label"] = _otapi.Contact_gui_label_set
    __swig_getmethods__["gui_label"] = _otapi.Contact_gui_label_get
    if _newclass:gui_label = _swig_property(_otapi.Contact_gui_label_get, _otapi.Contact_gui_label_set)
    __swig_setmethods__["contact_id"] = _otapi.Contact_contact_id_set
    __swig_getmethods__["contact_id"] = _otapi.Contact_contact_id_get
    if _newclass:contact_id = _swig_property(_otapi.Contact_contact_id_get, _otapi.Contact_contact_id_set)
    __swig_setmethods__["email"] = _otapi.Contact_email_set
    __swig_getmethods__["email"] = _otapi.Contact_email_get
    if _newclass:email = _swig_property(_otapi.Contact_email_get, _otapi.Contact_email_set)
    __swig_setmethods__["memo"] = _otapi.Contact_memo_set
    __swig_getmethods__["memo"] = _otapi.Contact_memo_get
    if _newclass:memo = _swig_property(_otapi.Contact_memo_get, _otapi.Contact_memo_set)
    __swig_setmethods__["public_key"] = _otapi.Contact_public_key_set
    __swig_getmethods__["public_key"] = _otapi.Contact_public_key_get
    if _newclass:public_key = _swig_property(_otapi.Contact_public_key_get, _otapi.Contact_public_key_set)
    def GetContactNymCount(self): return _otapi.Contact_GetContactNymCount(self)
    def GetContactNym(self, *args): return _otapi.Contact_GetContactNym(self, *args)
    def RemoveContactNym(self, *args): return _otapi.Contact_RemoveContactNym(self, *args)
    def AddContactNym(self, *args): return _otapi.Contact_AddContactNym(self, *args)
    def GetContactAcctCount(self): return _otapi.Contact_GetContactAcctCount(self)
    def GetContactAcct(self, *args): return _otapi.Contact_GetContactAcct(self, *args)
    def RemoveContactAcct(self, *args): return _otapi.Contact_RemoveContactAcct(self, *args)
    def AddContactAcct(self, *args): return _otapi.Contact_AddContactAcct(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.Contact_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.Contact_ot_dynamic_cast)
Contact_swigregister = _otapi.Contact_swigregister
Contact_swigregister(Contact)

def Contact_ot_dynamic_cast(*args):
  return _otapi.Contact_ot_dynamic_cast(*args)
Contact_ot_dynamic_cast = _otapi.Contact_ot_dynamic_cast

class AddressBook(Storable):
    __swig_setmethods__ = {}
    for _s in [Storable]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AddressBook, name, value)
    __swig_getmethods__ = {}
    for _s in [Storable]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AddressBook, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _otapi.delete_AddressBook
    __del__ = lambda self : None;
    def GetContactCount(self): return _otapi.AddressBook_GetContactCount(self)
    def GetContact(self, *args): return _otapi.AddressBook_GetContact(self, *args)
    def RemoveContact(self, *args): return _otapi.AddressBook_RemoveContact(self, *args)
    def AddContact(self, *args): return _otapi.AddressBook_AddContact(self, *args)
    __swig_getmethods__["ot_dynamic_cast"] = lambda x: _otapi.AddressBook_ot_dynamic_cast
    if _newclass:ot_dynamic_cast = staticmethod(_otapi.AddressBook_ot_dynamic_cast)
AddressBook_swigregister = _otapi.AddressBook_swigregister
AddressBook_swigregister(AddressBook)

def AddressBook_ot_dynamic_cast(*args):
  return _otapi.AddressBook_ot_dynamic_cast(*args)
AddressBook_ot_dynamic_cast = _otapi.AddressBook_ot_dynamic_cast


def OT_API_Set_PasswordCallback(*args):
  return _otapi.OT_API_Set_PasswordCallback(*args)
OT_API_Set_PasswordCallback = _otapi.OT_API_Set_PasswordCallback
# This file is compatible with both classic and new-style classes.


